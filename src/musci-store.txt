Selected Files Directory Structure:

└── ./
    └── main
        ├── java
        │   ├── controller
        │   │   ├── ArtistManagement
        │   │   │   ├── AddArtistServlet.java
        │   │   │   ├── ArtistProfileServlet.java
        │   │   │   ├── ArtistProfileUpdateServlet.java
        │   │   │   ├── DeleteArtistServlet.java
        │   │   │   ├── ManageArtistViewServlet.java
        │   │   │   └── UpdateArtistServlet.java
        │   │   ├── filters
        │   │   │   ├── AdminFilter.java
        │   │   │   ├── AuthFilter.java
        │   │   │   └── RoleFilter.java
        │   │   ├── listeners
        │   │   │   └── DatabaseInitializer.java
        │   │   ├── MarketingManagement
        │   │   │   ├── AddAdvertisementServlet.java
        │   │   │   ├── AddPromotionServlet.java
        │   │   │   ├── DeleteAdvertisementServlet.java
        │   │   │   ├── DeletePromotionServlet.java
        │   │   │   ├── ManageMarketingViewServlet.java
        │   │   │   ├── TrackPromotionServlet.java
        │   │   │   ├── UpdateAdvertisementServlet.java
        │   │   │   ├── UpdatePromotionServlet.java
        │   │   │   ├── ValidatePromoCodeServlet.java
        │   │   │   └── ViewImageServlet.java
        │   │   ├── OrderManagement
        │   │   │   ├── AdminOrderDetailsServlet.java
        │   │   │   ├── OrderAdminServlet.java
        │   │   │   ├── OrderDetailsServlet.java
        │   │   │   ├── OrderServlet.java
        │   │   │   └── UserOrdersServlet.java
        │   │   ├── PostManagement
        │   │   │   ├── ApprovePostServlet.java
        │   │   │   ├── CommunityServlet.java
        │   │   │   ├── CreatePostServlet.java
        │   │   │   ├── DeletePostServlet.java
        │   │   │   ├── EditPostServlet.java
        │   │   │   ├── FeedServlet.java
        │   │   │   ├── ManagePostServlet.java
        │   │   │   ├── MyPostsServlet.java
        │   │   │   └── PostImageServlet.java
        │   │   ├── TrackManagement
        │   │   │   ├── AddTrackServlet.java
        │   │   │   ├── CoverArtServlet.java
        │   │   │   ├── DeleteTrackServlet.java
        │   │   │   ├── DownloadServlet.java
        │   │   │   ├── ManageTrackViewServlet.java
        │   │   │   ├── StreamServlet.java
        │   │   │   ├── UpdateTrackServlet.java
        │   │   │   └── UpdateTrackStatusServlet.java
        │   │   ├── UserManagement
        │   │   │   ├── AddUserServlet.java
        │   │   │   ├── DeleteUserServlet.java
        │   │   │   ├── LoginServlet.java
        │   │   │   ├── LogoutServlet.java
        │   │   │   ├── ManageUserViewServlet.java
        │   │   │   ├── ProfileServlet.java
        │   │   │   ├── RegisterServlet.java
        │   │   │   ├── UpdateProfileServlet.java
        │   │   │   └── UpdateUserServlet.java
        │   │   ├── CartServlet.java
        │   │   ├── IndexServlet.java
        │   │   ├── ManagePaymentsServlet.java
        │   │   ├── MyMusicServlet.java
        │   │   ├── PaymentController.java
        │   │   ├── PaymentSuccessController.java
        │   │   ├── ProcessPaymentController.java
        │   │   ├── SearchServlet.java
        │   │   ├── TrackPaginationServlet.java
        │   │   └── TrackServlet.java
        │   ├── dao
        │   │   ├── constants
        │   │   │   ├── ms-sql
        │   │   │   │   ├── AdvertisementSQLConstants.java
        │   │   │   │   ├── CartSQLConstants.java
        │   │   │   │   ├── OrderSQLConstants.java
        │   │   │   │   ├── PromotionSQLConstants.java
        │   │   │   │   ├── TrackSQLConstants.java
        │   │   │   │   └── UserSQLConstants.java
        │   │   │   ├── AdvertisementSQLConstants.java
        │   │   │   ├── CartSQLConstants.java
        │   │   │   ├── OrderSQLConstants.java
        │   │   │   ├── PromotionSQLConstants.java
        │   │   │   ├── TrackSQLConstants.java
        │   │   │   └── UserSQLConstants.java
        │   │   ├── AdvertisementDAO.java
        │   │   ├── CartDAO.java
        │   │   ├── OrderDAO.java
        │   │   ├── PaymentDAO.java
        │   │   ├── PostDAO.java
        │   │   ├── PromotionDAO.java
        │   │   ├── TrackDAO.java
        │   │   └── UserDAO.java
        │   ├── factory
        │   │   ├── AdvertisementFactory.java
        │   │   ├── OrderFactory.java
        │   │   ├── PaymentFactory.java
        │   │   ├── PromotionFactory.java
        │   │   ├── TrackFactory.java
        │   │   └── UserFactory.java
        │   ├── model
        │   │   ├── enums
        │   │   │   ├── AdminRole.java
        │   │   │   ├── OrderStatus.java
        │   │   │   ├── TrackStatus.java
        │   │   │   └── UserType.java
        │   │   ├── Admin.java
        │   │   ├── Advertisement.java
        │   │   ├── Artist.java
        │   │   ├── Order.java
        │   │   ├── Payment.java
        │   │   ├── Post.java
        │   │   ├── Promotion.java
        │   │   ├── StandardUser.java
        │   │   ├── Track.java
        │   │   └── User.java
        │   ├── service
        │   │   ├── validators
        │   │   │   ├── AdvertisementValidation
        │   │   │   │   ├── AdvertisementValidator.java
        │   │   │   │   ├── AdvertisementValidatorStrategy.java
        │   │   │   │   └── BasicAdvertisementValidator.java
        │   │   │   ├── OrderValidation
        │   │   │   │   ├── AdminOrderValidator.java
        │   │   │   │   ├── BasicOrderValidator.java
        │   │   │   │   ├── OrderValidator.java
        │   │   │   │   └── OrderValidatorStrategy.java
        │   │   │   ├── PromotionValidation
        │   │   │   │   ├── BasicPromotionValidator.java
        │   │   │   │   ├── PromotionValidator.java
        │   │   │   │   └── PromotionValidatorStrategy.java
        │   │   │   └── UserValidation
        │   │   │       ├── AdminUserValidator.java
        │   │   │       ├── ArtistUserValidator.java
        │   │   │       ├── StandardUserValidator.java
        │   │   │       ├── UserValidator.java
        │   │   │       └── UserValidatorStrategy.java
        │   │   ├── AdvertisementService.java
        │   │   ├── OrderService.java
        │   │   ├── PaymentService.java
        │   │   ├── PostService.java
        │   │   ├── PromotionService.java
        │   │   └── UserService.java
        │   └── utils
        │       ├── json
        │       │   └── LocalDateAdapter.java
        │       ├── AudioUploadUtil.java
        │       ├── DatabaseConnection.java
        │       ├── EmailHandleUtil.java
        │       ├── ImageUploadUtil.java
        │       └── PasswordUtil.java
        └── webapp
            ├── admin
            │   └── css
            │       ├── admin-styles.css
            │       ├── index.css
            │       └── theme.css
            ├── community
            │   └── community-styles.css
            ├── css
            │   ├── modules
            │   │   ├── _banner.css
            │   │   ├── _base.css
            │   │   ├── _components.css
            │   │   ├── _layout.css
            │   │   ├── _modal.css
            │   │   ├── _navbar.css
            │   │   ├── _posts.css
            │   │   ├── _responsive.css
            │   │   └── _search.css
            │   ├── animations.css
            │   ├── artist-profile.css
            │   ├── cart-fixes.css
            │   ├── index.css
            │   ├── login.css
            │   ├── navbar.css
            │   ├── order-details.css
            │   ├── signup.css
            │   └── theme.css
            └── js
                ├── cart-handlers.js
                ├── cart-main.js
                ├── cart-utils.js
                ├── music-handlers.js
                ├── music-main.js
                ├── music-pagination.js
                └── order-details.js



--- main/java/controller/ArtistManagement/AddArtistServlet.java ---

package controller.ArtistManagement;

import factory.UserFactory;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import model.Artist;
import model.User;
import service.UserService;
import utils.PasswordUtil;

import java.io.IOException;
import java.sql.SQLException;

@WebServlet("/add-artist")
public class AddArtistServlet extends HttpServlet {

    private final UserService userService = new UserService();

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String firstName = request.getParameter("firstName");
        String lastName = request.getParameter("lastName");
        String email = request.getParameter("email");
        String password = request.getParameter("password");
        String stageName = request.getParameter("stageName");
        String bio = request.getParameter("bio");

        String passwordHash = PasswordUtil.hashPassword(password);

        try {
            // The UserFactory still correctly creates an Artist instance
            User newArtist = UserFactory.createUser("artist", firstName, lastName, email, passwordHash);

            if (newArtist instanceof Artist artist) {
                // Set default values if parameters are empty
                artist.setStageName(stageName != null && !stageName.trim().isEmpty() ? stageName : firstName + " " + lastName);
                artist.setBio(bio != null && !bio.trim().isEmpty() ? bio : "A new artist.");
            }

            // The consolidated UserService's addUser method handles the logic for all user types
            userService.addUser(newArtist);
            response.sendRedirect(request.getContextPath() + "/manage-artists?success=Artist added successfully");

        } catch (SQLException | IllegalArgumentException e) {
            e.printStackTrace();
            response.sendRedirect(request.getContextPath() + "/manage-artists?error=Failed to add artist: " + e.getMessage());
        }
    }
}

--- main/java/controller/ArtistManagement/ArtistProfileServlet.java ---

package controller.ArtistManagement;

import dao.TrackDAO;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import model.Artist;
import model.Track;
import model.User;

import java.io.IOException;
import java.sql.SQLException;
import java.util.List;

@WebServlet("/artist/profile")
public class ArtistProfileServlet extends HttpServlet {
    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        User user = (User) request.getSession().getAttribute("USER");
        // Security check: Ensure the user is an artist
        if (user == null || !(user instanceof Artist)) {
            response.sendError(HttpServletResponse.SC_UNAUTHORIZED, "You must be logged in as an artist to view this page.");
            return;
        }

        Artist artist = (Artist) user;
        String view = request.getParameter("view");
        if (view == null || view.trim().isEmpty()) {
            view = "dashboard"; // Default to the dashboard view
        }

        try {
            // Fetch tracks for the logged-in artist, which are needed for dashboard and my-tracks views
            List<Track> artistTracks = TrackDAO.getTracksByArtistId(artist.getUserId());
            request.setAttribute("artistTracks", artistTracks);
        } catch (SQLException e) {
            e.printStackTrace();
            request.setAttribute("error", "Failed to load your tracks: " + e.getMessage());
        }

        request.setAttribute("view", view); // Pass the current view to the JSP
        request.getRequestDispatcher("/artist/profile.jsp").forward(request, response);
    }
}

--- main/java/controller/ArtistManagement/ArtistProfileUpdateServlet.java ---

package controller.ArtistManagement;

import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;
import model.Artist;
import model.User;
import service.UserService;
import java.io.IOException;
import java.sql.SQLException;

@WebServlet("/artist/update-profile")
public class ArtistProfileUpdateServlet extends HttpServlet {

    private final UserService userService = new UserService();
    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        HttpSession session = request.getSession(false);
        // Security check: ensure a logged-in user exists and is an artist
        if (session == null || session.getAttribute("USER") == null || !(session.getAttribute("USER") instanceof Artist)) {
            response.sendRedirect(request.getContextPath() + "/login.jsp?error=Unauthorized access");
            return;
        }

        Artist currentArtist = (Artist) session.getAttribute("USER");
        String userIdStr = request.getParameter("userId");
        try {
            int userId = Integer.parseInt(userIdStr);
            // Security check: ensure the artist is only updating their own profile
            if (userId != currentArtist.getUserId()) {
                response.sendRedirect(request.getContextPath() + "/artist/profile?view=settings&error=You can only update your own profile.");
                return;
            }

            // 1. Create an Artist object from the request parameters.
            Artist artistToUpdate = new Artist();
            artistToUpdate.setUserId(userId);
            artistToUpdate.setFirstName(request.getParameter("firstName"));
            artistToUpdate.setLastName(request.getParameter("lastName"));
            artistToUpdate.setEmail(request.getParameter("email"));
            artistToUpdate.setStageName(request.getParameter("stageName"));
            artistToUpdate.setBio(request.getParameter("bio"));

            String newPassword = request.getParameter("editPassword");
            // 2. Make a single, unified call to the UserService.
            userService.updateArtist(artistToUpdate, newPassword);

            // 3. Update the session with the latest user details from the database to reflect changes.
            User updatedUser = userService.findUserById(userId);
            session.setAttribute("USER", updatedUser);

            // 4. Redirect back to the profile page with a success message
            response.sendRedirect(request.getContextPath() + "/artist/profile?view=settings&success=Profile updated successfully!");
        } catch (NumberFormatException e) {
            response.sendRedirect(request.getContextPath() + "/artist/profile?view=settings&error=Invalid User ID format.");
        } catch (IllegalArgumentException | SQLException e) {
            e.printStackTrace(); // Log the full error for debugging.
            response.sendRedirect(request.getContextPath() + "/artist/profile?view=settings&error=Update failed: " + e.getMessage());
        }
    }
}

--- main/java/controller/ArtistManagement/DeleteArtistServlet.java ---

package controller.ArtistManagement;

import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import model.User;
import service.UserService;

import java.io.IOException;
import java.sql.SQLException;

@WebServlet("/delete-artist")
public class DeleteArtistServlet extends HttpServlet {

    private final UserService userService = new UserService();

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String userIdStr = request.getParameter("userId");
        if (userIdStr == null || userIdStr.trim().isEmpty()) {
            response.sendRedirect(request.getContextPath() + "/manage-artists?error=Artist ID is missing");
            return;
        }

        try {
            int userId = Integer.parseInt(userIdStr);

            User artist = userService.findUserById(userId);
            if (artist != null) {
                userService.removeUser(artist);
            }

            response.sendRedirect(request.getContextPath() + "/manage-artists?success=Artist deleted successfully");

        } catch (NumberFormatException e) {
            response.sendRedirect(request.getContextPath() + "/manage-artists?error=Invalid Artist ID format");
        } catch (SQLException e) {
            e.printStackTrace();
            response.sendRedirect(request.getContextPath() + "/manage-artists?error=Failed to delete artist: " + e.getMessage());
        }
    }
}

--- main/java/controller/ArtistManagement/ManageArtistViewServlet.java ---

package controller.ArtistManagement;

import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import model.Artist;
import service.UserService;

import java.io.IOException;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

@WebServlet("/manage-artists")
public class ManageArtistViewServlet extends HttpServlet {
    // Dependency is now the consolidated UserService
    private final UserService userService = new UserService();

    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        List<Artist> allArtists = new ArrayList<>();

        try {
            // Call the method that is now located in UserService
            allArtists = userService.getAllArtists();
        } catch (SQLException e) {
            e.printStackTrace(); // It's better to log the error than to throw a RuntimeException
            req.setAttribute("error", "Failed to retrieve artists from the database.");
        }

        req.setAttribute("allArtists", allArtists);
        req.getRequestDispatcher("/admin/manage-artists.jsp").forward(req, resp);
    }
}

--- main/java/controller/ArtistManagement/UpdateArtistServlet.java ---

package controller.ArtistManagement;

import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import model.Artist;
import service.UserService;

import java.io.IOException;
import java.sql.SQLException;

@WebServlet("/update-artist")
public class UpdateArtistServlet extends HttpServlet {

    private final UserService userService = new UserService();

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String userIdStr = request.getParameter("userId");
        if (userIdStr == null || userIdStr.trim().isEmpty()) {
            response.sendRedirect(request.getContextPath() + "/manage-artists?error=Artist ID is missing");
            return;
        }

        try {
            // 1. Create an Artist object from the request parameters.
            Artist artist = new Artist();
            artist.setUserId(Integer.parseInt(userIdStr));
            artist.setFirstName(request.getParameter("firstName"));
            artist.setLastName(request.getParameter("lastName"));
            artist.setEmail(request.getParameter("email"));
            artist.setStageName(request.getParameter("stageName"));
            artist.setBio(request.getParameter("bio"));

            String newPassword = request.getParameter("editPassword");

            // 2. Make a single, unified call to the UserService.
            userService.updateArtist(artist, newPassword);

            response.sendRedirect(request.getContextPath() + "/manage-artists?success=Artist updated successfully");

        } catch (NumberFormatException e) {
            response.sendRedirect(request.getContextPath() + "/manage-artists?error=Invalid Artist ID format.");
        } catch (IllegalArgumentException | SQLException e) {
            // This catches validation errors (like an empty bio) from the service.
            e.printStackTrace(); // Log the full error for debugging.
            response.sendRedirect(request.getContextPath() + "/manage-artists?error=Update failed: " + e.getMessage());
        }
    }
}

--- main/java/controller/CartServlet.java ---

package controller;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import dao.CartDAO;
import dao.TrackDAO;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;
import model.Track;
import model.User;
import utils.json.LocalDateAdapter;

import java.io.IOException;
import java.io.PrintWriter;
import java.sql.SQLException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;

@WebServlet(name = "CartServlet", value = "/CartServlet")
public class CartServlet extends HttpServlet {

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType("application/json");
        response.setCharacterEncoding("UTF-8");
        PrintWriter out = response.getWriter();

        Gson gson = new GsonBuilder()
                .registerTypeAdapter(LocalDate.class, new LocalDateAdapter())
                .create();

        try {
            String action = request.getParameter("action");
            String trackId = request.getParameter("trackId");

            HttpSession session = request.getSession();
            User user = (User) session.getAttribute("USER");

            // Get cart items - try database first, then session
            List<Track> cartItems = getCartItems(session, user);

            // Handle getState action
            if ("getState".equals(action)) {
                double cartTotal = calculateTotal(cartItems);
                int itemCount = cartItems.size();

                CartResponse cartResponse = new CartResponse(
                        cartItems != null ? cartItems : new ArrayList<>(),
                        cartTotal,
                        itemCount
                );

                out.print(gson.toJson(cartResponse));
                out.flush();
                return;
            }

            // Validate parameters for other actions
            if (trackId == null || trackId.trim().isEmpty()) {
                response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
                out.print(gson.toJson(new ErrorResponse("Track ID is required")));
                out.flush();
                return;
            }

            if (action == null || (!action.equals("add") && !action.equals("remove"))) {
                response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
                out.print(gson.toJson(new ErrorResponse("Invalid or missing action")));
                out.flush();
                return;
            }

            // Parse trackId and fetch track
            Track track;
            try {
                track = TrackDAO.findTrackById(Integer.parseInt(trackId));
            } catch (NumberFormatException e) {
                response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
                out.print(gson.toJson(new ErrorResponse("Invalid track ID format")));
                out.flush();
                return;
            } catch (SQLException e) {
                response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
                out.print(gson.toJson(new ErrorResponse("Database error occurred")));
                out.flush();
                return;
            }

            if (track == null) {
                response.setStatus(HttpServletResponse.SC_NOT_FOUND);
                out.print(gson.toJson(new ErrorResponse("Track not found")));
                out.flush();
                return;
            }

            Double cartTotal = 0.0;

            // Perform cart action
            switch (action) {
                case "add":
                    addItemToCart(cartItems, track, user);
                    cartTotal = calculateTotal(cartItems);
                    System.out.println("Item Added to Cart: " + trackId);
                    break;
                case "remove":
                    removeFromCart(cartItems, track, user);
                    cartTotal = calculateTotal(cartItems);
                    System.out.println("Item Removed from Cart: " + trackId);
                    break;
            }

            // Update cart in session
            session.setAttribute("cartItems", cartItems);
            session.setAttribute("cartTotal", cartTotal);

            // Respond with JSON
            CartResponse cartResponse = new CartResponse(cartItems, cartTotal, cartItems.size());
            out.print(gson.toJson(cartResponse));
            out.flush();

        } catch (Exception e) {
            response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
            out.print(gson.toJson(new ErrorResponse("Unexpected error: " + e.getMessage())));
            out.flush();
            e.printStackTrace();
        }
    }

    private List<Track> getCartItems(HttpSession session, User user) {
        List<Track> cartItems = (List<Track>) session.getAttribute("cartItems");

        // If user is logged in and session cart is empty, try to load from database
        if (user != null && (cartItems == null || cartItems.isEmpty())) {
            cartItems = CartDAO.getCartItems(user.getUserId());
            session.setAttribute("cartItems", cartItems);
        } else if (cartItems == null) {
            cartItems = new ArrayList<>();
        }

        return cartItems;
    }

    private void addItemToCart(List<Track> cartItems, Track track, User user) throws SQLException {
        // Check if track already exists in cart
        boolean exists = false;
        for (Track item : cartItems) {
            if (item.getTrackId() == track.getTrackId()) {
                exists = true;
                break;
            }
        }

        if (!exists) {
            cartItems.add(track);

            if (user != null) {
                CartDAO.addToCart(user.getUserId(), track.getTrackId());
            }
        }
    }

    private void removeFromCart(List<Track> cartItems, Track track, User user) throws SQLException {
        // Find and remove the track by ID
        for (int i = 0; i < cartItems.size(); i++) {
            if (cartItems.get(i).getTrackId() == track.getTrackId()) {
                cartItems.remove(i);

                // If user is logged in, remove from database
                if (user != null) {
                    CartDAO.removeFromCart(user.getUserId(), track.getTrackId());
                }
                break;
            }
        }
    }

    private double calculateTotal(List<Track> cartItems) {
        double total = 0;
        if (cartItems != null) {
            for (Track track : cartItems) {
                total += track.getPrice();
            }
        }
        return total;
    }

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doGet(request, response);
    }

    // Inner class for JSON response
    private static class CartResponse {
        private List<Track> cartItems;
        private double cartTotal;
        private int itemCount;

        public CartResponse(List<Track> cartItems, double cartTotal, int itemCount) {
            this.cartItems = cartItems;
            this.cartTotal = cartTotal;
            this.itemCount = itemCount;
        }

        // Add getters for JSON serialization
        public List<Track> getCartItems() {
            return cartItems;
        }

        public double getCartTotal() {
            return cartTotal;
        }

        public int getItemCount() {
            return itemCount;
        }
    }

    // Inner class for error response
    private static class ErrorResponse {
        private String error;

        public ErrorResponse(String error) {
            this.error = error;
        }

        public String getError() {
            return error;
        }
    }
}

--- main/java/controller/filters/AdminFilter.java ---

package controller.filters;

import jakarta.servlet.*;
import jakarta.servlet.annotation.WebFilter;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;
import model.User;
import model.enums.UserType;

import java.io.IOException;

@WebFilter("/admin/*")
public class AdminFilter implements Filter {
    @Override
    public void doFilter(ServletRequest request, ServletResponse response,
                         FilterChain chain) throws IOException, ServletException {

        HttpServletRequest req = (HttpServletRequest) request;
        String path = req.getRequestURI().substring(req.getContextPath().length());

        if (path.startsWith("/css/") || path.startsWith("/js/") || path.startsWith("/admin/css/")) {
            chain.doFilter(request, response);
            return;
        }

        HttpServletResponse res = (HttpServletResponse) response;
        HttpSession session = req.getSession(false);

        // Check if user is logged in
        if (session == null || session.getAttribute("USER") == null) {
            System.out.println("No user session found - redirecting to login");
            res.sendRedirect(req.getContextPath() + "/login.jsp");
            return;
        }

        User user = (User) session.getAttribute("USER");

        // Check if user is admin (now via UserType)
        if (user != null && user.getUserType() == UserType.ADMIN) {
            System.out.println("User is Admin: " + user.getFirstName() + " is Logged");
            chain.doFilter(request, response);
        } else {
            System.out.println("User is not Admin or user is null");
            res.sendRedirect(req.getContextPath() + "/");
        }
    }
}

--- main/java/controller/filters/AuthFilter.java ---

package controller.filters;

import dao.CartDAO;
import dao.UserDAO;
import jakarta.servlet.*;
import jakarta.servlet.annotation.WebFilter;
import jakarta.servlet.http.Cookie;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;
import model.Track;
import model.User;

import java.io.IOException;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

@WebFilter("/*")
public class AuthFilter implements Filter {
    @Override
    public void doFilter(ServletRequest request, ServletResponse response,
                         FilterChain chain) throws IOException, ServletException {

        HttpServletRequest req = (HttpServletRequest) request;
        String path = req.getRequestURI().substring(req.getContextPath().length());

        if (path.startsWith("/css/") || path.startsWith("/js/") || path.startsWith("/admin/css/")) {
            chain.doFilter(request, response); // Bypass the filter
            return; // Stop further processing by this filter
        }

        HttpServletResponse res = (HttpServletResponse) response;
        HttpSession session = req.getSession(false);

        // If no session but cookie exists
        if (session == null || session.getAttribute("USER") == null) {
            Cookie[] cookies = req.getCookies();
            if (cookies != null) {
                for (Cookie cookie : cookies) {
                    if ("userId".equals(cookie.getName())) {
                        session = req.getSession(true);

                        try {
                            User user = UserDAO.findUserById(Integer.parseInt(cookie.getValue()));
                            if (user != null) {
                                session.setAttribute("USER", user);

                                // Load user's cart from database
                                List<Track> cartItems = CartDAO.getCartItems(user.getUserId());
                                session.setAttribute("cartItems", cartItems);

                                double cartTotal = calculateCartTotal(cartItems);
                                session.setAttribute("cartTotal", cartTotal);

                                System.out.println("AuthFilter: Loaded cart for user " + user.getUserId() +
                                        " with " + cartItems.size() + " items (Type: " + user.getUserType() + ")");
                            }
                        } catch (SQLException e) {
                            System.err.println("AuthFilter: Error loading user cart: " + e.getMessage());
                            // Continue without cart data
                            session.setAttribute("cartItems", new ArrayList<>());
                            session.setAttribute("cartTotal", 0.0);
                        }
                    }
                }
            }
        }

        chain.doFilter(request, response);
    }

    private double calculateCartTotal(List<Track> cartItems) {
        double total = 0;
        if (cartItems != null) {
            for (Track track : cartItems) {
                total += track.getPrice();
            }
        }
        return total;
    }
}

--- main/java/controller/filters/RoleFilter.java ---

package controller.filters;

import jakarta.servlet.*;
import jakarta.servlet.annotation.WebFilter;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import model.Admin;
import model.User;
import model.enums.AdminRole;
import model.enums.UserType;

import java.io.IOException;

@WebFilter(urlPatterns = {"/manageUsers", "/marketing"})
public class RoleFilter implements Filter {
    @Override
    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)
            throws IOException, ServletException {
        HttpServletRequest req = (HttpServletRequest) request;
        HttpServletResponse resp = (HttpServletResponse) response;
        User user = (User) req.getSession().getAttribute("USER");

        if (user == null) {
            resp.sendRedirect(req.getContextPath() + "/login");
            return;
        }

        boolean authorized = isAuthorized(req, user);

        if (authorized) {
            chain.doFilter(request, response);
        } else {
            resp.sendError(HttpServletResponse.SC_FORBIDDEN, "Access denied");
        }
    }

    private static boolean isAuthorized(HttpServletRequest req, User user) {
        String path = req.getServletPath();
        if (user.getUserType() != UserType.ADMIN) {
            return false; // Non-admins denied
        }
        AdminRole role = ((Admin) user).getRole();
        return switch (path) {
            case "/manageUsers" -> role == AdminRole.SUPER_ADMIN;
            case "/marketing" -> role == AdminRole.SUPER_ADMIN || role == AdminRole.MARKETING_MANAGER;
            default -> false;
        };
    }
}

--- main/java/controller/IndexServlet.java ---

package controller;

import dao.AdvertisementDAO;
import jakarta.servlet.RequestDispatcher;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import model.Advertisement;
import model.Post;
import service.PostService;

import java.io.IOException;
import java.sql.SQLException;
import java.util.LinkedList;
import java.util.List;

@WebServlet(name = "IndexServlet", value = {"", "/index"}, loadOnStartup = 1)
public class IndexServlet extends HttpServlet {
    private final PostService postService = new PostService(); // Add PostService

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        // ... (your existing code for advertisements)
        try {
            LinkedList<Advertisement> activeAds = AdvertisementDAO.getActiveAdvertisements();
            request.setAttribute("activeAds", activeAds);

            // NEW: Fetch recent posts
            List<Post> recentPosts = postService.getRecentPosts(3); // Get 3 most recent
            request.setAttribute("recentPosts", recentPosts);

        } catch (SQLException e) {
            e.printStackTrace();
            request.setAttribute("error", "Failed to fetch page data: " + e.getMessage());
        }

        RequestDispatcher rd = request.getRequestDispatcher("/trackPaginate"); // Your existing forward
        rd.forward(request, response);
    }
}

--- main/java/controller/listeners/DatabaseInitializer.java ---

// DatabaseInitializer.java
package controller.listeners;

import jakarta.servlet.ServletContextEvent;
import jakarta.servlet.ServletContextListener;
import jakarta.servlet.annotation.WebListener;
import utils.DatabaseConnection;

import java.sql.Connection;
import java.sql.SQLException;
import java.sql.Statement;

@WebListener
public class DatabaseInitializer implements ServletContextListener {

    @Override
    public void contextInitialized(ServletContextEvent sce) {
        try {
            createAllTables();
        } catch (Exception e) {
            sce.getServletContext().log("Error during database initialization: " + e.getMessage(), e);
        }
    }

    @Override
    public void contextDestroyed(ServletContextEvent sce) {
    }

    private void createAllTables() throws SQLException {
        try (Connection con = DatabaseConnection.getConnection();
             Statement stmt = con.createStatement()) {

            // Create users table (Must be created before tracks and other dependent tables)
            stmt.executeUpdate(
                    "CREATE TABLE IF NOT EXISTS users (" +
                            "userId INT AUTO_INCREMENT PRIMARY KEY, " +
                            "role VARCHAR(20), " +
                            "firstName VARCHAR(50), " +
                            "lastName VARCHAR(50), " +
                            "email VARCHAR(100) UNIQUE, " +
                            "password VARCHAR(255)" +
                            ")"
            );


// Create tracks table (Updated with BLOB fields)
            stmt.executeUpdate(
                    "CREATE TABLE IF NOT EXISTS tracks (" +
                            "trackId INT AUTO_INCREMENT PRIMARY KEY, " +
                            "title VARCHAR(100), " +
                            "genre VARCHAR(50), " +
                            "rating FLOAT, " +
                            "price DECIMAL(10,2), " +
                            "artist_id INT NOT NULL, " +
                            "full_track_data LONGBLOB, " +
                            "snippet_data LONGBLOB, " +
                            "cover_art_data LONGBLOB, " +
                            "cover_art_type VARCHAR(50), " +
                            "duration INT, " +
                            "release_date DATE, " +
                            "status VARCHAR(20) NOT NULL DEFAULT 'PENDING', " +
                            "FOREIGN KEY (artist_id) REFERENCES users(userId) ON DELETE CASCADE" +
                            ")"
            );

            // Create purchased_tracks table (New table for tracking downloads)
            stmt.executeUpdate(
                    "CREATE TABLE IF NOT EXISTS purchased_tracks (" +
                            "id INT AUTO_INCREMENT PRIMARY KEY, " +
                            "user_id INT NOT NULL, " +
                            "order_id INT NOT NULL, " + // <-- ADDED COLUMN
                            "track_id INT NOT NULL, " +
                            "purchase_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP, " +
                            "FOREIGN KEY (user_id) REFERENCES users(userId) ON DELETE CASCADE, " +
                            "FOREIGN KEY (order_id) REFERENCES orders(order_id) ON DELETE CASCADE, " + // <-- ADDED FOREIGN KEY
                            "FOREIGN KEY (track_id) REFERENCES tracks(trackId) ON DELETE CASCADE " +
                            ")"
            );

            // Create UserGenres table
            stmt.executeUpdate(
                    "CREATE TABLE IF NOT EXISTS user_genres (" +
                            "id INT AUTO_INCREMENT PRIMARY KEY, " +
                            "userId INT, " +
                            "genre VARCHAR(50), " +
                            "FOREIGN KEY (userId) REFERENCES users(userId) ON DELETE CASCADE" +
                            ")"
            );

            // Create AdminRoles table
            stmt.executeUpdate(
                    "CREATE TABLE IF NOT EXISTS admin_roles (" +
                            "userId INT PRIMARY KEY, " +
                            "role VARCHAR(50), " +
                            "FOREIGN KEY (userId) REFERENCES users(userId) ON DELETE CASCADE" +
                            ")"
            );

            // Create ArtistDetails table
            stmt.executeUpdate(
                    "CREATE TABLE IF NOT EXISTS artist_details (" +
                            "user_id INT PRIMARY KEY, " +
                            "stage_name VARCHAR(100) NOT NULL, " +
                            "bio TEXT, " +
                            "created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, " +
                            "updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP, " +
                            "FOREIGN KEY (user_id) REFERENCES users(userId) ON DELETE CASCADE" +
                            ")"
            );

            stmt.executeUpdate("CREATE TABLE IF NOT EXISTS artist_genres (" +
                    "user_id INT NOT NULL, " +
                    "genre VARCHAR(50) NOT NULL, " +
                    "PRIMARY KEY (user_id, genre), " +
                    "FOREIGN KEY (user_id) REFERENCES users(userId) ON DELETE CASCADE" +
                    ")"
            );

            // Create advertisements table
            stmt.executeUpdate(
                    "CREATE TABLE IF NOT EXISTS advertisements (" +
                            "adId INT AUTO_INCREMENT PRIMARY KEY, " +
                            "title VARCHAR(100), " +
                            "content VARCHAR(255), " +
                            "imageData LONGBLOB, " +
                            "imageUrl VARCHAR(255), " +
                            "startDate DATE, " +
                            "endDate DATE, " +
                            "active TINYINT(1)" +
                            ")"
            );

            // Create promotions table
            stmt.executeUpdate(
                    "CREATE TABLE IF NOT EXISTS promotions (" +
                            "promotionId INT AUTO_INCREMENT PRIMARY KEY, " +
                            "code VARCHAR(50) UNIQUE, " +
                            "discount DECIMAL(10,2), " +
                            "startDate DATE, " +
                            "endDate DATE, " +
                            "usageCount INT, " +
                            "description VARCHAR(255)" +
                            ")"
            );

            // Create carts table
            stmt.executeUpdate(
                    "CREATE TABLE IF NOT EXISTS carts (" +
                            "id INT AUTO_INCREMENT PRIMARY KEY, " +
                            "user_id INT NOT NULL, " +
                            "track_id INT NOT NULL, " +
                            "quantity INT NOT NULL DEFAULT 1, " +
                            "added_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP, " +
                            "FOREIGN KEY (user_id) REFERENCES users(userId) ON DELETE CASCADE, " +
                            "FOREIGN KEY (track_id) REFERENCES tracks(trackId) ON DELETE CASCADE, " +
                            "UNIQUE KEY unique_user_track (user_id, track_id)" +
                            ")"
            );

            // Create orders table
            stmt.executeUpdate(
                    "CREATE TABLE IF NOT EXISTS orders (" +
                            "order_id INT AUTO_INCREMENT PRIMARY KEY, " +
                            "user_id INT NOT NULL, " +
                            "total_amount DECIMAL(10,2) NOT NULL, " +
                            "discount_amount DECIMAL(10,2) DEFAULT 0.00, " + // New
                            "final_amount DECIMAL(10,2) NOT NULL, " +        // New
                            "promotion_code VARCHAR(50), " +                 // New
                            "status VARCHAR(20) DEFAULT 'PENDING', " +
                            "order_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP, " +
                            "payment_method VARCHAR(50), " +
                            "transaction_id VARCHAR(100), " +
                            "FOREIGN KEY (user_id) REFERENCES users(userId)" +
                            ")"
            );

            stmt.executeUpdate(
                    "CREATE TABLE IF NOT EXISTS payments (" +
                            "payment_id INT AUTO_INCREMENT PRIMARY KEY, " +
                            "order_id INT NOT NULL, " +
                            "amount DECIMAL(10,2) NOT NULL, " +
                            "payment_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP, " +
                            "payment_method VARCHAR(50) NOT NULL, " +
                            "transaction_id VARCHAR(100) UNIQUE, " +
                            "status VARCHAR(20) NOT NULL, " + // e.g., COMPLETED, FAILED, REFUNDED
                            "FOREIGN KEY (order_id) REFERENCES orders(order_id) ON DELETE CASCADE" +
                            ")"
            );

            // Create posts table
            stmt.executeUpdate(
                    "CREATE TABLE IF NOT EXISTS posts (" +
                            "postId INT AUTO_INCREMENT PRIMARY KEY, " +

                            "userId INT NOT NULL, " +
                            "authorName VARCHAR(100) NOT NULL, " +
                            "title VARCHAR(200) NOT NULL, " +

                            "description TEXT NOT NULL, " +
                            "image1Data LONGBLOB, " +
                            "image1Type VARCHAR(50), " +
                            "image2Data LONGBLOB, " +
                            "image2Type VARCHAR(50), " +
                            "image3Data LONGBLOB, " +
                            "image3Type VARCHAR(50), " +
                            "status VARCHAR(20) DEFAULT 'pending', " +
                            "createdAt DATETIME DEFAULT CURRENT_TIMESTAMP, " +
                            "updatedAt DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP, " +
                            "FOREIGN KEY (userId) REFERENCES users(userId) ON DELETE CASCADE" +
                            ")"
            );

        }
    }
}

--- main/java/controller/ManagePaymentsServlet.java ---

package controller;

import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import model.Payment;
import service.PaymentService;

import java.io.IOException;
import java.util.List;
import java.util.stream.Collectors;

@WebServlet("/manage-payments")
public class ManagePaymentsServlet extends HttpServlet {

    private final PaymentService paymentService = new PaymentService();

    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        try {
            List<Payment> allPayments = paymentService.getAllPayments();
            String searchQuery = req.getParameter("searchQuery");

            if (searchQuery != null && !searchQuery.trim().isEmpty()) {
                String query = searchQuery.toLowerCase().trim();
                allPayments = allPayments.stream()
                        .filter(p -> String.valueOf(p.getPaymentId()).contains(query) ||
                                String.valueOf(p.getOrderId()).contains(query) ||
                                (p.getTransactionId() != null && p.getTransactionId().toLowerCase().contains(query)))
                        .collect(Collectors.toList());
            }

            req.setAttribute("allPayments", allPayments);
            req.getRequestDispatcher("/admin/manage-payments.jsp").forward(req, resp);
        } catch (Exception e) {
            throw new ServletException("Could not retrieve payments", e);
        }
    }
}

--- main/java/controller/MarketingManagement/AddAdvertisementServlet.java ---

package controller.MarketingManagement;

import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.MultipartConfig;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import service.AdvertisementService;
import utils.ImageUploadUtil;

import java.io.IOException;
import java.sql.SQLException;
import java.time.LocalDate;

@MultipartConfig(fileSizeThreshold = 1024 * 1024 * 2, // 2MB
        maxFileSize = 1024 * 1024 * 10,      // 10MB
        maxRequestSize = 1024 * 1024 * 50)    // 50MB
@WebServlet("/add-advertisement")
public class AddAdvertisementServlet extends HttpServlet {

    private final AdvertisementService adService = new AdvertisementService();
    private final ImageUploadUtil imageUtil = new ImageUploadUtil();

    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String title = request.getParameter("title");
        String content = request.getParameter("content");
        LocalDate startDate = LocalDate.parse(request.getParameter("startDate"));
        LocalDate endDate = LocalDate.parse(request.getParameter("endDate"));
        boolean active = Boolean.parseBoolean(request.getParameter("active"));

        byte[] imageData = null;
        String imageUrl = null;

        try {
            ImageUploadUtil.ImageUploadResult uploadResult = imageUtil.handleImageUpload(request, "imageFile");
            if (uploadResult != null) {
                imageData = uploadResult.imageData();
                imageUrl = uploadResult.imageUrl();
            }

            adService.addAdvertisement(title, content, imageData, imageUrl, startDate, endDate, active);
            response.sendRedirect(request.getContextPath() + "/manage-marketing");
        } catch (IllegalArgumentException | SQLException | IOException e) {
            response.sendRedirect(request.getContextPath() + "/manage-marketing?error=Failed to add advertisement: " + e.getMessage());
        }
    }
}

--- main/java/controller/MarketingManagement/AddPromotionServlet.java ---

package controller.MarketingManagement;

import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import service.PromotionService;

import java.io.IOException;
import java.sql.SQLException;
import java.time.LocalDate;

@WebServlet("/add-promotion")
public class AddPromotionServlet extends HttpServlet {

    private final PromotionService promoService = new PromotionService();

    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String code = request.getParameter("code");
        double discount;
        LocalDate startDate;
        LocalDate endDate;
        String description;

        try {
            discount = Double.parseDouble(request.getParameter("discount"));
            startDate = LocalDate.parse(request.getParameter("startDate"));
            endDate = LocalDate.parse(request.getParameter("endDate"));
            description = request.getParameter("description");

            promoService.addPromotion(code, discount, startDate, endDate, description);
            response.sendRedirect(request.getContextPath() + "/manage-marketing");
        } catch (IllegalArgumentException e) {
            response.sendRedirect(request.getContextPath() + "/manage-marketing?error=Invalid input: " + e.getMessage());
        } catch (SQLException | IOException e) {
            response.sendRedirect(request.getContextPath() + "/manage-marketing?error=Failed to add promotion: " + e.getMessage());
        }
    }
}

--- main/java/controller/MarketingManagement/DeleteAdvertisementServlet.java ---

package controller.MarketingManagement;

import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import service.AdvertisementService;

import java.io.IOException;
import java.sql.SQLException;

@WebServlet("/delete-advertisement")
public class DeleteAdvertisementServlet extends HttpServlet {

    private final AdvertisementService adService = new AdvertisementService();

    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String adIdStr = request.getParameter("adId");
        if (adIdStr == null || adIdStr.trim().isEmpty()) {
            response.sendRedirect(request.getContextPath() + "/manage-marketing?error=Ad ID is missing");
            return;
        }

        try {
            int adId = Integer.parseInt(adIdStr);
            adService.deleteAdvertisement(adId);
            response.sendRedirect(request.getContextPath() + "/manage-marketing");
        } catch (NumberFormatException e) {
            response.sendRedirect(request.getContextPath() + "/manage-marketing?error=Invalid ad ID");
        } catch (SQLException | IOException e) {
            response.sendRedirect(request.getContextPath() + "/manage-marketing?error=Failed to delete advertisement: " + e.getMessage());
        }
    }
}

--- main/java/controller/MarketingManagement/DeletePromotionServlet.java ---

package controller.MarketingManagement;

import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import service.PromotionService;

import java.io.IOException;
import java.sql.SQLException;

@WebServlet("/delete-promotion")
public class DeletePromotionServlet extends HttpServlet {

    private final PromotionService promoService = new PromotionService();

    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String promotionIdStr = request.getParameter("promotionId");
        if (promotionIdStr == null || promotionIdStr.trim().isEmpty()) {
            response.sendRedirect(request.getContextPath() + "/manage-marketing?error=Promotion ID is missing");
            return;
        }

        try {
            int promotionId = Integer.parseInt(promotionIdStr);
            promoService.removePromotion(promotionId);
            response.sendRedirect(request.getContextPath() + "/manage-marketing");
        } catch (NumberFormatException e) {
            response.sendRedirect(request.getContextPath() + "/manage-marketing?error=Invalid promotion ID");
        } catch (SQLException | IOException e) {
            response.sendRedirect(request.getContextPath() + "/manage-marketing?error=Failed to delete promotion: " + e.getMessage());
        }
    }
}

--- main/java/controller/MarketingManagement/ManageMarketingViewServlet.java ---

package controller.MarketingManagement;

import jakarta.servlet.RequestDispatcher;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import model.Advertisement;
import model.Promotion;
import service.AdvertisementService;
import service.PromotionService;

import java.io.IOException;
import java.sql.SQLException;
import java.time.LocalDate;
import java.util.LinkedList;

@WebServlet("/manage-marketing")
public class ManageMarketingViewServlet extends HttpServlet {

    private final AdvertisementService adService = new AdvertisementService();
    private final PromotionService promoService = new PromotionService();

    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        LinkedList<Promotion> allPromotions = new LinkedList<>();
        LinkedList<Advertisement> allAdvertisements = new LinkedList<>();

        try {
            allPromotions = promoService.getPromotions();
            allAdvertisements = adService.getAdvertisements();
        } catch (SQLException e) {
            req.setAttribute("error", "Failed to fetch marketing data: " + e.getMessage());
        }

        // Prepare view data
        req.setAttribute("allPromotions", allPromotions);
        req.setAttribute("allAdvertisements", allAdvertisements);
        req.setAttribute("currentDate", LocalDate.now().toString());  // For date comparisons in JSP

        RequestDispatcher rd = req.getRequestDispatcher("/admin/manage-marketing.jsp");
        rd.forward(req, resp);
    }
}

--- main/java/controller/MarketingManagement/TrackPromotionServlet.java ---

package controller.MarketingManagement;

import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import service.PromotionService;

import java.io.IOException;
import java.sql.SQLException;

@WebServlet("/track-promotion")
public class TrackPromotionServlet extends HttpServlet {

    private final PromotionService promoService = new PromotionService();

    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String code = request.getParameter("code");
        if (code == null || code.trim().isEmpty()) {
            response.getWriter().println("Error: Promo code is missing");
            return;
        }

        try {
            int usage = promoService.trackUsage(code);
            response.getWriter().println("Usage count for promo " + code + ": " + usage);
        } catch (SQLException e) {
            System.out.println("Tracking Failed. SQL Error: " + e.getMessage());
            response.getWriter().println("Error tracking promo.");
        }
    }
}

--- main/java/controller/MarketingManagement/UpdateAdvertisementServlet.java ---

package controller.MarketingManagement;

import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.MultipartConfig;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import service.AdvertisementService;
import utils.ImageUploadUtil;

import java.io.IOException;
import java.sql.SQLException;
import java.time.LocalDate;

@MultipartConfig(fileSizeThreshold = 1024 * 1024 * 2, // 2MB
        maxFileSize = 1024 * 1024 * 10,      // 10MB
        maxRequestSize = 1024 * 1024 * 50)    // 50MB
@WebServlet("/update-advertisement")
public class UpdateAdvertisementServlet extends HttpServlet {

    private final AdvertisementService adService = new AdvertisementService();
    private final ImageUploadUtil imageUtil = new ImageUploadUtil();

    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String adIdStr = request.getParameter("adId");
        if (adIdStr == null || adIdStr.trim().isEmpty()) {
            response.sendRedirect(request.getContextPath() + "/manage-marketing?error=Ad ID is missing");
            return;
        }

        try {
            int adId = Integer.parseInt(adIdStr);
            String title = request.getParameter("title");
            String content = request.getParameter("content");
            LocalDate startDate = LocalDate.parse(request.getParameter("startDate"));
            LocalDate endDate = LocalDate.parse(request.getParameter("endDate"));
            boolean active = Boolean.parseBoolean(request.getParameter("active"));

            byte[] imageData = null;
            String imageUrl = null;
            ImageUploadUtil.ImageUploadResult uploadResult = imageUtil.handleImageUpload(request, "imageFile");
            if (uploadResult != null) {
                imageData = uploadResult.imageData();
                imageUrl = uploadResult.imageUrl();
            }

            adService.updateAdvertisement(adId, title, content, imageData, imageUrl, startDate, endDate, active);
            response.sendRedirect(request.getContextPath() + "/manage-marketing");
        } catch (NumberFormatException e) {
            response.sendRedirect(request.getContextPath() + "/manage-marketing?error=Invalid ad ID");
        } catch (IllegalArgumentException | SQLException | IOException e) {
            response.sendRedirect(request.getContextPath() + "/manage-marketing?error=Failed to update advertisement: " + e.getMessage());
        }
    }
}

--- main/java/controller/MarketingManagement/UpdatePromotionServlet.java ---

package controller.MarketingManagement;

import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import service.PromotionService;

import java.io.IOException;
import java.sql.SQLException;
import java.time.LocalDate;

@WebServlet("/update-promotion")
public class UpdatePromotionServlet extends HttpServlet {

    private final PromotionService promoService = new PromotionService();

    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String promotionIdStr = request.getParameter("promotionId");
        if (promotionIdStr == null || promotionIdStr.trim().isEmpty()) {
            response.sendRedirect(request.getContextPath() + "/manage-marketing?error=Promotion ID is missing");
            return;
        }

        try {
            int promotionId = Integer.parseInt(promotionIdStr);
            String code = request.getParameter("code");
            double discount = Double.parseDouble(request.getParameter("discount"));
            LocalDate startDate = LocalDate.parse(request.getParameter("startDate"));
            LocalDate endDate = LocalDate.parse(request.getParameter("endDate"));
            String description = request.getParameter("description");

            promoService.updatePromotion(promotionId, code, discount, startDate, endDate, description);
            response.sendRedirect(request.getContextPath() + "/manage-marketing");
        } catch (NumberFormatException e) {
            response.sendRedirect(request.getContextPath() + "/manage-marketing?error=Invalid promotion ID");
        } catch (IllegalArgumentException | SQLException | IOException e) {
            response.sendRedirect(request.getContextPath() + "/manage-marketing?error=Failed to update promotion: " + e.getMessage());
        }
    }
}

--- main/java/controller/MarketingManagement/ValidatePromoCodeServlet.java ---

package controller.MarketingManagement;

import com.google.gson.Gson;
import dao.PromotionDAO;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import model.Promotion;

import java.io.IOException;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;

@WebServlet("/validate-promo")
public class ValidatePromoCodeServlet extends HttpServlet {
    private static final Logger logger = Logger.getLogger(ValidatePromoCodeServlet.class.getName());

    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException {
        response.setContentType("application/json");
        response.setCharacterEncoding("UTF-8");

        Map<String, Object> jsonResponse = new HashMap<>();

        String code = null;
        try {
            // Validate code parameter
            code = request.getParameter("code");
            if (code == null || code.trim().isEmpty()) {
                jsonResponse.put("success", false);
                jsonResponse.put("message", "Promo code is missing.");
                sendJsonResponse(response, jsonResponse);
                return;
            }

            // Validate total parameter
            String totalParam = request.getParameter("total");
            double total;
            try {
                if (totalParam == null || totalParam.trim().isEmpty()) {
                    jsonResponse.put("success", false);
                    jsonResponse.put("message", "Total amount is missing.");
                    sendJsonResponse(response, jsonResponse);
                    return;
                }
                total = Double.parseDouble(totalParam);
                if (total < 0) {
                    jsonResponse.put("success", false);
                    jsonResponse.put("message", "Total amount cannot be negative.");
                    sendJsonResponse(response, jsonResponse);
                    return;
                }
            } catch (NumberFormatException e) {
                jsonResponse.put("success", false);
                jsonResponse.put("message", "Invalid total amount format. Please enter a valid number.");
                sendJsonResponse(response, jsonResponse);
                return;
            }

            // Find valid promotion
            Promotion promo = PromotionDAO.findValidByCode(code.trim());
            if (promo != null) {
                double discount = promo.getDiscount();
                double discountAmount = total * (discount / 100.0);
                double finalAmount = Math.max(0, total - discountAmount); // Ensure final amount is not negative

                jsonResponse.put("success", true);
                jsonResponse.put("discount", discount);
                jsonResponse.put("discountAmount", Math.round(discountAmount * 100.0) / 100.0);
                jsonResponse.put("finalAmount", Math.round(finalAmount * 100.0) / 100.0);
                jsonResponse.put("promoCode", code.trim());
            } else {
                jsonResponse.put("success", false);
                jsonResponse.put("message", "Invalid or expired promo code.");
            }

        } catch (SQLException e) {
            logger.log(Level.SEVERE, "Database error while validating promo code: " + code, e);
            jsonResponse.put("success", false);
            jsonResponse.put("message", "System error occurred. Please try again.");
        } catch (Exception e) {
            logger.log(Level.SEVERE, "Unexpected error while validating promo code", e);
            jsonResponse.put("success", false);
            jsonResponse.put("message", "An unexpected error occurred. Please try again.");
        }

        sendJsonResponse(response, jsonResponse);
    }

    private void sendJsonResponse(HttpServletResponse response, Map<String, Object> jsonResponse) throws IOException {
        response.getWriter().write(new Gson().toJson(jsonResponse));
    }
}

--- main/java/controller/MarketingManagement/ViewImageServlet.java ---

package controller.MarketingManagement;

import dao.AdvertisementDAO;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import model.Advertisement;

import java.io.IOException;
import java.sql.SQLException;

@WebServlet("/image")
public class ViewImageServlet extends HttpServlet {

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String adIdStr = request.getParameter("adId");
        if (adIdStr == null || adIdStr.isEmpty()) {
            response.sendError(HttpServletResponse.SC_BAD_REQUEST, "Advertisement ID is required.");
            return;
        }

        try {
            int adId = Integer.parseInt(adIdStr);
            Advertisement ad = AdvertisementDAO.findAdvertisementById(adId);
            if (ad == null || ad.getImageData() == null) {
                response.sendError(HttpServletResponse.SC_NOT_FOUND, "Image not found.");
                return;
            }

            response.setContentType("image/jpeg"); // Adjust based on actual image type if needed
            response.getOutputStream().write(ad.getImageData());
            response.getOutputStream().flush();
        } catch (SQLException e) {
            response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, "Database error occurred.");
        } catch (NumberFormatException e) {
            response.sendError(HttpServletResponse.SC_BAD_REQUEST, "Invalid advertisement ID.");
        }
    }
}

--- main/java/controller/MyMusicServlet.java ---

package controller;

import dao.TrackDAO;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import model.Track;
import model.User;

import java.io.IOException;
import java.sql.SQLException;
import java.util.List;

@WebServlet("/my-music")
public class MyMusicServlet extends HttpServlet {
    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        User user = (User) request.getSession().getAttribute("USER");

        if (user == null) {
            response.sendRedirect(request.getContextPath() + "/login.jsp");
            return;
        }

        try {
            List<Track> purchasedTracks = TrackDAO.getPurchasedTracksByUserId(user.getUserId());
            request.setAttribute("purchasedTracks", purchasedTracks);
            request.getRequestDispatcher("/my-music.jsp").forward(request, response);

        } catch (SQLException e) {
            e.printStackTrace();
            request.setAttribute("error", "Could not load your purchased music.");
            request.getRequestDispatcher("/my-music.jsp").forward(request, response);
        }
    }
}

--- main/java/controller/OrderManagement/AdminOrderDetailsServlet.java ---

package controller.OrderManagement;

import dao.OrderDAO;
import dao.UserDAO;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import model.Order;
import model.Track;
import model.User;

import java.io.IOException;
import java.sql.SQLException;
import java.util.List;

@WebServlet("/admin/orderDetails")
public class AdminOrderDetailsServlet extends HttpServlet {
    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        String orderIdStr = req.getParameter("orderId");
        if (orderIdStr == null || orderIdStr.trim().isEmpty()) {
            resp.sendError(HttpServletResponse.SC_BAD_REQUEST, "Order ID is required.");
            return;
        }

        try {
            int orderId = Integer.parseInt(orderIdStr);
            Order order = OrderDAO.findOrderById(orderId);
            if (order == null) {
                resp.sendError(HttpServletResponse.SC_NOT_FOUND, "Order not found.");
                return;
            }

            User customer = UserDAO.findUserById(order.getUserId());
            List<Track> tracks = OrderDAO.getTracksByOrderId(orderId);

            req.setAttribute("order", order);
            req.setAttribute("customer", customer);
            req.setAttribute("tracks", tracks);

            req.getRequestDispatcher("/admin/manage-orders-details.jsp").forward(req, resp);

        } catch (NumberFormatException e) {
            resp.sendError(HttpServletResponse.SC_BAD_REQUEST, "Invalid Order ID format.");
        } catch (SQLException e) {
            throw new ServletException("Database error retrieving order details.", e);
        }
    }
}

--- main/java/controller/OrderManagement/OrderAdminServlet.java ---

package controller.OrderManagement;

import jakarta.servlet.RequestDispatcher;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import model.Order;
import model.enums.OrderStatus;
import service.OrderService;

import java.io.IOException;
import java.sql.SQLException;
import java.util.List;
import java.util.stream.Collectors;

@WebServlet("/manage-orders")
public class OrderAdminServlet extends HttpServlet {

    private final OrderService orderService = new OrderService();  // Delegate to Service

    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        try {
            List<Order> allOrders = orderService.getOrders(); // Use List instead of LinkedList
            String searchQuery = req.getParameter("searchQuery");

            if (searchQuery != null && !searchQuery.trim().isEmpty()) {
                String query = searchQuery.toLowerCase().trim();
                allOrders = allOrders.stream()
                        .filter(order -> String.valueOf(order.getOrderId()).contains(query) ||
                                String.valueOf(order.getUserId()).contains(query) ||
                                order.getStatus().name().toLowerCase().contains(query))
                        .collect(Collectors.toList());
            }

            req.setAttribute("allOrders", allOrders);
            RequestDispatcher rd = req.getRequestDispatcher("/admin/manage-orders.jsp");
            rd.forward(req, resp);
        } catch (SQLException e) {
            throw new RuntimeException("Database error: " + e.getMessage());
        }
    }

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String action = request.getParameter("action");

        switch (action) {
            case "update_status":
                int orderId = Integer.parseInt(request.getParameter("orderId"));
                OrderStatus status = OrderStatus.valueOf(request.getParameter("status"));
                updateOrderStatus(orderId, status);
                break;
            case "delete":
                int deleteOrderId = Integer.parseInt(request.getParameter("orderId"));
                deleteOrder(deleteOrderId);
                break;
        }

        response.sendRedirect(request.getContextPath() + "/manage-orders");
    }

    private void updateOrderStatus(int orderId, OrderStatus status) {
        try {
            orderService.updateOrderStatus(orderId, status);  // Use Service
        } catch (SQLException | IllegalArgumentException e) {
            System.out.println("Order Status Update Failed. Error: " + e.getMessage());
        }
    }

    private void deleteOrder(int orderId) {
        try {
            orderService.removeOrder(orderId);  // Use Service
        } catch (SQLException | IllegalArgumentException e) {
            System.out.println("Order Delete Failed. Error: " + e.getMessage());
        }
    }
}

--- main/java/controller/OrderManagement/OrderDetailsServlet.java ---

package controller.OrderManagement;

import dao.CartDAO;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;
import model.Track;
import model.User;

import java.io.IOException;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

@WebServlet(name = "OrderDetailsServlet", value = "/orderDetails")
public class OrderDetailsServlet extends HttpServlet {
    // REPLACE the contents of the doGet method in OrderDetailsServlet.java with this:

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        HttpSession session = request.getSession(false);
        if (session == null || session.getAttribute("USER") == null) {
            response.sendRedirect(request.getContextPath() + "/login.jsp");
            return;
        }

        User user = (User) session.getAttribute("USER");
        List<Track> cartItems = CartDAO.getCartItems(user.getUserId());
        double cartTotal = calculateTotal(cartItems);

        session.setAttribute("cartItems", cartItems);
        session.setAttribute("cartTotal", cartTotal);

        // FIX: Redirect if cart is empty
        if (cartItems.isEmpty()) {
            response.sendRedirect(request.getContextPath() + "/?message=Your cart is empty.");
            return;
        }

        request.setAttribute("cartItems", cartItems);
        request.setAttribute("cartTotal", cartTotal);
        request.getRequestDispatcher("/order-details.jsp").forward(request, response);
    }

    private double calculateTotal(List<Track> cartItems) {
        double total = 0.0;
        if (cartItems != null) {
            for (Track track : cartItems) {
                if (track != null) {
                    total += track.getPrice();
                }
            }
        }
        return total;
    }
}

--- main/java/controller/OrderManagement/OrderServlet.java ---

// controller/OrderManagement/OrderServlet.java
package controller.OrderManagement;

import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;
import model.Track;
import model.User;
import service.OrderService;

import java.io.IOException;
import java.util.List;

@WebServlet("/order")
public class OrderServlet extends HttpServlet {
    private final OrderService orderService = new OrderService();

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        // Redirect to the order details page.
        response.sendRedirect(request.getContextPath() + "/orderDetails");
    }
}

--- main/java/controller/OrderManagement/UserOrdersServlet.java ---

package controller.OrderManagement;

import dao.OrderDAO;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import model.Order;
import model.User;

import java.io.IOException;
import java.sql.SQLException;
import java.util.List;

@WebServlet("/my-orders")
public class UserOrdersServlet extends HttpServlet {
    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        User user = (User) req.getSession().getAttribute("USER");
        if (user == null) {
            resp.sendRedirect(req.getContextPath() + "/login.jsp");
            return;
        }

        try {
            List<Order> orders = OrderDAO.getOrdersByUserId(user.getUserId());
            req.setAttribute("userOrders", orders);
            req.getRequestDispatcher("/my-orders.jsp").forward(req, resp);
        } catch (SQLException e) {
            throw new ServletException("Database error fetching user orders.", e);
        }
    }
}

--- main/java/controller/PaymentController.java ---

package controller;

import dao.CartDAO;
import model.User;
import model.Track;
import utils.DatabaseConnection;

import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;
import java.io.IOException;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.List;

@WebServlet("/payment")
public class PaymentController extends HttpServlet {

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        // This page is deprecated. The checkout flow now starts at /orderDetails.
        response.sendRedirect(request.getContextPath() + "/orderDetails");
    }

}


--- main/java/controller/PaymentSuccessController.java ---

package controller;

import dao.OrderDAO;
import model.Order;
import model.Payment;
import model.User;
import model.Track;
import service.PaymentService;

import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;
import java.io.IOException;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.List;

@WebServlet("/checkout")
public class PaymentSuccessController extends HttpServlet {
    
    private PaymentService paymentService;
    
    @Override
    public void init() throws ServletException {
        super.init();
        paymentService = new PaymentService();
    }
    
    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        HttpSession session = request.getSession();
        User user = (User) session.getAttribute("USER");
        
        if (user == null) {
            response.sendRedirect(request.getContextPath() + "/login");
            return;
        }
        
        // Only allow regular users to access payment success, not admins
        if (user.isAdmin()) {
            response.sendRedirect(request.getContextPath() + "/admin");
            return;
        }
        
        String orderIdParam = request.getParameter("orderId");
        if (orderIdParam == null || orderIdParam.trim().isEmpty()) {
            response.sendRedirect(request.getContextPath() + "/");
            return;
        }
        
        try {
            int orderId = Integer.parseInt(orderIdParam);
            
            // Get order details
            Connection con = null;
            try {
                con = utils.DatabaseConnection.getConnection();
                List<Order> userOrders = OrderDAO.getOrdersByUserId(user.getUserId());
                Order order = null;
                
                // Find the specific order
                for (Order o : userOrders) {
                    if (o.getOrderId() == orderId) {
                        order = o;
                        break;
                    }
                }
                
                if (order == null) {
                    response.sendRedirect(request.getContextPath() + "/");
                    return;
                }
                
                // Get payment details
                Payment payment = paymentService.getPaymentByOrderId(orderId);
                
                // Get order items (tracks)
                List<Track> orderItems = OrderDAO.getTracksByOrderId(orderId);
                
                request.setAttribute("order", order);
                request.setAttribute("payment", payment);
                request.setAttribute("orderItems", orderItems);
                
                request.getRequestDispatcher("/checkout.jsp").forward(request, response);
                
            } catch (SQLException e) {
                e.printStackTrace();
                request.setAttribute("error", "Error loading payment details");
                request.getRequestDispatcher("/error.jsp").forward(request, response);
            } finally {
                if (con != null) {
                    try {
                        con.close();
                    } catch (SQLException e) {
                        e.printStackTrace();
                    }
                }
            }
            
        } catch (NumberFormatException e) {
            response.sendRedirect(request.getContextPath() + "/");
        }
    }
}


--- main/java/controller/PostManagement/ApprovePostServlet.java ---

package controller.PostManagement;

import dao.PostDAO;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.*;
import model.User;
import model.enums.UserType;

import java.io.IOException;
import java.sql.SQLException;

@WebServlet(name = "ApprovePostServlet", urlPatterns = {"/posts/approve"})
public class ApprovePostServlet extends HttpServlet {

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {

        HttpSession session = request.getSession(false);
        User user = (session != null) ? (User) session.getAttribute("USER") : null;

        if (user == null) {
            response.sendRedirect(request.getContextPath() + "/login");
            return;
        }

        // Only admins can approve/reject posts
        if (!(user.getUserType() == UserType.ADMIN)) {
            response.sendRedirect(request.getContextPath() + "/");
            return;
        }

        String postIdStr = request.getParameter("postId");
        String action = request.getParameter("action");

        if (postIdStr == null || action == null) {
            response.sendRedirect(request.getContextPath() + "/admin/manage-posts");
            return;
        }

        try {
            int postId = Integer.parseInt(postIdStr);
            if ("approve".equalsIgnoreCase(action)) {
                PostDAO.updatePostStatus(postId, "approved");
                // session.setAttribute("FLASH_SUCCESS", "Post approved successfully!");
            } else if ("reject".equalsIgnoreCase(action)) {
                PostDAO.updatePostStatus(postId, "rejected");
                // session.setAttribute("FLASH_SUCCESS", "Post rejected successfully!");
            } else {
                // session.setAttribute("FLASH_ERROR", "Unknown action.");
            }
            // PRG back to admin list
            response.sendRedirect(request.getContextPath() + "/admin/manage-posts");
        } catch (SQLException | NumberFormatException e) {
            // session.setAttribute("FLASH_ERROR", "Error updating post status.");
            response.sendRedirect(request.getContextPath() + "/admin/manage-posts");
        }
    }
}


--- main/java/controller/PostManagement/CommunityServlet.java ---

// in java/controller/community/CommunityServlet.java
package controller.PostManagement;

import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import model.Post;
import service.PostService;
import java.io.IOException;
import java.sql.SQLException;
import java.util.List;

@WebServlet("/community")
public class CommunityServlet extends HttpServlet {
    private final PostService postService = new PostService();

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        try {
            List<Post> posts = postService.getAllApprovedPosts();
            request.setAttribute("posts", posts);
            request.getRequestDispatcher("/community/community.jsp").forward(request, response);
        } catch (SQLException e) {
            throw new ServletException("Failed to load community feed", e);
        }
    }
}

--- main/java/controller/PostManagement/CreatePostServlet.java ---

package controller.PostManagement;

import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.MultipartConfig;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.*;
import model.Post;
import model.User;
import service.PostService;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.sql.SQLException;
import java.util.Collection;
import java.util.List;
import java.util.stream.Collectors;

@WebServlet("/community/create")
@MultipartConfig(
        fileSizeThreshold = 1024 * 1024,      // 1MB
        maxFileSize = 1024 * 1024 * 10,     // 10MB
        maxRequestSize = 1024 * 1024 * 50   // 50MB
)
public class CreatePostServlet extends HttpServlet {

    private final PostService postService = new PostService();

    /**
     * Handles GET requests by forwarding to the post creation form.
     */
    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        // Ensure user is logged in before showing the form
        if (request.getSession(false) == null || request.getSession(false).getAttribute("USER") == null) {
            response.sendRedirect(request.getContextPath() + "/login.jsp");
            return;
        }
        // The form is located in the /community/ directory now
        request.getRequestDispatcher("/community/create-edit-post.jsp").forward(request, response);
    }

    /**
     * Handles POST requests by processing the submitted post data and file uploads.
     */
    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        HttpSession session = request.getSession(false);
        User user = (session != null) ? (User) session.getAttribute("USER") : null;
        if (user == null) {
            response.sendRedirect(request.getContextPath() + "/login.jsp?error=Session expired. Please log in.");
            return;
        }

        String title = request.getParameter("title");
        String description = request.getParameter("description");
        // Basic validation
        if (title == null || title.trim().isEmpty() || description == null || description.trim().isEmpty()) {
            request.setAttribute("error", "Title and description are required.");
            request.getRequestDispatcher("/community/create-edit-post.jsp").forward(request, response);
            return;
        }

        Post post = new Post(user.getUserId(), user.getFullName(), title, description);
        try {
            // Handle file uploads and set bytes/types on the post object
            handleFileUploads(request, post);
            // Use the service to handle business logic and save the post
            postService.createPost(post, user);
            // MODIFIED: Redirect to the user's profile post list on success
            response.sendRedirect(request.getContextPath() + "/profile?view=my-posts&success=Post+created+successfully+and+is+pending+approval.");
        } catch (SQLException e) {
            e.printStackTrace();
            request.setAttribute("error", "A database error occurred while creating the post: " + e.getMessage());
            request.setAttribute("post", post);
            // Repopulate form with entered data
            request.getRequestDispatcher("/community/create-edit-post.jsp").forward(request, response);
        } catch (Exception e) {
            e.printStackTrace();
            request.setAttribute("error", "An unexpected error occurred: " + e.getMessage());
            request.setAttribute("post", post);
            request.getRequestDispatcher("/community/create-edit-post.jsp").forward(request, response);
        }
    }

    /**
     * A helper method to process uploaded files into byte arrays.
     */
    private void handleFileUploads(HttpServletRequest request, Post post) throws IOException, ServletException {
        Part part1 = request.getPart("image1");
        if (part1 != null && part1.getSize() > 0) {
            try (InputStream is = part1.getInputStream()) {
                post.setImage1Data(is.readAllBytes());
                post.setImage1Type(part1.getContentType());
            }
        }

        Part part2 = request.getPart("image2");
        if (part2 != null && part2.getSize() > 0) {
            try (InputStream is = part2.getInputStream()) {
                post.setImage2Data(is.readAllBytes());
                post.setImage2Type(part2.getContentType());
            }
        }

        Part part3 = request.getPart("image3");
        if (part3 != null && part3.getSize() > 0) {
            try (InputStream is = part3.getInputStream()) {
                post.setImage3Data(is.readAllBytes());
                post.setImage3Type(part3.getContentType());
            }
        }
    }
}

--- main/java/controller/PostManagement/DeletePostServlet.java ---

package controller.PostManagement;

import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.*;
import model.User;
import model.enums.UserType;
import service.PostService;
import java.io.IOException;

@WebServlet("/community/delete")
public class DeletePostServlet extends HttpServlet {

    private final PostService postService = new PostService();

    /**
     * Handles POST requests to delete a post.
     */
    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        HttpSession session = request.getSession(false);
        User user = (session != null) ? (User) session.getAttribute("USER") : null;
        if (user == null) {
            response.sendError(HttpServletResponse.SC_UNAUTHORIZED, "You must be logged in to perform this action.");
            return;
        }

        String redirectPath = (user.getUserType() == UserType.ADMIN)
                ? request.getContextPath() + "/admin/manage-posts"
                : request.getContextPath() + "/profile?view=my-posts";
        try {
            int postId = Integer.parseInt(request.getParameter("postId"));
            // The service layer handles the permission check and deletion logic
            postService.deletePost(postId, user);
            // Optional: Add a success flash message to the session
            session.setAttribute("successMessage", "Post deleted successfully.");
        } catch (NumberFormatException e) {
            session.setAttribute("errorMessage", "Invalid Post ID provided.");
        } catch (IllegalAccessException e) {
            // This is thrown by the service if the user doesn't have permission
            session.setAttribute("errorMessage", e.getMessage());
        } catch (Exception e) {
            e.printStackTrace();
            session.setAttribute("errorMessage", "An error occurred while deleting the post.");
        }

        response.sendRedirect(redirectPath);
    }
}

--- main/java/controller/PostManagement/EditPostServlet.java ---

package controller.community;

import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.MultipartConfig;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.*;
import model.Post;
import model.User;
import model.enums.UserType;
import service.PostService;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.sql.SQLException;
import java.util.List;
import java.util.stream.Collectors;

@WebServlet("/community/edit")
@MultipartConfig(
        fileSizeThreshold = 1024 * 1024,      // 1MB
        maxFileSize = 1024 * 1024 * 10,     // 10MB
        maxRequestSize = 1024 * 1024 * 50   // 50MB
)
public class EditPostServlet extends HttpServlet {

    private final PostService postService = new PostService();

    /**
     * Handles GET requests by fetching the post to be edited and forwarding to the form.
     */
    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        User user = (User) request.getSession().getAttribute("USER");
        if (user == null) {
            response.sendRedirect(request.getContextPath() + "/login.jsp");
            return;
        }

        try {
            int postId = Integer.parseInt(request.getParameter("postId"));
            Post post = postService.getPostById(postId);

            // Security Check: The service layer will check again on POST, but it's good practice
            // to prevent users from even seeing the edit page if they don't have permission.
            if (post == null || (post.getUserId() != user.getUserId() && user.getUserType() != UserType.ADMIN)) {
                response.sendRedirect(request.getContextPath() + "/my-posts");
                return;
            }

            request.setAttribute("post", post);
            request.getRequestDispatcher("/community/create-edit-post.jsp").forward(request, response);
        } catch (NumberFormatException | SQLException e) {
            e.printStackTrace();
            // Redirect if postId is invalid or a DB error occurs
            response.sendRedirect(request.getContextPath() + "/my-posts");
        }
    }

    /**
     * Handles POST requests by processing the updated post data.
     */
    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        User user = (User) request.getSession().getAttribute("USER");
        if (user == null) {
            response.sendRedirect(request.getContextPath() + "/login.jsp");
            return;
        }

        try {
            int postId = Integer.parseInt(request.getParameter("postId"));
            Post postToUpdate = postService.getPostById(postId); // Get the existing post from DB

            if (postToUpdate == null) {
                // Handle case where post was deleted while user was editing
                response.sendRedirect(request.getContextPath() + "/my-posts?error=Post not found.");
                return;
            }

            // Update fields from form
            postToUpdate.setTitle(request.getParameter("title"));
            postToUpdate.setDescription(request.getParameter("description"));

            // File upload logic handles new/updated images
            handleFileUploads(request, postToUpdate);
            // The service handles permission checks and business rules (like status reset)
            postService.updatePost(postToUpdate, user);
            // Redirect based on user role
            if (user.getUserType() == UserType.ADMIN) {
                response.sendRedirect(request.getContextPath() + "/admin/manage-posts");
            } else {
                response.sendRedirect(request.getContextPath() + "/my-posts");
            }

        } catch (NumberFormatException e) {
            response.sendRedirect(request.getContextPath() + "/my-posts?error=Invalid post ID.");
        } catch (IllegalAccessException e) {
            // This catches the permission error from the service layer
            response.sendError(HttpServletResponse.SC_FORBIDDEN, e.getMessage());
        } catch (SQLException e) {
            e.printStackTrace();
            response.sendRedirect(request.getContextPath() + "/my-posts?error=Database error during update.");
        }
    }

    private void handleFileUploads(HttpServletRequest request, Post post) throws IOException, ServletException {
        Part part1 = request.getPart("image1");
        if (part1 != null && part1.getSize() > 0) {
            try (InputStream is = part1.getInputStream()) {
                post.setImage1Data(is.readAllBytes());
                post.setImage1Type(part1.getContentType());
            }
        }

        Part part2 = request.getPart("image2");
        if (part2 != null && part2.getSize() > 0) {
            try (InputStream is = part2.getInputStream()) {
                post.setImage2Data(is.readAllBytes());
                post.setImage2Type(part2.getContentType());
            }
        }

        Part part3 = request.getPart("image3");
        if (part3 != null && part3.getSize() > 0) {
            try (InputStream is = part3.getInputStream()) {
                post.setImage3Data(is.readAllBytes());
                post.setImage3Type(part3.getContentType());
            }
        }
    }
}

--- main/java/controller/PostManagement/FeedServlet.java ---

package controller.PostManagement;

import dao.PostDAO;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.*;
import model.Post;

import java.io.IOException;
import java.sql.SQLException;
import java.util.List;

@WebServlet(name = "FeedServlet", urlPatterns = {"/feed"})
public class FeedServlet extends HttpServlet {
    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        try {
            List<Post> posts = PostDAO.getAllApprovedPosts();
            request.setAttribute("posts", posts);
            request.getRequestDispatcher("community/feed.jsp").forward(request, response);
        } catch (SQLException e) {
            throw new ServletException("Failed to load community feed", e);
        }
    }
}


--- main/java/controller/PostManagement/ManagePostServlet.java ---

package controller.PostManagement;

import dao.PostDAO;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.*;
import model.Post;
import model.User;
import model.enums.UserType;

import java.io.IOException;
import java.sql.SQLException;
import java.util.List;

@WebServlet(name = "ManagePostServlet", urlPatterns = {"/admin/manage-posts"})
public class ManagePostServlet extends HttpServlet {

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        HttpSession session = request.getSession(false);
        User user = (session != null) ? (User) session.getAttribute("USER") : null;

        if (user == null || !(user.getUserType() == UserType.ADMIN)) {
            response.sendRedirect(request.getContextPath() + "/login");
            return;
        }

        try {
            List<Post> pendingPosts = PostDAO.getPendingPosts();
            List<Post> allPosts = PostDAO.getAllPostsForAdmin();

            request.setAttribute("pendingPosts", pendingPosts);
            request.setAttribute("allPosts", allPosts);

            request.getRequestDispatcher("manage-posts.jsp").forward(request, response);
        } catch (SQLException e) {
            throw new ServletException(e);
        }
    }
}


--- main/java/controller/PostManagement/MyPostsServlet.java ---

// in java/controller/community/MyPostsServlet.java
package controller.PostManagement;

import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.*;
import model.Post;
import model.User;
import service.PostService;
import java.io.IOException;
import java.sql.SQLException;
import java.util.List;

@WebServlet("/my-posts") // URL remains the same
public class MyPostsServlet extends HttpServlet {

    private final PostService postService = new PostService();

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {

        HttpSession session = request.getSession(false);
        User user = (session != null) ? (User) session.getAttribute("USER") : null;

        if (user == null) {
            response.sendRedirect(request.getContextPath() + "/login.jsp");
            return;
        }

        try {
            // SINGLE call to the service layer
            List<Post> myPosts = postService.getPostsForUser(user.getUserId());
            request.setAttribute("myPosts", myPosts);
            request.getRequestDispatcher("/community/my-posts.jsp").forward(request, response);
        } catch (SQLException e) {
            // Log the error and show a user-friendly error page
            e.printStackTrace();
            request.setAttribute("error", "Failed to load your posts due to a database error.");
            request.getRequestDispatcher("/error.jsp").forward(request, response);
        }
    }
}

--- main/java/controller/PostManagement/PostImageServlet.java ---

package controller.PostManagement;

import dao.PostDAO;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import model.Post;

import java.io.IOException;
import java.io.OutputStream;
import java.sql.SQLException;

@WebServlet("/post-image")
public class PostImageServlet extends HttpServlet {
    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String postIdStr = request.getParameter("postId");
        String indexStr = request.getParameter("index");

        if (postIdStr == null || indexStr == null) {
            response.sendError(HttpServletResponse.SC_BAD_REQUEST, "Missing parameters.");
            return;
        }

        try {
            int postId = Integer.parseInt(postIdStr);
            int index = Integer.parseInt(indexStr);

            Post post = PostDAO.getPostById(postId);

            byte[] imageData = null;
            String imageType = null;

            switch (index) {
                case 1:
                    imageData = post.getImage1Data();
                    imageType = post.getImage1Type();
                    break;
                case 2:
                    imageData = post.getImage2Data();
                    imageType = post.getImage2Type();
                    break;
                case 3:
                    imageData = post.getImage3Data();
                    imageType = post.getImage3Type();
                    break;
            }

            if (post == null || imageData == null || imageType == null) {
                response.sendError(HttpServletResponse.SC_NOT_FOUND, "Image not found.");
                return;
            }

            response.setContentType(imageType);
            response.setContentLength(imageData.length);

            try (OutputStream out = response.getOutputStream()) {
                out.write(imageData);
            }

        } catch (NumberFormatException e) {
            response.sendError(HttpServletResponse.SC_BAD_REQUEST, "Invalid parameter format.");
        } catch (SQLException e) {
            throw new ServletException("Database error retrieving post image.", e);
        }
    }
}

--- main/java/controller/ProcessPaymentController.java ---

package controller;

import dao.CartDAO;
import dao.OrderDAO;
import model.Order;
import model.Payment;
import model.User;
import model.Track;
import model.enums.OrderStatus;
import service.OrderService;
import service.PaymentService;
import utils.DatabaseConnection;

import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;
import java.io.IOException;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.List;
import java.util.stream.Collectors;

@WebServlet("/process-payment")
public class ProcessPaymentController extends HttpServlet {
    
    private PaymentService paymentService;
    private OrderService orderService;
    
    @Override
    public void init() throws ServletException {
        super.init();
        paymentService = new PaymentService();
        orderService = new OrderService();
    }

    // REPLACE the doPost method in controller/ProcessPaymentController.java

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        HttpSession session = request.getSession();
        User user = (User) session.getAttribute("USER");

        if (user == null) {
            response.sendRedirect(request.getContextPath() + "/login");
            return;
        }

        String paymentMethod = request.getParameter("paymentMethod");
        String promoCode = request.getParameter("promoCode");

        if (paymentMethod == null || paymentMethod.trim().isEmpty()) {
            request.setAttribute("error", "Please select a payment method");
            request.getRequestDispatcher("/payment.jsp").forward(request, response);
            return;
        }

        if (!validatePaymentDetails(request, paymentMethod)) {
            request.setAttribute("error", "Please fill in all required payment details correctly");
            request.getRequestDispatcher("/payment.jsp").forward(request, response);
            return;
        }

        Connection con = null;
        try {
            con = DatabaseConnection.getConnection();
            con.setAutoCommit(false); // START TRANSACTION

            List<Track> cartItems = CartDAO.getCartItems(user.getUserId());
            if (cartItems.isEmpty()) {
                request.setAttribute("error", "Your cart is empty");
                request.getRequestDispatcher("/payment.jsp").forward(request, response);
                return;
            }

            double cartTotal = calculateTotal(cartItems);
            Order newOrder = orderService.createOrder(user, cartItems, cartTotal, promoCode, con);

            // Process payment, which now returns a Payment object
            Payment successfulPayment = paymentService.processPayment(newOrder.getOrderId(), newOrder.getFinalAmount(), paymentMethod, con);

            if (successfulPayment != null) {
                // *** NEW: Update the order with payment details ***
                orderService.updateOrderPaymentDetails(newOrder.getOrderId(), successfulPayment.getPaymentMethod(), successfulPayment.getTransactionId(), con);

                // Update order status to COMPLETED
                orderService.updateOrderStatus(newOrder.getOrderId(), OrderStatus.COMPLETED, con);

                List<Integer> trackIds = cartItems.stream().map(Track::getTrackId).collect(Collectors.toList());
                OrderDAO.addPurchasedTracks(user.getUserId(), newOrder.getOrderId(), trackIds, con);
                CartDAO.clearCart(user.getUserId(), con);

                con.commit(); // Commit transaction

                session.removeAttribute("cartItems");
                session.removeAttribute("cartTotal");
                response.sendRedirect(request.getContextPath() + "/checkout?orderId=" + newOrder.getOrderId());
            } else {
                con.rollback(); // Rollback transaction on payment failure
                request.setAttribute("error", "Payment failed. Please try again.");
                request.getRequestDispatcher("/payment.jsp").forward(request, response);
            }

        } catch (SQLException e) {
            if (con != null) {
                try { con.rollback(); } catch (SQLException rollbackEx) { rollbackEx.printStackTrace(); }
            }
            e.printStackTrace();
            request.setAttribute("error", "An error occurred during payment processing: " + e.getMessage());
            request.getRequestDispatcher("/error.jsp").forward(request, response);
        } finally {
            if (con != null) {
                try {
                    con.setAutoCommit(true);
                    con.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
    }
    
    private double calculateTotal(List<Track> cartItems) {
        double total = 0;
        if (cartItems != null) {
            for (Track track : cartItems) {
                total += track.getPrice();
            }
        }
        return total;
    }
    
    private boolean validatePaymentDetails(HttpServletRequest request, String paymentMethod) {
        if ("CARD".equals(paymentMethod)) {
            String cardNumber = request.getParameter("cardNumber");
            String expiryDate = request.getParameter("expiryDate");
            String cvv = request.getParameter("cvv");
            String cardholderName = request.getParameter("cardholderName");
            
            return cardNumber != null && cardNumber.replaceAll("\\s", "").length() >= 16 &&
                   expiryDate != null && expiryDate.length() == 5 &&
                   cvv != null && cvv.length() >= 3 &&
                   cardholderName != null && !cardholderName.trim().isEmpty();
                   
        } else if ("ONLINE".equals(paymentMethod)) {
            String bankName = request.getParameter("bankName");
            String accountNumber = request.getParameter("accountNumber");
            String accountHolderName = request.getParameter("accountHolderName");
            String transferReference = request.getParameter("transferReference");
            
            return bankName != null && !bankName.trim().isEmpty() &&
                   accountNumber != null && !accountNumber.trim().isEmpty() &&
                   accountHolderName != null && !accountHolderName.trim().isEmpty() &&
                   transferReference != null && !transferReference.trim().isEmpty();
        }
        return false;
    }
}


--- main/java/controller/SearchServlet.java ---

// SearchServlet.java
package controller;

import dao.TrackDAO;
import jakarta.servlet.RequestDispatcher;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import model.Track;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

@WebServlet("/search")
public class SearchServlet extends HttpServlet {
    private final int RECORDS_PER_PAGE = 12;

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        // Retrieve search parameters
        String title = request.getParameter("query");
        String genre = request.getParameter("genre");
        String priceRange = request.getParameter("price");
        String rating = request.getParameter("rating");

        // Parse price range (in LKR)
        Double minPrice = null;
        Double maxPrice = null;
        if (priceRange != null && !priceRange.isEmpty()) {
            switch (priceRange) {
                case "under100":
                    maxPrice = 100.0;
                    break;
                case "100-200":
                    minPrice = 100.0;
                    maxPrice = 200.0;
                    break;
                case "200-400":
                    minPrice = 200.0;
                    maxPrice = 400.0;
                    break;
                case "over400":
                    minPrice = 400.0;
                    break;
            }
        }

        // Parse rating
        Double minRating = null;
        if (rating != null && !rating.isEmpty()) {
            try {
                minRating = Double.parseDouble(rating);
            } catch (NumberFormatException e) {
                minRating = null;  // Ignore invalid
            }
        }

        // Handle pagination
        int page = 1;
        if (request.getParameter("page") != null) {
            try {
                page = Integer.parseInt(request.getParameter("page"));
                if (page < 1) page = 1;  // Prevent invalid pages
            } catch (NumberFormatException e) {
                page = 1;
            }
        }

        List<Track> tracks = new ArrayList<>();
        int noOfRecords = 0;
        int noOfPages = 0;

        try {
            // Check if no search parameters (use OR: fallback only if truly empty)
            boolean hasSearchParams = (title != null && !title.trim().isEmpty()) ||
                    (genre != null && !genre.isEmpty()) ||
                    (priceRange != null && !priceRange.isEmpty()) ||
                    (rating != null && !rating.isEmpty());

            if (!hasSearchParams) {
                // Fetch all tracks with pagination
                tracks = TrackDAO.getApprovedTracksPaginated(page, RECORDS_PER_PAGE);
                noOfRecords = TrackDAO.countApprovedTracks();
            } else {
                // Search with filters
                tracks = TrackDAO.searchProducts(title, genre, minPrice, maxPrice, minRating, page, RECORDS_PER_PAGE);
                noOfRecords = TrackDAO.countProducts(title, genre, minPrice, maxPrice, minRating);  // Include rating
            }
            noOfPages = (int) Math.ceil(noOfRecords * 1.0 / RECORDS_PER_PAGE);

        } catch (Exception e) {
            e.printStackTrace();
            request.setAttribute("errorMessage", "Search failed. Please try again.");
            noOfPages = 0;
        }

        // Set attributes
        request.setAttribute("trackList", tracks);
        request.setAttribute("noOfPages", noOfPages);
        request.setAttribute("currentPage", page);
        // Forward params for JSP links
        request.setAttribute("query", title != null ? title.trim() : "");
        request.setAttribute("genre", genre != null ? genre : "");
        request.setAttribute("price", priceRange != null ? priceRange : "");
        request.setAttribute("rating", rating != null ? rating : "");

        RequestDispatcher rd = request.getRequestDispatcher("search-music.jsp");
        rd.forward(request, response);
    }
}

--- main/java/controller/TrackManagement/AddTrackServlet.java ---

package controller.TrackManagement;

import dao.TrackDAO;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.MultipartConfig;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.Part;
import model.Track;
import model.User;
import utils.ImageUploadUtil;

import java.io.IOException;
import java.io.InputStream;
import java.time.LocalDate;

@WebServlet("/artist/add-track")
@MultipartConfig(fileSizeThreshold = 1024 * 1024 * 2, // 2MB
        maxFileSize = 1024 * 1024 * 50,      // 50MB
        maxRequestSize = 1024 * 1024 * 100)   // 100MB
public class AddTrackServlet extends HttpServlet {

    private final ImageUploadUtil imageUtil = new ImageUploadUtil();

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        User user = (User) request.getSession().getAttribute("USER");

        if (user == null) {
            response.sendError(HttpServletResponse.SC_UNAUTHORIZED, "You must be logged in to upload tracks.");
            return;
        }

        try {
            String title = request.getParameter("title");
            double price = Double.parseDouble(request.getParameter("price"));
            String genre = request.getParameter("genre");
            int duration = Integer.parseInt(request.getParameter("duration"));
            LocalDate releaseDate = LocalDate.parse(request.getParameter("release_date"));

            Part audioPart = request.getPart("audioFile");
            Part coverArtPart = request.getPart("coverArtFile");

            byte[] audioData = null;
            if (audioPart != null && audioPart.getSize() > 0) {
                try (InputStream audioInputStream = audioPart.getInputStream()) {
                    audioData = audioInputStream.readAllBytes();
                }
            }

            byte[] coverArtData = null;
            String coverArtType = null;
            if (coverArtPart != null && coverArtPart.getSize() > 0) {
                try (InputStream coverArtInputStream = coverArtPart.getInputStream()) {
                    coverArtData = coverArtInputStream.readAllBytes();
                    coverArtType = coverArtPart.getContentType(); // Get the MIME type (e.g., "image/jpeg")
                }
            }

            Track newTrack = new Track();
            newTrack.setTitle(title);
            newTrack.setPrice(price);
            newTrack.setGenre(genre);
            newTrack.setDuration(duration);
            newTrack.setReleaseDate(releaseDate);
            newTrack.setArtistId(user.getUserId());
            newTrack.setRating(0.0);

            newTrack.setFullTrackData(audioData);
            newTrack.setCoverArtData(coverArtData);
            newTrack.setCoverArtType(coverArtType);

            // Note: Snippet generation is a complex task. For now, we are omitting it
            // to ensure the core functionality of saving and streaming works.
            // newTrack.setSnippetData(generateSnippet(audioData));

            TrackDAO.addTrack(newTrack);

            String destination = request.getContextPath() + (user.getUserType().name().equals("ARTIST") ? "/artist/profile" : "/manage-tracks") + "?success=Track added successfully";
            response.sendRedirect(destination);

        } catch (Exception e) {
            e.printStackTrace();
            String destination = request.getContextPath() + (user.getUserType().name().equals("ARTIST") ? "/artist/profile" : "/manage-tracks") + "?error=An error occurred: " + e.getMessage();
            response.sendRedirect(destination);
        }
    }
}

--- main/java/controller/TrackManagement/CoverArtServlet.java ---

package controller.TrackManagement;

import dao.TrackDAO;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import model.Track;

import java.io.IOException;
import java.io.OutputStream;
import java.sql.SQLException;

@WebServlet("/cover-art")
public class CoverArtServlet extends HttpServlet {
    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String trackIdStr = request.getParameter("trackId");
        if (trackIdStr == null || trackIdStr.isEmpty()) {
            response.sendError(HttpServletResponse.SC_BAD_REQUEST, "Track ID is required.");
            return;
        }

        try {
            int trackId = Integer.parseInt(trackIdStr);
            Track track = TrackDAO.findTrackById(trackId);

            if (track == null || track.getCoverArtData() == null || track.getCoverArtType() == null) {
                response.sendError(HttpServletResponse.SC_NOT_FOUND, "Cover art not found.");
                return;
            }

            response.setContentType(track.getCoverArtType());
            response.setContentLength(track.getCoverArtData().length);

            try (OutputStream out = response.getOutputStream()) {
                out.write(track.getCoverArtData());
            }

        } catch (NumberFormatException e) {
            response.sendError(HttpServletResponse.SC_BAD_REQUEST, "Invalid Track ID format.");
        } catch (SQLException e) {
            throw new ServletException("Database error retrieving cover art", e);
        }
    }
}

--- main/java/controller/TrackManagement/DeleteTrackServlet.java ---

package controller.TrackManagement;

import dao.TrackDAO;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import model.Track;
import model.User;

import java.io.IOException;
import java.sql.SQLException;

@WebServlet("/artist/delete-track")
public class DeleteTrackServlet extends HttpServlet {

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        User user = (User) request.getSession().getAttribute("USER");

        if (user == null || !(user.getUserType().name().equals("ARTIST") || user.getUserType().name().equals("ADMIN"))) {
            response.sendError(HttpServletResponse.SC_UNAUTHORIZED, "You do not have permission to perform this action.");
            return;
        }

        String trackIdStr = request.getParameter("trackId");
        if (trackIdStr == null || trackIdStr.trim().isEmpty()) {
            response.sendError(HttpServletResponse.SC_BAD_REQUEST, "Track ID is missing.");
            return;
        }

        String redirectPath = request.getContextPath() + (user.getUserType().name().equals("ARTIST") ? "/artist/profile" : "/manage-tracks");

        try {
            int trackId = Integer.parseInt(trackIdStr);

            Track trackToDelete = TrackDAO.findTrackById(trackId);

            if (trackToDelete == null) {
                response.sendError(HttpServletResponse.SC_NOT_FOUND, "Track not found.");
                return;
            }

            // Security Check: An ARTIST can only delete their own tracks. An ADMIN can delete any track.
            if (user.getUserType().name().equals("ARTIST") && trackToDelete.getArtistId() != user.getUserId()) {
                response.sendError(HttpServletResponse.SC_FORBIDDEN, "You do not have permission to delete this track.");
                return;
            }

            TrackDAO.removeTrack(trackId);

            response.sendRedirect(redirectPath + "?success=Track deleted successfully");

        } catch (NumberFormatException e) {
            response.sendRedirect(redirectPath + "?error=Invalid track ID format.");
        } catch (SQLException e) {
            e.printStackTrace();
            response.sendRedirect(redirectPath + "?error=Database error: " + e.getMessage());
        }
    }
}

--- main/java/controller/TrackManagement/DownloadServlet.java ---

package controller.TrackManagement;

import dao.OrderDAO;
import dao.TrackDAO;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;
import model.Track;
import model.User;

import java.io.IOException;
import java.io.OutputStream;
import java.sql.SQLException;

@WebServlet("/download")
public class DownloadServlet extends HttpServlet {

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        HttpSession session = request.getSession(false);
        User user = (session != null) ? (User) session.getAttribute("USER") : null;

        String trackIdStr = request.getParameter("trackId");
        if (trackIdStr == null || trackIdStr.trim().isEmpty()) {
            response.sendError(HttpServletResponse.SC_BAD_REQUEST, "Track ID is required.");
            return;
        }

        if (user == null) {
            response.sendError(HttpServletResponse.SC_UNAUTHORIZED, "You must be logged in to download tracks.");
            return;
        }

        try {
            int trackId = Integer.parseInt(trackIdStr);

            // **CRITICAL SECURITY CHECK** (This logic remains the same)
            boolean hasPurchased = OrderDAO.hasUserPurchasedTrack(user.getUserId(), trackId);

            if (!hasPurchased) {
                response.sendError(HttpServletResponse.SC_FORBIDDEN, "Access denied. You have not purchased this track.");
                return;
            }

            Track track = TrackDAO.findTrackById(trackId);

            // **MODIFIED**: Check for the byte array instead of a file path
            if (track == null || track.getFullTrackData() == null || track.getFullTrackData().length == 0) {
                response.sendError(HttpServletResponse.SC_NOT_FOUND, "Downloadable file not found for this track.");
                return;
            }

            byte[] audioData = track.getFullTrackData();

            String fileName = track.getTitle().replaceAll("[^a-zA-Z0-9.-]", "_") + ".mp3";

            response.setContentType("audio/mpeg"); // Assuming MP3 format
            response.setContentLength(audioData.length);
            response.setHeader("Content-Disposition", "attachment; filename=\"" + fileName + "\"");

            try (OutputStream out = response.getOutputStream()) {
                out.write(audioData);
            }

        } catch (NumberFormatException e) {
            response.sendError(HttpServletResponse.SC_BAD_REQUEST, "Invalid Track ID format.");
        } catch (SQLException e) {
            e.printStackTrace();
            response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, "A database error occurred.");
        }
    }
}

--- main/java/controller/TrackManagement/ManageTrackViewServlet.java ---

package controller.TrackManagement;

import dao.TrackDAO;
import jakarta.servlet.RequestDispatcher;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import model.Track;

import java.io.IOException;
import java.sql.SQLException;
import java.util.LinkedList;
import java.util.List;

@WebServlet("/manage-tracks")
public class ManageTrackViewServlet extends HttpServlet {

    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        List<Track> allTracks = new LinkedList<>(); // Use List interface
        try {
            // UPDATED: Call the new method to get ALL tracks for the admin
            allTracks = TrackDAO.getAllTracksForAdmin();
        } catch (SQLException e) {
            req.setAttribute("error", "Failed to fetch tracks: " + e.getMessage());
        }

        req.setAttribute("allTracks", allTracks);

        RequestDispatcher rd = req.getRequestDispatcher("/admin/manage-tracks.jsp");
        rd.forward(req, resp);
    }
}

--- main/java/controller/TrackManagement/StreamServlet.java ---

package controller.TrackManagement;

import dao.TrackDAO;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import model.Track;

import java.io.IOException;
import java.io.OutputStream;
import java.sql.SQLException;

@WebServlet("/stream") // The URL mapping remains the same
public class StreamServlet extends HttpServlet {

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String trackIdStr = request.getParameter("trackId");
        if (trackIdStr == null || trackIdStr.trim().isEmpty()) {
            response.sendError(HttpServletResponse.SC_BAD_REQUEST, "Track ID is required.");
            return;
        }

        try {
            int trackId = Integer.parseInt(trackIdStr);
            Track track = TrackDAO.findTrackById(trackId);

            if (track == null || track.getFullTrackData() == null || track.getFullTrackData().length == 0) {
                response.sendError(HttpServletResponse.SC_NOT_FOUND, "Streamable audio data not found for this track.");
                return;
            }

            byte[] audioData = track.getFullTrackData();

            response.setContentType("audio/mpeg"); // Assuming MP3, adjust if needed
            response.setContentLength(audioData.length);
            response.setHeader("Accept-Ranges", "bytes");

            try (OutputStream out = response.getOutputStream()) {
                out.write(audioData);
            }

        } catch (NumberFormatException e) {
            response.sendError(HttpServletResponse.SC_BAD_REQUEST, "Invalid Track ID format.");
        } catch (SQLException e) {
            e.printStackTrace();
            response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, "A database error occurred.");
        }
    }
}

--- main/java/controller/TrackManagement/UpdateTrackServlet.java ---

package controller.TrackManagement;

import dao.TrackDAO;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.MultipartConfig;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.Part;
import model.Track;
import model.User;

import java.io.IOException;
import java.io.InputStream;
import java.sql.SQLException;
import java.time.LocalDate;

@WebServlet("/artist/update-track")
@MultipartConfig(fileSizeThreshold = 1024 * 1024 * 2, // 2MB
        maxFileSize = 1024 * 1024 * 50,      // 50MB
        maxRequestSize = 1024 * 1024 * 100)   // 100MB
public class UpdateTrackServlet extends HttpServlet {

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        User user = (User) request.getSession().getAttribute("USER");

        if (user == null || !(user.getUserType().name().equals("ARTIST") || user.getUserType().name().equals("ADMIN"))) {
            response.sendError(HttpServletResponse.SC_UNAUTHORIZED, "You do not have permission to perform this action.");
            return;
        }

        String redirectPath = request.getContextPath() + (user.getUserType().name().equals("ARTIST") ? "/artist/profile" : "/manage-tracks");

        try {
            int trackId = Integer.parseInt(request.getParameter("trackId"));

            Track existingTrack = TrackDAO.findTrackById(trackId);
            if (existingTrack == null) {
                response.sendError(HttpServletResponse.SC_NOT_FOUND, "Track not found.");
                return;
            }

            // Security Check: An ARTIST can only edit their own tracks. An ADMIN can edit any.
            if (user.getUserType().name().equals("ARTIST") && existingTrack.getArtistId() != user.getUserId()) {
                response.sendError(HttpServletResponse.SC_FORBIDDEN, "You do not have permission to edit this track.");
                return;
            }

            existingTrack.setTitle(request.getParameter("title"));
            existingTrack.setPrice(Double.parseDouble(request.getParameter("price")));
            existingTrack.setGenre(request.getParameter("genre"));
            existingTrack.setDuration(Integer.parseInt(request.getParameter("duration")));
            existingTrack.setReleaseDate(LocalDate.parse(request.getParameter("release_date")));

            Part audioPart = request.getPart("audioFile");
            if (audioPart != null && audioPart.getSize() > 0) {
                try (InputStream audioInputStream = audioPart.getInputStream()) {
                    existingTrack.setFullTrackData(audioInputStream.readAllBytes());
                    // Note: Snippet generation logic would go here if implemented
                }
            }

            Part coverArtPart = request.getPart("coverArtFile");
            if (coverArtPart != null && coverArtPart.getSize() > 0) {
                try (InputStream coverArtInputStream = coverArtPart.getInputStream()) {
                    existingTrack.setCoverArtData(coverArtInputStream.readAllBytes());
                    existingTrack.setCoverArtType(coverArtPart.getContentType());
                }
            }

            TrackDAO.updateTrack(existingTrack);

            response.sendRedirect(redirectPath + "?success=Track updated successfully");

        } catch (NumberFormatException e) {
            e.printStackTrace();
            response.sendRedirect(redirectPath + "?error=Invalid number format for price or duration.");
        } catch (SQLException e) {
            e.printStackTrace();
            response.sendRedirect(redirectPath + "?error=Database error: " + e.getMessage());
        } catch (Exception e) {
            e.printStackTrace();
            response.sendRedirect(redirectPath + "?error=An unexpected error occurred: " + e.getMessage());
        }
    }
}

--- main/java/controller/TrackManagement/UpdateTrackStatusServlet.java ---

package controller.TrackManagement;

import dao.TrackDAO;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import model.User;
import model.enums.TrackStatus;

import java.io.IOException;
import java.sql.SQLException;

@WebServlet("/admin/update-track-status")
public class UpdateTrackStatusServlet extends HttpServlet {

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        User user = (User) request.getSession().getAttribute("USER");
        if (user == null || !user.isAdmin()) {
            response.sendError(HttpServletResponse.SC_FORBIDDEN, "You are not authorized to perform this action.");
            return;
        }

        String trackIdStr = request.getParameter("trackId");
        String action = request.getParameter("action");
        String redirectUrl = request.getContextPath() + "/manage-tracks";

        if (trackIdStr == null || action == null) {
            response.sendRedirect(redirectUrl + "?error=Missing parameters.");
            return;
        }

        try {
            int trackId = Integer.parseInt(trackIdStr);
            TrackStatus newStatus;

            if ("approve".equals(action)) {
                newStatus = TrackStatus.APPROVED;
            } else if ("reject".equals(action)) {
                newStatus = TrackStatus.REJECTED;
            } else {
                response.sendRedirect(redirectUrl + "?error=Invalid action.");
                return;
            }

            TrackDAO.updateTrackStatus(trackId, newStatus);
            response.sendRedirect(redirectUrl + "?success=Track status updated successfully.");

        } catch (NumberFormatException e) {
            response.sendRedirect(redirectUrl + "?error=Invalid Track ID.");
        } catch (SQLException e) {
            e.printStackTrace();
            response.sendRedirect(redirectUrl + "?error=Database error: " + e.getMessage());
        }
    }
}

--- main/java/controller/TrackPaginationServlet.java ---

package controller;

import dao.TrackDAO;
import dao.constants.TrackSQLConstants;
import factory.TrackFactory;
import jakarta.servlet.RequestDispatcher;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import model.Track;
import utils.DatabaseConnection;

import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.List;

@WebServlet("/trackPaginate")
public class TrackPaginationServlet extends HttpServlet {
    private final int RECORDS_PER_PAGE = 12;

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        int page = 1;
        if (request.getParameter("page") != null) {
            page = Integer.parseInt(request.getParameter("page"));
        }

        List<Track> tracks = new ArrayList<>();
        int noOfRecords = 0;
        int noOfPages = 0;

        try {
            // UPDATED: Call the new methods that filter by APPROVED status
            tracks = TrackDAO.getApprovedTracksPaginated(page, RECORDS_PER_PAGE);
            noOfRecords = TrackDAO.countApprovedTracks();

            noOfPages = (int) Math.ceil(noOfRecords * 1.0 / RECORDS_PER_PAGE);
        } catch (Exception e) {
            e.printStackTrace();
        }

        request.setAttribute("trackList", tracks);
        request.setAttribute("noOfPages", noOfPages);
        request.setAttribute("currentPage", page);

        String ajax = request.getParameter("ajax");
        if ("true".equals(ajax)) {
            RequestDispatcher rd = request.getRequestDispatcher("/includes/track-cards.jsp");
            rd.forward(request, response);
        } else {
            RequestDispatcher rd = request.getRequestDispatcher("index.jsp");
            rd.forward(request, response);
        }
    }
}

--- main/java/controller/TrackServlet.java ---

package controller;

import dao.TrackDAO;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import model.Track;

import java.io.IOException;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;

@WebServlet(name = "TrackServlet", value = "/TrackServlet")
public class TrackServlet extends HttpServlet {
    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        List<Track> allTracks = new ArrayList<>();
        try {
            allTracks = TrackDAO.getAllTracksForAdmin();
            request.setAttribute("allTracks", allTracks);
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }

        request.getRequestDispatcher("TrackList.jsp").forward(request, response);

    }

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {

    }
}

--- main/java/controller/UserManagement/AddUserServlet.java ---

package controller.UserManagement;

import factory.UserFactory;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import model.Admin;
import model.User;
import model.enums.AdminRole;
import model.enums.UserType;
import service.UserService;
import utils.PasswordUtil;

import java.io.IOException;
import java.sql.SQLException;

@WebServlet("/add-user")
public class AddUserServlet extends HttpServlet {

    private final UserService userService = new UserService();

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String firstName = request.getParameter("firstName");
        String lastName = request.getParameter("lastName");
        String email = request.getParameter("email");
        String password = request.getParameter("password");
        String roleStr = request.getParameter("role");
        String adminRoleStr = request.getParameter("adminRole");

        try {
            UserType userType = UserType.valueOf(roleStr.toUpperCase());
            String passwordHash = PasswordUtil.hashPassword(password);

            // Create the appropriate user object using the factory
            User newUser = UserFactory.createUser(userType.name().toLowerCase(), firstName, lastName, email, passwordHash);

            // If the user is an Admin, set their specific role
            if (userType == UserType.ADMIN && newUser instanceof Admin) {
                if (adminRoleStr != null && !adminRoleStr.isEmpty()) {
                    ((Admin) newUser).setRole(AdminRole.valueOf(adminRoleStr));
                }
            }

            // A single call to the service handles validation and persistence
            userService.addUser(newUser);
            response.sendRedirect(request.getContextPath() + "/manage-users?success=User added successfully");

        } catch (IllegalArgumentException | SQLException e) {
            e.printStackTrace(); // Log the error for debugging
            response.sendRedirect(request.getContextPath() + "/manage-users?error=Failed to add user: " + e.getMessage());
        }
    }
}

--- main/java/controller/UserManagement/DeleteUserServlet.java ---

package controller.UserManagement;

import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import model.User;
import service.UserService;

import java.io.IOException;
import java.sql.SQLException;

@WebServlet("/delete-user")
public class DeleteUserServlet extends HttpServlet {

    private final UserService userService = new UserService();

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String userIdStr = request.getParameter("userId");
        if (userIdStr == null || userIdStr.trim().isEmpty()) {
            response.sendRedirect(request.getContextPath() + "/manage-users?error=User ID is missing");
            return;
        }

        try {
            int userId = Integer.parseInt(userIdStr);

            // The existing logic is correct and aligns with the consolidated service.
            User user = userService.findUserById(userId);
            if (user != null) {
                userService.removeUser(user);
            }

            response.sendRedirect(request.getContextPath() + "/manage-users?success=User deleted successfully");

        } catch (NumberFormatException e) {
            response.sendRedirect(request.getContextPath() + "/manage-users?error=Invalid User ID format.");
        } catch (SQLException e) {
            e.printStackTrace();
            response.sendRedirect(request.getContextPath() + "/manage-users?error=Failed to delete user: " + e.getMessage());
        }
    }
}

--- main/java/controller/UserManagement/LoginServlet.java ---

package controller.UserManagement;

import dao.UserDAO;
import jakarta.servlet.RequestDispatcher;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.*;
import model.User;
import utils.PasswordUtil;

import java.io.IOException;
import java.sql.SQLException;

@WebServlet("/login")
public class LoginServlet extends HttpServlet {

    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String email = request.getParameter("email");
        String password = request.getParameter("password");
        boolean remember = Boolean.parseBoolean(request.getParameter("remember-me"));

        if (email == null || password == null) {
            response.sendRedirect("login.jsp");
        }

        User loginUser = null;

        try {
            loginUser = UserDAO.findUserByEmail(email);
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }

        if (loginUser == null) {
            request.setAttribute("error", "Incorrect Email or Password");
            RequestDispatcher rd = request.getRequestDispatcher("login.jsp");
            rd.forward(request, response);
        } else if (PasswordUtil.checkPassword(password, loginUser.getPassword())) {
            HttpSession session = request.getSession();
            session.setAttribute("USER", loginUser);

            if (remember) {
                Cookie cookie = new Cookie("userId", String.valueOf(loginUser.getUserId()));
                cookie.setMaxAge(60 * 60 * 24 * 7);
                response.addCookie(cookie);
            }

            System.out.println("Login successful for " + loginUser.getUserType() + ": " + email);
            response.sendRedirect(request.getContextPath() + "/index");
        } else {
            request.setAttribute("error", "Wrong password");
            RequestDispatcher rd = request.getRequestDispatcher("login.jsp");
            rd.forward(request, response);
        }
    }
}

--- main/java/controller/UserManagement/LogoutServlet.java ---

package controller.UserManagement;

import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.*;

import java.io.IOException;

@WebServlet("/logout")
public class LogoutServlet extends HttpServlet {
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        HttpSession session = request.getSession(false);
        if (session != null) {
            session.invalidate();
        }

        // Remove cookie
        Cookie cookie = new Cookie("userId", "");
        cookie.setMaxAge(0);
        response.addCookie(cookie);

        response.sendRedirect(request.getContextPath() + "/index");
    }
}


--- main/java/controller/UserManagement/ManageUserViewServlet.java ---

package controller.UserManagement;

import jakarta.servlet.RequestDispatcher;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import model.User;
import model.enums.AdminRole;
import model.enums.UserType;
import service.UserService;

import java.io.IOException;
import java.sql.SQLException;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.List;
import java.util.stream.Collectors;

@WebServlet("/manage-users")
public class ManageUserViewServlet extends HttpServlet {

    private final UserService userService = new UserService();

    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        LinkedList<User> allUsers = new LinkedList<>();

        try {
            allUsers = userService.getAllUsers();  // Delegate to Service
        } catch (SQLException e) {
            req.setAttribute("error", "Failed to fetch users: " + e.getMessage());
        }

        // Set user types for JSP dropdowns
        List<String> userTypes = Arrays.stream(UserType.values())
                .map(Enum::name)
                .toList();
        req.setAttribute("userTypes", userTypes);

        // Set admin roles for JSP dropdowns (only for admin type)
        req.setAttribute("adminRoles", Arrays.stream(AdminRole.values())
                .map(AdminRole::name)
                .collect(Collectors.toList()));

        req.setAttribute("allUsers", allUsers);

        RequestDispatcher rd = req.getRequestDispatcher("/admin/manage-users.jsp");
        rd.forward(req, resp);
    }
}

--- main/java/controller/UserManagement/ProfileServlet.java ---

package controller.UserManagement;

import dao.OrderDAO;
import dao.TrackDAO;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import model.Order;
import model.Post;
import model.Track;
import model.User;
import service.PostService;

import java.io.IOException;
import java.sql.SQLException;
import java.util.List;

@WebServlet("/profile")
public class ProfileServlet extends HttpServlet {
    private final PostService postService = new PostService();

    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        User user = (User) req.getSession().getAttribute("USER");
        if (user == null) {
            resp.sendRedirect(req.getContextPath() + "/login.jsp");
            return;
        }

        // Determine which view to show (dashboard, music, orders, settings)
        String view = req.getParameter("view");
        if (view == null || view.trim().isEmpty()) {
            view = "dashboard";
        }

        try {
            // Fetch all necessary data for the profile sections
            List<Track> purchasedTracks = TrackDAO.getPurchasedTracksByUserId(user.getUserId());
            List<Order> userOrders = OrderDAO.getOrdersByUserId(user.getUserId());

            // Fetch user's posts if viewing the 'my-posts' section
            if ("my-posts".equals(view)) {
                List<Post> myPosts = postService.getPostsForUser(user.getUserId());
                req.setAttribute("myPosts", myPosts);
            }

            req.setAttribute("purchasedTracks", purchasedTracks);
            req.setAttribute("userOrders", userOrders);
            req.setAttribute("view", view);

            req.getRequestDispatcher("/user/profile.jsp").forward(req, resp);
        } catch (SQLException e) {
            throw new ServletException("Database error loading profile data.", e);
        }
    }
}

--- main/java/controller/UserManagement/RegisterServlet.java ---

package controller.UserManagement;

import factory.UserFactory;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import model.Artist;
import model.User;
import model.enums.UserType;
import service.UserService;
import utils.PasswordUtil;

import java.io.IOException;
import java.sql.SQLException;
import java.util.Arrays;

@WebServlet("/register")
public class RegisterServlet extends HttpServlet {

    private final UserService userService = new UserService();

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        // 1. Gather all potential parameters from the request
        String firstName = request.getParameter("first-name");
        String lastName = request.getParameter("last-name");
        String email = request.getParameter("email");
        String password = request.getParameter("password");
        String likedGenre = request.getParameter("signup-genre");
        String userTypeParam = request.getParameter("user-type");
        boolean isArtist = "artist".equals(userTypeParam);

        try {
            // 2. Create the appropriate User or Artist object
            String passwordHash = PasswordUtil.hashPassword(password);
            UserType userType = isArtist ? UserType.ARTIST : UserType.USER;
            User user = UserFactory.createUser(userType.name().toLowerCase(), firstName, lastName, email, passwordHash);

            user.addLikedGenre(likedGenre);

            // If the user is an artist, populate the artist-specific fields
            if (isArtist && user instanceof Artist) {
                Artist artist = (Artist) user;
                String stageName = request.getParameter("stage-name");
                String bio = request.getParameter("bio");
                String[] genres = request.getParameterValues("specialized-genres");

                artist.setStageName(stageName);
                artist.setBio(bio);

                if (genres != null) {
                    artist.setSpecializedGenres(Arrays.asList(genres));
                }
            }

            // 3. Make a single call to the service layer to handle validation and persistence
            userService.addUser(user);

            // 4. Redirect on success
            response.sendRedirect(request.getContextPath() + "/login.jsp?success=Registration successful! Please login.");

        } catch (IllegalArgumentException | SQLException e) {
            // 5. Catch validation or database errors from the service and forward back to the form
            e.printStackTrace(); // Log the error for debugging
            request.setAttribute("error", "Registration failed: " + e.getMessage());
            request.getRequestDispatcher("signup.jsp").forward(request, response);
        }
    }

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.sendRedirect(request.getContextPath() + "/signup.jsp");
    }
}

--- main/java/controller/UserManagement/UpdateProfileServlet.java ---

package controller.UserManagement;

import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;
import model.User;
import service.UserService;

import java.io.IOException;

@WebServlet("/update-profile")
public class UpdateProfileServlet extends HttpServlet {
    private final UserService userService = new UserService();

    @Override
    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        HttpSession session = req.getSession(false);
        if (session == null || session.getAttribute("USER") == null) {
            resp.sendRedirect(req.getContextPath() + "/login.jsp");
            return;
        }

        User currentUser = (User) session.getAttribute("USER");
        String firstName = req.getParameter("firstName");
        String lastName = req.getParameter("lastName");
        String email = req.getParameter("email");
        String newPassword = req.getParameter("newPassword");

        try {
            // Update user details
            currentUser.setFirstName(firstName);
            currentUser.setLastName(lastName);
            currentUser.setEmail(email);

            // The service layer handles validation and persistence
            userService.updateUser(currentUser, newPassword);

            // CRITICAL: Update the user object in the session
            session.setAttribute("USER", currentUser);

            resp.sendRedirect(req.getContextPath() + "/profile?view=settings&success=Profile updated successfully!");

        } catch (Exception e) {
            e.printStackTrace();
            resp.sendRedirect(req.getContextPath() + "/profile?view=settings&error=" + e.getMessage());
        }
    }
}

--- main/java/controller/UserManagement/UpdateUserServlet.java ---

package controller.UserManagement;

import factory.UserFactory;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import model.Admin;
import model.User;
import model.enums.AdminRole;
import model.enums.UserType;
import service.UserService;

import java.io.IOException;
import java.sql.SQLException;

@WebServlet("/update-user")
public class UpdateUserServlet extends HttpServlet {

    private final UserService userService = new UserService();

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String userIdStr = request.getParameter("userId");
        if (userIdStr == null || userIdStr.trim().isEmpty()) {
            response.sendRedirect(request.getContextPath() + "/manage-users?error=User ID is missing");
            return;
        }

        try {
            int userId = Integer.parseInt(userIdStr);
            String firstName = request.getParameter("firstName");
            String lastName = request.getParameter("lastName");
            String email = request.getParameter("email");
            String newPassword = request.getParameter("editPassword");
            String roleStr = request.getParameter("role");
            String adminRoleStr = request.getParameter("adminRole");
            UserType userType = UserType.valueOf(roleStr.toUpperCase());

            // 1. Create the appropriate User object from the request.
            // We use a dummy password here because it's handled separately.
            User userToUpdate = UserFactory.createUser(roleStr.toLowerCase(), firstName, lastName, email, "dummyPassword");
            userToUpdate.setUserId(userId);

            if (userType == UserType.ADMIN && userToUpdate instanceof Admin) {
                if (adminRoleStr != null && !adminRoleStr.isEmpty()) {
                    ((Admin) userToUpdate).setRole(AdminRole.valueOf(adminRoleStr));
                }
            }

            // 2. Make a single, unified call to the UserService.
            // A corresponding method needs to be created in UserService to handle this.
            userService.updateUser(userToUpdate, newPassword);

            response.sendRedirect(request.getContextPath() + "/manage-users?success=User updated successfully");

        } catch (NumberFormatException e) {
            response.sendRedirect(request.getContextPath() + "/manage-users?error=Invalid User ID format.");
        } catch (IllegalArgumentException | SQLException e) {
            e.printStackTrace();
            response.sendRedirect(request.getContextPath() + "/manage-users?error=Update failed: " + e.getMessage());
        }
    }
}

--- main/java/dao/AdvertisementDAO.java ---

package dao;

import dao.constants.AdvertisementSQLConstants;
import factory.AdvertisementFactory;
import model.Advertisement;
import utils.DatabaseConnection;

import java.io.IOException;
import java.sql.*;
import java.time.LocalDate;
import java.util.LinkedList;

public class AdvertisementDAO {

    public static LinkedList<Advertisement> getAdvertisements() throws SQLException {
        LinkedList<Advertisement> allAds = new LinkedList<>();

        try (Connection con = DatabaseConnection.getConnection();
             PreparedStatement pstmt = con.prepareStatement(AdvertisementSQLConstants.SELECT_ALL_ADVERTISEMENTS)) {

            ResultSet rs = pstmt.executeQuery();

            while (rs.next()) {
                allAds.add(AdvertisementFactory.createAdvertisementFromResultSet(rs));
            }
        }

        return allAds;
    }

    public static LinkedList<Advertisement> getActiveAdvertisements() throws SQLException {
        LinkedList<Advertisement> activeAds = new LinkedList<>();

        try (Connection con = DatabaseConnection.getConnection();
             PreparedStatement pstmt = con.prepareStatement(AdvertisementSQLConstants.SELECT_ACTIVE_ADVERTISEMENTS)) {

            LocalDate now = LocalDate.now();
            pstmt.setDate(1, Date.valueOf(now));
            pstmt.setDate(2, Date.valueOf(now));

            ResultSet rs = pstmt.executeQuery();

            while (rs.next()) {
                activeAds.add(AdvertisementFactory.createAdvertisementFromResultSet(rs));
            }
        }

        return activeAds;
    }

    public static void addAdvertisement(Advertisement ad) throws IOException, SQLException {
        if (ad != null) {
            try (Connection con = DatabaseConnection.getConnection();
                 PreparedStatement pstmt = con.prepareStatement(
                         AdvertisementSQLConstants.INSERT_ADVERTISEMENT, Statement.RETURN_GENERATED_KEYS)) {

                pstmt.setString(1, ad.getTitle());
                pstmt.setString(2, ad.getContent());
                if (ad.getImageData() != null) {
                    pstmt.setBytes(3, ad.getImageData());
                } else {
                    pstmt.setNull(3, Types.BINARY);
                }
                pstmt.setString(4, ad.getImageUrl());
                pstmt.setDate(5, Date.valueOf(ad.getStartDate()));
                pstmt.setDate(6, Date.valueOf(ad.getEndDate()));
                pstmt.setBoolean(7, ad.isActive());

                int result = pstmt.executeUpdate();

                try (ResultSet generatedKeys = pstmt.getGeneratedKeys()) {
                    if (generatedKeys.next()) {
                        ad.setAdId(generatedKeys.getInt(1));
                    }
                }
            }
        }
    }

    public static void updateAdvertisement(int adId, String title, String content, byte[] imageData,
                                           String imageUrl, LocalDate startDate, LocalDate endDate,
                                           boolean active) throws IOException, SQLException {

        String sql = imageData != null ?
                AdvertisementSQLConstants.UPDATE_ADVERTISEMENT_WITH_IMAGE :
                AdvertisementSQLConstants.UPDATE_ADVERTISEMENT_WITHOUT_IMAGE;

        try (Connection con = DatabaseConnection.getConnection();
             PreparedStatement pstmt = con.prepareStatement(sql)) {

            pstmt.setString(1, title);
            pstmt.setString(2, content);
            pstmt.setString(3, imageUrl);
            pstmt.setDate(4, Date.valueOf(startDate));
            pstmt.setDate(5, Date.valueOf(endDate));
            pstmt.setBoolean(6, active);

            int paramIndex = 7;

            if (imageData != null) {
                pstmt.setBytes(paramIndex++, imageData);
            }

            pstmt.setInt(paramIndex, adId);

            int affectedRows = pstmt.executeUpdate();

            if (affectedRows == 0) {
                throw new SQLException("Updating advertisement failed, no rows affected.");
            }
        }
    }

    public static void deleteAdvertisement(int adId) throws IOException, SQLException {
        try (Connection con = DatabaseConnection.getConnection();
             PreparedStatement pstmt = con.prepareStatement(AdvertisementSQLConstants.DELETE_ADVERTISEMENT)) {

            pstmt.setInt(1, adId);
            int affectedRows = pstmt.executeUpdate();

            if (affectedRows == 0) {
                throw new SQLException("Deleting advertisement failed, no rows affected.");
            }
        }
    }

    public static Advertisement findAdvertisementById(int adId) throws SQLException {
        try (Connection con = DatabaseConnection.getConnection();
             PreparedStatement pstmt = con.prepareStatement(AdvertisementSQLConstants.SELECT_ADVERTISEMENT_BY_ID)) {

            pstmt.setInt(1, adId);

            try (ResultSet rs = pstmt.executeQuery()) {
                if (rs.next()) {
                    return AdvertisementFactory.createAdvertisementFromResultSet(rs);
                }
            }
        }
        return null;
    }
}

--- main/java/dao/CartDAO.java ---

package dao;

import dao.constants.CartSQLConstants;
import factory.TrackFactory;
import model.Track;
import utils.DatabaseConnection;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

public class CartDAO {

    public static void addToCart(int userId, int trackId) throws SQLException {
        try (Connection conn = DatabaseConnection.getConnection()) {
            // Check if item already exists in cart
            PreparedStatement checkStmt = conn.prepareStatement(CartSQLConstants.CHECK_CART_ITEM);
            checkStmt.setInt(1, userId);
            checkStmt.setInt(2, trackId);

            ResultSet rs = checkStmt.executeQuery();

            if (rs.next()) {
                // Item exists, update quantity
                PreparedStatement updateStmt = conn.prepareStatement(CartSQLConstants.UPDATE_CART_QUANTITY);
                updateStmt.setInt(1, userId);
                updateStmt.setInt(2, trackId);
                updateStmt.executeUpdate();
            } else {
                // Item doesn't exist, insert new
                PreparedStatement insertStmt = conn.prepareStatement(CartSQLConstants.INSERT_CART_ITEM);
                insertStmt.setInt(1, userId);
                insertStmt.setInt(2, trackId);
                insertStmt.executeUpdate();
            }
        }
    }

    public static void removeFromCart(int userId, int trackId) throws SQLException {
        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement stmt = conn.prepareStatement(CartSQLConstants.DELETE_CART_ITEM)) {

            stmt.setInt(1, userId);
            stmt.setInt(2, trackId);
            stmt.executeUpdate();
        }
    }

    public static List<Track> getCartItems(int userId) {
        List<Track> cartItems = new ArrayList<>();

        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement stmt = conn.prepareStatement(CartSQLConstants.SELECT_CART_ITEMS)) {

            stmt.setInt(1, userId);
            ResultSet rs = stmt.executeQuery();

            while (rs.next()) {
                Track track = TrackFactory.createTrackFromResultSet(rs);
                cartItems.add(track);
            }
        } catch (SQLException e) {
            System.out.println("Cannot get Cart Items Because Database Error!!");
        }
        return cartItems;
    }

    public static void clearCart(int userId, Connection conn) throws SQLException {
        try (PreparedStatement stmt = conn.prepareStatement(CartSQLConstants.CLEAR_CART)) {
            stmt.setInt(1, userId);
            stmt.executeUpdate();
        }
    }

    public static void clearCart(int userId) throws SQLException {
        try (Connection conn = DatabaseConnection.getConnection()) {
            clearCart(userId, conn);
        }
    }

    public static int getCartItemCount(int userId) throws SQLException {
        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement stmt = conn.prepareStatement(CartSQLConstants.COUNT_CART_ITEMS)) {

            stmt.setInt(1, userId);
            ResultSet rs = stmt.executeQuery();

            if (rs.next()) {
                return rs.getInt("item_count");
            }
        }
        return 0;
    }
}

--- main/java/dao/constants/AdvertisementSQLConstants.java ---

// AdvertisementSQLConstants.java
package dao.constants;

public final class AdvertisementSQLConstants {
    private AdvertisementSQLConstants() {
    }

    // Advertisement queries
    public static final String SELECT_ALL_ADVERTISEMENTS = "SELECT * FROM advertisements";
    public static final String SELECT_ACTIVE_ADVERTISEMENTS =
            "SELECT * FROM advertisements WHERE active = 1 AND startDate <= ? AND endDate >= ?";
    public static final String INSERT_ADVERTISEMENT =
            "INSERT INTO advertisements (title, content, imageData, imageUrl, startDate, endDate, active) VALUES (?, ?, ?, ?, ?, ?, ?)";
    public static final String UPDATE_ADVERTISEMENT_BASE =
            "UPDATE advertisements SET title = ?, content = ?, imageUrl = ?, startDate = ?, endDate = ?, active = ?";
    public static final String UPDATE_ADVERTISEMENT_WITH_IMAGE =
            UPDATE_ADVERTISEMENT_BASE + ", imageData = ? WHERE adId = ?";
    public static final String UPDATE_ADVERTISEMENT_WITHOUT_IMAGE =
            UPDATE_ADVERTISEMENT_BASE + " WHERE adId = ?";
    public static final String DELETE_ADVERTISEMENT = "DELETE FROM advertisements WHERE adId = ?";
    public static final String SELECT_ADVERTISEMENT_BY_ID = "SELECT * FROM advertisements WHERE adId = ?";
}

--- main/java/dao/constants/CartSQLConstants.java ---

// CartSQLConstants.java
package dao.constants;

public final class CartSQLConstants {
    private CartSQLConstants() {
    }

    // Cart queries
    public static final String CHECK_CART_ITEM = "SELECT * FROM carts WHERE user_id = ? AND track_id = ?";
    public static final String UPDATE_CART_QUANTITY = "UPDATE carts SET quantity = quantity + 1 WHERE user_id = ? AND track_id = ?";
    public static final String INSERT_CART_ITEM = "INSERT INTO carts (user_id, track_id, quantity) VALUES (?, ?, 1)";
    public static final String DELETE_CART_ITEM = "DELETE FROM carts WHERE user_id = ? AND track_id = ?";
    public static final String SELECT_CART_ITEMS =
            "SELECT t.*, u.firstName, u.lastName, ad.stage_name FROM carts c " +
                    "JOIN tracks t ON c.track_id = t.trackId " +
                    "JOIN users u ON t.artist_id = u.userId " +
                    "LEFT JOIN artist_details ad ON t.artist_id = ad.user_id " +
                    "WHERE c.user_id = ?";
    public static final String CLEAR_CART = "DELETE FROM carts WHERE user_id = ?";
    public static final String COUNT_CART_ITEMS = "SELECT COUNT(*) as item_count FROM carts WHERE user_id = ?";
}

--- main/java/dao/constants/ms-sql/AdvertisementSQLConstants.java ---

package dao.constants.ms;

public final class AdvertisementSQLConstants {
    private AdvertisementSQLConstants() {
    }

    // Advertisement queries
    public static final String SELECT_ALL_ADVERTISEMENTS = "SELECT * FROM advertisements";
    public static final String SELECT_ACTIVE_ADVERTISEMENTS =
            "SELECT * FROM advertisements WHERE active = 1 AND startDate <= ? AND endDate >= ?";
    public static final String INSERT_ADVERTISEMENT =
            "INSERT INTO advertisements (title, content, imageData, imageUrl, startDate, endDate, active) VALUES (?, ?, ?, ?, ?, ?, ?)";
    public static final String UPDATE_ADVERTISEMENT_BASE =
            "UPDATE advertisements SET title = ?, content = ?, imageUrl = ?, startDate = ?, endDate = ?, active = ?";
    public static final String UPDATE_ADVERTISEMENT_WITH_IMAGE =
            UPDATE_ADVERTISEMENT_BASE + ", imageData = ? WHERE adId = ?";
    public static final String UPDATE_ADVERTISEMENT_WITHOUT_IMAGE =
            UPDATE_ADVERTISEMENT_BASE + " WHERE adId = ?";
    public static final String DELETE_ADVERTISEMENT = "DELETE FROM advertisements WHERE adId = ?";
    public static final String SELECT_ADVERTISEMENT_BY_ID = "SELECT * FROM advertisements WHERE adId = ?";
}

--- main/java/dao/constants/ms-sql/CartSQLConstants.java ---

package dao.constants.ms;

public final class CartSQLConstants {
    private CartSQLConstants() {
    }

    // Cart queries
    public static final String CHECK_CART_ITEM = "SELECT * FROM carts WHERE user_id = ? AND track_id = ?";
    public static final String UPDATE_CART_QUANTITY = "UPDATE carts SET quantity = quantity + 1 WHERE user_id = ? AND track_id = ?";
    public static final String INSERT_CART_ITEM = "INSERT INTO carts (user_id, track_id, quantity) VALUES (?, ?, 1)";
    public static final String DELETE_CART_ITEM = "DELETE FROM carts WHERE user_id = ? AND track_id = ?";
    public static final String SELECT_CART_ITEMS =
            "SELECT t.*, c.quantity FROM carts c " +
                    "JOIN tracks t ON c.track_id = t.trackId " +
                    "WHERE c.user_id = ?";
    public static final String CLEAR_CART = "DELETE FROM carts WHERE user_id = ?";
    public static final String COUNT_CART_ITEMS = "SELECT COUNT(*) as item_count FROM carts WHERE user_id = ?";
}

--- main/java/dao/constants/ms-sql/OrderSQLConstants.java ---

package dao.constants.ms;

public final class OrderSQLConstants {
    private OrderSQLConstants() {
    }

    // Order queries
    public static final String SELECT_ALL_ORDERS = "SELECT * FROM orders ORDER BY order_date DESC";
    public static final String INSERT_ORDER =
            "INSERT INTO orders (user_id, total_amount, status, order_date, payment_method, transaction_id) VALUES (?, ?, ?, ?, ?, ?)";
    public static final String DELETE_ORDER = "DELETE FROM orders WHERE order_id = ?";
    public static final String SELECT_ORDER_BY_ID = "SELECT * FROM orders WHERE order_id = ?";
    public static final String UPDATE_ORDER_STATUS = "UPDATE orders SET status = ? WHERE order_id = ?";
}

--- main/java/dao/constants/ms-sql/PromotionSQLConstants.java ---

package dao.constants.ms;

public final class PromotionSQLConstants {
    private PromotionSQLConstants() {
    }

    // Promotion queries
    public static final String SELECT_ALL_PROMOTIONS = "SELECT * FROM promotions";
    public static final String INSERT_PROMOTION =
            "INSERT INTO promotions (code, discount, startDate, endDate, usageCount, description) VALUES (?, ?, ?, ?, ?, ?)";
    public static final String DELETE_PROMOTION = "DELETE FROM promotions WHERE promotionId = ?";
    public static final String SELECT_PROMOTION_BY_ID = "SELECT * FROM promotions WHERE promotionId = ?";
    public static final String SELECT_PROMOTION_BY_CODE = "SELECT * FROM promotions WHERE code = ?";
    public static final String UPDATE_PROMOTION =
            "UPDATE promotions SET code = ?, discount = ?, startDate = ?, endDate = ?, description = ? WHERE promotionId = ?";
    public static final String INCREMENT_USAGE_COUNT = "UPDATE promotions SET usageCount = usageCount + 1 WHERE code = ?";
    public static final String TRACK_USAGE = "SELECT COUNT(*) FROM bookings WHERE promoCode = ?";
}

--- main/java/dao/constants/ms-sql/TrackSQLConstants.java ---

package dao.constants.ms;

public final class TrackSQLConstants {
    private TrackSQLConstants() {
    }

    // Track queries
    public static final String SELECT_ALL_TRACKS = "SELECT * FROM tracks";
    public static final String SELECT_TRACKS_PAGINATED =
            "SELECT * FROM tracks ORDER BY trackId OFFSET ? ROWS FETCH NEXT ? ROWS ONLY";
    public static final String COUNT_ALL_TRACKS = "SELECT COUNT(*) FROM tracks";
    public static final String INSERT_TRACK =
            "INSERT INTO tracks (title, artist, price, genre, rating) VALUES (?, ?, ?, ?, ?)";
    public static final String DELETE_TRACK = "DELETE FROM tracks WHERE trackId = ?";
    public static final String SELECT_TRACK_BY_ID = "SELECT * FROM tracks WHERE trackId = ?";
    public static final String UPDATE_TRACK =
            "UPDATE tracks SET title = ?, artist = ?, price = ?, genre = ?, rating = ? WHERE trackId = ?";

    // Search queries
    public static final String SEARCH_TRACKS_BASE = "SELECT * FROM tracks WHERE 1=1";
    public static final String COUNT_SEARCH_TRACKS_BASE = "SELECT COUNT(*) FROM tracks WHERE 1=1";

    // Search conditions
    public static final String TITLE_LIKE_CONDITION = " AND title LIKE ?";
    public static final String GENRE_EQUAL_CONDITION = " AND genre = ?";
    public static final String MIN_PRICE_CONDITION = " AND price >= ?";
    public static final String MAX_PRICE_CONDITION = " AND price <= ?";
    public static final String RATING_CONDITION = " AND rating >= ?";
    public static final String PAGINATION = " ORDER BY trackId OFFSET ? ROWS FETCH NEXT ? ROWS ONLY";
}

--- main/java/dao/constants/ms-sql/UserSQLConstants.java ---

package dao.constants.ms;

public final class UserSQLConstants {
    private UserSQLConstants() {
    } // Prevent instantiation

    // User queries
    public static final String SELECT_ALL_USERS = "SELECT * FROM users";
    public static final String INSERT_USER =
            "INSERT INTO users (role, firstName, lastName, email, password) VALUES (?, ?, ?, ?, ?)";
    public static final String DELETE_USER = "DELETE FROM users WHERE userId = ?";
    public static final String SELECT_USER_BY_ID = "SELECT * FROM users WHERE userId = ?";
    public static final String SELECT_USER_BY_EMAIL = "SELECT * FROM users WHERE email = ?";
    public static final String UPDATE_USER =
            "UPDATE users SET firstName = ?, lastName = ?, email = ?, role = ? WHERE userId = ?";
    public static final String UPDATE_USER_PASSWORD =
            "UPDATE users SET password = ? WHERE userId = ?";

    // Genre queries
    public static final String INSERT_USER_GENRES =
            "INSERT INTO UserGenres (userId, genre) VALUES (?, ?) ON DUPLICATE KEY UPDATE genre = genre";
    public static final String DELETE_USER_GENRES = "DELETE FROM UserGenres WHERE userId = ?";
    public static final String SELECT_USER_GENRES = "SELECT genre FROM UserGenres WHERE userId = ?";

    // Admin queries
    public static final String INSERT_ADMIN_ROLE =
            "INSERT INTO AdminRoles (userId, role) VALUES (?, ?) ON DUPLICATE KEY UPDATE role = ?";
    public static final String DELETE_ADMIN_ROLE = "DELETE FROM AdminRoles WHERE userId = ?";
    public static final String SELECT_ADMIN_ROLE = "SELECT role FROM AdminRoles WHERE userId = ?";

    // Artist queries
    public static final String INSERT_ARTIST_DETAILS =
            "INSERT INTO ArtistDetails (userId, bio, specializedGenres) VALUES (?, ?, ?) " +
                    "ON DUPLICATE KEY UPDATE bio = ?, specializedGenres = ?";
    public static final String DELETE_ARTIST_DETAILS = "DELETE FROM ArtistDetails WHERE userId = ?";
    public static final String SELECT_ARTIST_GENRES =
            "SELECT specializedGenres FROM ArtistDetails WHERE userId = ?";
    public static final String SELECT_ARTIST_BIO = "SELECT bio FROM ArtistDetails WHERE userId = ?";
    public static final String MERGE_ARTIST_DETAILS =
            "MERGE INTO ArtistDetails AS target " +
                    "USING (SELECT ? AS userId, ? AS bio, ? AS specializedGenres) AS source " +
                    "ON target.userId = source.userId " +
                    "WHEN MATCHED THEN " +
                    "UPDATE SET bio = source.bio, specializedGenres = source.specializedGenres " +
                    "WHEN NOT MATCHED THEN " +
                    "INSERT (userId, bio, specializedGenres) VALUES (source.userId, source.bio, source.specializedGenres)";
    public static final String INSERT_DEFAULT_ARTIST_DETAILS =
            "INSERT IGNORE INTO ArtistDetails (userId, bio, specializedGenres) VALUES (?, '', '')";

    // Cascade delete queries
    public static final String[] CASCADE_DELETE_QUERIES = {
            "DELETE FROM UserGenres WHERE userId = ?",
            "DELETE FROM AdminRoles WHERE userId = ?",
            "DELETE FROM ArtistDetails WHERE userId = ?"
    };
}

--- main/java/dao/constants/OrderSQLConstants.java ---

// dao/constants/OrderSQLConstants.java
package dao.constants;

public final class OrderSQLConstants {
    private OrderSQLConstants() {
    }

    // Order queries
    public static final String SELECT_ALL_ORDERS = "SELECT * FROM orders ORDER BY order_date DESC";
    public static final String INSERT_ORDER =
            "INSERT INTO orders (user_id, total_amount, discount_amount, final_amount, promotion_code, status, order_date) VALUES (?, ?, ?, ?, ?, ?, ?)";
    public static final String DELETE_ORDER = "DELETE FROM orders WHERE order_id = ?";
    public static final String SELECT_ORDER_BY_ID = "SELECT * FROM orders WHERE order_id = ?";
    public static final String UPDATE_ORDER_STATUS = "UPDATE orders SET status = ? WHERE order_id = ?";
    public static final String UPDATE_ORDER_PAYMENT_DETAILS = "UPDATE orders SET payment_method = ?, transaction_id = ? WHERE order_id = ?";
}

--- main/java/dao/constants/PromotionSQLConstants.java ---

// PromotionSQLConstants.java
package dao.constants;

public final class PromotionSQLConstants {
    private PromotionSQLConstants() {
    }

    // Promotion queries
    public static final String SELECT_ALL_PROMOTIONS = "SELECT * FROM promotions";
    public static final String INSERT_PROMOTION =
            "INSERT INTO promotions (code, discount, startDate, endDate, usageCount, description) VALUES (?, ?, ?, ?, ?, ?)";
    public static final String DELETE_PROMOTION = "DELETE FROM promotions WHERE promotionId = ?";
    public static final String SELECT_PROMOTION_BY_ID = "SELECT * FROM promotions WHERE promotionId = ?";
    public static final String SELECT_PROMOTION_BY_CODE = "SELECT * FROM promotions WHERE code = ?";
    // In PromotionSQLConstants.java
    public static final String UPDATE_PROMOTION =
            "UPDATE promotions SET code = ?, discount = ?, startDate = ?, endDate = ?, usageCount = ?, description = ? WHERE promotionId = ?";
    public static final String INCREMENT_USAGE_COUNT = "UPDATE promotions SET usageCount = usageCount + 1 WHERE code = ?";
    public static final String TRACK_USAGE = "SELECT COUNT(*) FROM bookings WHERE promoCode = ?";
}

--- main/java/dao/constants/TrackSQLConstants.java ---

// TrackSQLConstants.java
package dao.constants;

public final class TrackSQLConstants {
    private TrackSQLConstants() {
    }

    // Track queries
    public static final String SELECT_ALL_TRACKS = "SELECT * FROM tracks";
    public static final String SELECT_TRACKS_PAGINATED =
            "SELECT * FROM tracks ORDER BY trackId LIMIT ? OFFSET ?";
    public static final String COUNT_ALL_TRACKS = "SELECT COUNT(*) FROM tracks";
    public static final String INSERT_TRACK =
            "INSERT INTO tracks (title, artist, price, genre, rating) VALUES (?, ?, ?, ?, ?)";
    public static final String DELETE_TRACK = "DELETE FROM tracks WHERE trackId = ?";
    public static final String SELECT_TRACK_BY_ID = "SELECT * FROM tracks WHERE trackId = ?";
    public static final String UPDATE_TRACK =
            "UPDATE tracks SET title = ?, artist = ?, price = ?, genre = ?, rating = ? WHERE trackId = ?";

    // Search queries
    public static final String SEARCH_TRACKS_BASE = "SELECT * FROM tracks WHERE 1=1";
    public static final String COUNT_SEARCH_TRACKS_BASE = "SELECT COUNT(*) FROM tracks WHERE 1=1";

    // Search conditions
    public static final String TITLE_LIKE_CONDITION = " AND title LIKE ?";
    public static final String GENRE_EQUAL_CONDITION = " AND genre = ?";
    public static final String MIN_PRICE_CONDITION = " AND price >= ?";
    public static final String MAX_PRICE_CONDITION = " AND price <= ?";
    public static final String RATING_CONDITION = " AND rating >= ?";
    public static final String PAGINATION = " ORDER BY trackId LIMIT ? OFFSET ?";
}

--- main/java/dao/constants/UserSQLConstants.java ---

package dao.constants;

public final class UserSQLConstants {
    private UserSQLConstants() {
    } // Prevent instantiation

    // User queries
    public static final String SELECT_ALL_USERS = "SELECT * FROM users";
    public static final String INSERT_USER =
            "INSERT INTO users (role, firstName, lastName, email, password) VALUES (?, ?, ?, ?, ?)";
    public static final String DELETE_USER = "DELETE FROM users WHERE userId = ?";
    public static final String SELECT_USER_BY_ID = "SELECT * FROM users WHERE userId = ?";
    public static final String SELECT_USER_BY_EMAIL = "SELECT * FROM users WHERE email = ?";
    public static final String UPDATE_USER =
            "UPDATE users SET firstName = ?, lastName = ?, email = ?, role = ? WHERE userId = ?";
    public static final String UPDATE_USER_PASSWORD =
            "UPDATE users SET password = ? WHERE userId = ?";

    // Genre queries
    public static final String INSERT_USER_GENRES =
            "INSERT INTO user_genres (userId, genre) VALUES (?, ?) ON DUPLICATE KEY UPDATE genre = genre";
    public static final String DELETE_USER_GENRES = "DELETE FROM user_genres WHERE userId = ?";
    public static final String SELECT_USER_GENRES = "SELECT genre FROM user_genres WHERE userId = ?";

    // Admin queries
    public static final String INSERT_ADMIN_ROLE =
            "INSERT INTO admin_roles (userId, role) VALUES (?, ?) ON DUPLICATE KEY UPDATE role = ?";
    public static final String DELETE_ADMIN_ROLE = "DELETE FROM admin_roles WHERE userId = ?";
    public static final String SELECT_ADMIN_ROLE = "SELECT role FROM admin_roles WHERE userId = ?";
    public static final String INSERT_DEFAULT_ADMIN_ROLE =
            "INSERT IGNORE INTO admin_roles (userId, role) VALUES (?, 'DEFAULT_ROLE')";

    // Artist queries
    public static final String SELECT_ALL_ARTISTS = "SELECT * FROM users WHERE role = 'ARTIST'";
    public static final String INSERT_DEFAULT_ARTIST_DETAILS =
            "INSERT IGNORE INTO artist_details (userId, bio) VALUES (?, '')";
    public static final String SELECT_ARTIST_DETAILS = "SELECT * FROM artist_details WHERE user_id = ?";
    public static final String UPSERT_ARTIST_DETAILS =
            "INSERT INTO artist_details (user_id, stage_name, bio) VALUES (?, ?, ?) " +
                    "ON DUPLICATE KEY UPDATE stage_name = VALUES(stage_name), bio = VALUES(bio)";
    public static final String DELETE_ARTIST_DETAILS = "DELETE FROM artist_details WHERE user_id = ?";
    public static final String SELECT_ARTIST_BY_STAGE_NAME = "SELECT * FROM artist_details WHERE stage_name = ?";
    public static final String UPDATE_ARTIST_TRACK_COUNT = "UPDATE artist_details SET total_tracks = ? WHERE user_id = ?";
    public static final String INSERT_ARTIST_GENRES = "INSERT INTO artist_genres (user_id, genre) VALUES (?, ?)";
    public static final String SELECT_ARTIST_GENRES = "SELECT genre FROM artist_genres WHERE user_id = ?";
    public static final String DELETE_ARTIST_GENRES = "DELETE FROM artist_genres WHERE user_id = ?";

    public static final String GET_ARTIST_TRACK_COUNT = "SELECT COUNT(*) FROM tracks WHERE user_id = ?";

    // Cascade delete queries
    public static final String[] CASCADE_DELETE_QUERIES = {
            "DELETE FROM user_genres WHERE userId = ?",
            "DELETE FROM admin_roles WHERE userId = ?",
            "DELETE FROM artist_details WHERE userId = ?",
            "DELETE FROM artist_genres WHERE user_id = ?"
    };
}

--- main/java/dao/OrderDAO.java ---

package dao;

import dao.constants.OrderSQLConstants;
import factory.OrderFactory;
import factory.TrackFactory;
import model.Order;
import model.Track;
import model.enums.OrderStatus;
import utils.DatabaseConnection;

import java.sql.*;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;

public class OrderDAO {

    public static List<Order> getOrders() throws SQLException {
        List<Order> allOrders = new LinkedList<>();

        try (Connection con = DatabaseConnection.getConnection();
             Statement stmt = con.createStatement();
             ResultSet rs = stmt.executeQuery(OrderSQLConstants.SELECT_ALL_ORDERS)) {

            while (rs.next()) {
                allOrders.add(OrderFactory.createOrderFromResultSet(rs));
            }
        }

        return allOrders;
    }

    public static void addOrder(Order order) throws SQLException {
        try (Connection con = DatabaseConnection.getConnection()) {
            addOrder(order, con);
        }
    }

    public static void addOrder(Order order, Connection con) throws SQLException {
        if (order == null) {
            throw new IllegalArgumentException("Order cannot be null");
        }

        // -- CORRECTED METHOD --
        try (PreparedStatement pstmt = con.prepareStatement(
                OrderSQLConstants.INSERT_ORDER, Statement.RETURN_GENERATED_KEYS)) {
            pstmt.setInt(1, order.getUserId());
            pstmt.setDouble(2, order.getTotalAmount());
            pstmt.setDouble(3, order.getDiscountAmount()); // New
            pstmt.setDouble(4, order.getFinalAmount());     // New
            pstmt.setString(5, order.getPromotionCode());   // New
            pstmt.setString(6, order.getStatus().name());
            pstmt.setTimestamp(7, Timestamp.valueOf(order.getOrderDate()));

            int result = pstmt.executeUpdate();

            try (ResultSet generatedKeys = pstmt.getGeneratedKeys()) {
                if (generatedKeys.next()) {
                    order.setOrderId(generatedKeys.getInt(1));
                }
            }
        }
    }

    public static void removeOrder(Order order) throws SQLException {
        if (order == null) {
            throw new IllegalArgumentException("Order cannot be null");
        }

        try (Connection con = DatabaseConnection.getConnection();
             PreparedStatement pstmt = con.prepareStatement(OrderSQLConstants.DELETE_ORDER)) {

            pstmt.setInt(1, order.getOrderId());
            int affectedRows = pstmt.executeUpdate();

            if (affectedRows == 0) {
                throw new SQLException("Deleting order failed, no rows affected.");
            }

            System.out.println("Order deleted successfully. Rows affected: " + affectedRows);
        }
    }

    public static Order findOrderById(int orderId) throws SQLException {
        try (Connection con = DatabaseConnection.getConnection();
             PreparedStatement pstmt = con.prepareStatement(OrderSQLConstants.SELECT_ORDER_BY_ID)) {

            pstmt.setInt(1, orderId);

            try (ResultSet rs = pstmt.executeQuery()) {
                if (rs.next()) {
                    return OrderFactory.createOrderFromResultSet(rs);
                }
            }
        }
        return null;
    }

    public static boolean hasUserPurchasedTrack(int userId, int trackId) throws SQLException {
        String sql = "SELECT COUNT(*) FROM purchased_tracks WHERE user_id = ? AND track_id = ?";
        try (Connection con = DatabaseConnection.getConnection();
             PreparedStatement pstmt = con.prepareStatement(sql)) {

            pstmt.setInt(1, userId);
            pstmt.setInt(2, trackId);

            try (ResultSet rs = pstmt.executeQuery()) {
                if (rs.next()) {
                    return rs.getInt(1) > 0;
                }
            }
        }
        return false;
    }

    public static void addPurchasedTracks(int userId, int orderId, List<Integer> trackIds, Connection con) throws SQLException {
        String sql = "INSERT INTO purchased_tracks (user_id, order_id, track_id) VALUES (?, ?, ?)";
        try (PreparedStatement pstmt = con.prepareStatement(sql)) {
            for (Integer trackId : trackIds) {
                pstmt.setInt(1, userId);
                pstmt.setInt(2, orderId); // Pass the order ID
                pstmt.setInt(3, trackId);
                pstmt.addBatch();
            }
            pstmt.executeBatch();
        }
    }

    public static void updateOrderStatus(int orderId, OrderStatus status) throws SQLException {
        try (Connection con = DatabaseConnection.getConnection();
             PreparedStatement pstmt = con.prepareStatement(OrderSQLConstants.UPDATE_ORDER_STATUS)) {

            pstmt.setString(1, status.name());
            pstmt.setInt(2, orderId);

            int affectedRows = pstmt.executeUpdate();

            if (affectedRows == 0) {
                throw new SQLException("Updating order failed, no rows affected.");
            }

            System.out.println("Order updated successfully. Rows affected: " + affectedRows);
        }
    }


    public static void updateOrderStatus(int orderId, OrderStatus status, Connection con) throws SQLException {
        try (PreparedStatement pstmt = con.prepareStatement(OrderSQLConstants.UPDATE_ORDER_STATUS)) {
            pstmt.setString(1, status.name());
            pstmt.setInt(2, orderId);

            int affectedRows = pstmt.executeUpdate();
            if (affectedRows == 0) {
                throw new SQLException("Updating order status failed, no rows affected for orderId: " + orderId);
            }
        }
    }

    public static List<Order> getOrdersByUserId(int userId) throws SQLException {
        List<Order> userOrders = new LinkedList<>();
        String sql = "SELECT * FROM orders WHERE user_id = ? ORDER BY order_date DESC";
        try (Connection con = DatabaseConnection.getConnection();
             PreparedStatement pstmt = con.prepareStatement(sql)) {
            pstmt.setInt(1, userId);
            try (ResultSet rs = pstmt.executeQuery()) {
                while (rs.next()) {
                    userOrders.add(OrderFactory.createOrderFromResultSet(rs));
                }
            }
        }
        return userOrders;
    }

    public static void updateOrderPaymentDetails(int orderId, String paymentMethod, String transactionId, Connection con) throws SQLException {
        try (PreparedStatement pstmt = con.prepareStatement(OrderSQLConstants.UPDATE_ORDER_PAYMENT_DETAILS)) {
            pstmt.setString(1, paymentMethod);
            pstmt.setString(2, transactionId);
            pstmt.setInt(3, orderId);
            pstmt.executeUpdate();
        }
    }

    public static List<Track> getTracksByOrderId(int orderId) throws SQLException {
        List<Track> tracks = new ArrayList<>();
        String sql = "SELECT t.*, u.firstName, u.lastName, ad.stage_name " +
                "FROM tracks t " +
                "JOIN users u ON t.artist_id = u.userId " +
                "LEFT JOIN artist_details ad ON t.artist_id = ad.user_id " +
                "JOIN purchased_tracks pt ON t.trackId = pt.track_id " +
                "WHERE pt.order_id = ?"; //

        try (Connection con = DatabaseConnection.getConnection();
             PreparedStatement pstmt = con.prepareStatement(sql)) {
            pstmt.setInt(1, orderId);
            try (ResultSet rs = pstmt.executeQuery()) {
                while (rs.next()) {
                    tracks.add(TrackFactory.createTrackFromResultSet(rs));
                }
            }
        }
        return tracks;
    }

}

--- main/java/dao/PaymentDAO.java ---

package dao;

import model.Payment;
import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class PaymentDAO {

    public static List<Payment> getAllPayments() throws SQLException {
        List<Payment> payments = new ArrayList<>();
        String sql = "SELECT * FROM payments ORDER BY payment_date DESC";
        try (Connection con = utils.DatabaseConnection.getConnection();
             PreparedStatement pstmt = con.prepareStatement(sql);
             ResultSet rs = pstmt.executeQuery()) {

            while (rs.next()) {
                Payment payment = new Payment();
                payment.setPaymentId(rs.getInt("payment_id"));
                payment.setOrderId(rs.getInt("order_id"));
                payment.setAmount(rs.getDouble("amount"));
                payment.setPaymentDate(rs.getTimestamp("payment_date").toLocalDateTime());
                payment.setPaymentMethod(rs.getString("payment_method"));
                payment.setTransactionId(rs.getString("transaction_id"));
                payment.setStatus(rs.getString("status"));
                payments.add(payment);
            }
        }
        return payments;
    }

    public static void addPayment(Payment payment, Connection con) throws SQLException {
        String sql = "INSERT INTO payments (order_id, amount, payment_date, payment_method, transaction_id, status) VALUES (?, ?, ?, ?, ?, ?)";
        try (PreparedStatement pstmt = con.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {
            pstmt.setInt(1, payment.getOrderId());
            pstmt.setDouble(2, payment.getAmount());
            pstmt.setTimestamp(3, Timestamp.valueOf(payment.getPaymentDate()));
            pstmt.setString(4, payment.getPaymentMethod());
            pstmt.setString(5, payment.getTransactionId());
            pstmt.setString(6, payment.getStatus());
            pstmt.executeUpdate();

            try (ResultSet generatedKeys = pstmt.getGeneratedKeys()) {
                if (generatedKeys.next()) {
                    payment.setPaymentId(generatedKeys.getInt(1));
                }
            }
        }
    }

    public static void updatePaymentStatusByOrderId(int orderId, String status, Connection con) throws SQLException {
        String sql = "UPDATE payments SET status = ? WHERE order_id = ?";
        try (PreparedStatement pstmt = con.prepareStatement(sql)) {
            pstmt.setString(1, status);
            pstmt.setInt(2, orderId);
            pstmt.executeUpdate();
        }
    }

    public static Payment getPaymentByOrderId(int orderId, Connection con) throws SQLException {
        String sql = "SELECT * FROM payments WHERE order_id = ?";
        try (PreparedStatement pstmt = con.prepareStatement(sql)) {
            pstmt.setInt(1, orderId);
            try (ResultSet rs = pstmt.executeQuery()) {
                if (rs.next()) {
                    Payment payment = new Payment();
                    payment.setPaymentId(rs.getInt("payment_id"));
                    payment.setOrderId(rs.getInt("order_id"));
                    payment.setAmount(rs.getDouble("amount"));
                    payment.setPaymentDate(rs.getTimestamp("payment_date").toLocalDateTime());
                    payment.setPaymentMethod(rs.getString("payment_method"));
                    payment.setTransactionId(rs.getString("transaction_id"));
                    payment.setStatus(rs.getString("status"));
                    return payment;
                }
            }
        }
        return null;
    }

    public static Payment getPaymentById(int paymentId, Connection con) throws SQLException {
        String sql = "SELECT * FROM payments WHERE payment_id = ?";
        try (PreparedStatement pstmt = con.prepareStatement(sql)) {
            pstmt.setInt(1, paymentId);
            try (ResultSet rs = pstmt.executeQuery()) {
                if (rs.next()) {
                    Payment payment = new Payment();
                    payment.setPaymentId(rs.getInt("payment_id"));
                    payment.setOrderId(rs.getInt("order_id"));
                    payment.setAmount(rs.getDouble("amount"));
                    payment.setPaymentDate(rs.getTimestamp("payment_date").toLocalDateTime());
                    payment.setPaymentMethod(rs.getString("payment_method"));
                    payment.setTransactionId(rs.getString("transaction_id"));
                    payment.setStatus(rs.getString("status"));
                    return payment;
                }
            }
        }
        return null;
    }
}


--- main/java/dao/PostDAO.java ---

package dao;

import model.Post;
import utils.DatabaseConnection;

import java.io.File;
import java.io.IOException;
import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class PostDAO {
    // Create a new post
    public static void createPost(Post post) throws SQLException {
        String sql = "INSERT INTO posts (userId, authorName, title, description, image1Data, image1Type, image2Data, image2Type, image3Data, image3Type, status, createdAt, updatedAt) " +
                "VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)";
        try (Connection con = DatabaseConnection.getConnection();
             PreparedStatement pstmt = con.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {

            pstmt.setInt(1, post.getUserId());
            pstmt.setString(2, post.getAuthorName());
            pstmt.setString(3, post.getTitle());
            pstmt.setString(4, post.getDescription());
            pstmt.setBytes(5, post.getImage1Data());
            pstmt.setString(6, post.getImage1Type());
            pstmt.setBytes(7, post.getImage2Data());
            pstmt.setString(8, post.getImage2Type());
            pstmt.setBytes(9, post.getImage3Data());
            pstmt.setString(10, post.getImage3Type());
            pstmt.setString(11, post.getStatus());

            int result = pstmt.executeUpdate();
            System.out.println("Post created. Rows affected: " + result);

            try (ResultSet generatedKeys = pstmt.getGeneratedKeys()) {
                if (generatedKeys.next()) {
                    post.setPostId(generatedKeys.getInt(1));
                }
            }
        }
    }

    // Get all approved posts for public view
    public static List<Post> getAllApprovedPosts() throws SQLException {
        List<Post> posts = new ArrayList<>();
        String sql = "SELECT * FROM posts WHERE status = 'approved' ORDER BY createdAt DESC";
        try (Connection con = DatabaseConnection.getConnection();
             PreparedStatement pstmt = con.prepareStatement(sql);
             ResultSet rs = pstmt.executeQuery()) {

            while (rs.next()) {
                posts.add(createPostFromResultSet(rs));
            }
        }

        return posts;
    }

    // Get all posts for admin (all statuses)
    public static List<Post> getAllPostsForAdmin() throws SQLException {
        List<Post> posts = new ArrayList<>();
        String sql = "SELECT * FROM posts ORDER BY createdAt DESC";
        try (Connection con = DatabaseConnection.getConnection();
             PreparedStatement pstmt = con.prepareStatement(sql);
             ResultSet rs = pstmt.executeQuery()) {

            while (rs.next()) {
                posts.add(createPostFromResultSet(rs));
            }
        }

        return posts;
    }

    // Get pending posts for admin approval
    public static List<Post> getPendingPosts() throws SQLException {
        List<Post> posts = new ArrayList<>();
        String sql = "SELECT * FROM posts WHERE status = 'pending' ORDER BY createdAt DESC";
        try (Connection con = DatabaseConnection.getConnection();
             PreparedStatement pstmt = con.prepareStatement(sql);
             ResultSet rs = pstmt.executeQuery()) {

            while (rs.next()) {
                posts.add(createPostFromResultSet(rs));
            }
        }

        return posts;
    }

    // Get posts by user ID
    public static List<Post> getPostsByUserId(int userId) throws SQLException {
        List<Post> posts = new ArrayList<>();
        String sql = "SELECT * FROM posts WHERE userId = ? ORDER BY createdAt DESC";
        try (Connection con = DatabaseConnection.getConnection();
             PreparedStatement pstmt = con.prepareStatement(sql)) {

            pstmt.setInt(1, userId);
            try (ResultSet rs = pstmt.executeQuery()) {
                while (rs.next()) {
                    posts.add(createPostFromResultSet(rs));
                }
            }
        }

        return posts;
    }

    // Get post by ID
    public static Post getPostById(int postId) throws SQLException {
        String sql = "SELECT * FROM posts WHERE postId = ?";
        try (Connection con = DatabaseConnection.getConnection();
             PreparedStatement pstmt = con.prepareStatement(sql)) {

            pstmt.setInt(1, postId);
            try (ResultSet rs = pstmt.executeQuery()) {
                if (rs.next()) {
                    return createPostFromResultSet(rs);
                }
            }
        }

        return null;
    }

    // Update post
    public static void updatePost(Post post) throws SQLException {
        String sql = "UPDATE posts SET title = ?, description = ?, image1Data = ?, image1Type = ?, image2Data = ?, image2Type = ?, image3Data = ?, image3Type = ?, status = ?, updatedAt = CURRENT_TIMESTAMP WHERE postId = ?";
        try (Connection con = DatabaseConnection.getConnection();
             PreparedStatement pstmt = con.prepareStatement(sql)) {

            pstmt.setString(1, post.getTitle());
            pstmt.setString(2, post.getDescription());
            pstmt.setBytes(3, post.getImage1Data());
            pstmt.setString(4, post.getImage1Type());
            pstmt.setBytes(5, post.getImage2Data());
            pstmt.setString(6, post.getImage2Type());
            pstmt.setBytes(7, post.getImage3Data());
            pstmt.setString(8, post.getImage3Type());
            pstmt.setString(9, post.getStatus());
            pstmt.setInt(10, post.getPostId());

            int result = pstmt.executeUpdate();
            System.out.println("Post updated. Rows affected: " + result);
        }
    }

    // Update post status (for admin approval/rejection)
    public static void updatePostStatus(int postId, String status) throws SQLException {
        String sql = "UPDATE posts SET status = ?, updatedAt = CURRENT_TIMESTAMP WHERE postId = ?";
        try (Connection con = DatabaseConnection.getConnection();
             PreparedStatement pstmt = con.prepareStatement(sql)) {

            pstmt.setString(1, status);
            pstmt.setInt(2, postId);

            int result = pstmt.executeUpdate();
            System.out.println("Post status updated to " + status + ". Rows affected: " + result);
        }
    }

    // Delete post (DB only - kept for backward compatibility)
    public static void deletePost(int postId) throws SQLException {
        String sql = "DELETE FROM posts WHERE postId = ?";
        try (Connection con = DatabaseConnection.getConnection();
             PreparedStatement pstmt = con.prepareStatement(sql)) {

            pstmt.setInt(1, postId);
            int result = pstmt.executeUpdate();
            System.out.println("Post deleted. Rows affected: " + result);
        }
    }

    public static List<Post> getRecentApprovedPosts(int limit) throws SQLException {
        List<Post> posts = new ArrayList<>();
        String sql = "SELECT * FROM posts WHERE status = 'approved' ORDER BY createdAt DESC LIMIT ?";
        try (Connection con = DatabaseConnection.getConnection();
             PreparedStatement pstmt = con.prepareStatement(sql)) {

            pstmt.setInt(1, limit);
            try (ResultSet rs = pstmt.executeQuery()) {
                while (rs.next()) {
                    posts.add(createPostFromResultSet(rs));
                }
            }
        }
        return posts;
    }

    /**
     * New: Delete a post and attempt to remove its image files from the webapp uploads directory.
     * @param postId the post to delete
     * @param webRootAbsolutePath absolute path to the deployed webapp root (e.g., getServletContext().getRealPath(""))
     */
    public static void deletePostAndFiles(int postId, String webRootAbsolutePath) throws SQLException {
        String selectSql = "SELECT image1Path, image2Path, image3Path FROM posts WHERE postId = ?";
        String deleteSql = "DELETE FROM posts WHERE postId = ?";

        String img1 = null, img2 = null, img3 = null;
        try (Connection con = DatabaseConnection.getConnection()) {
            con.setAutoCommit(false);
            // 1) Read image paths
            try (PreparedStatement psSel = con.prepareStatement(selectSql)) {
                psSel.setInt(1, postId);
                try (ResultSet rs = psSel.executeQuery()) {
                    if (rs.next()) {
                        img1 = rs.getString("image1Path");
                        img2 = rs.getString("image2Path");
                        img3 = rs.getString("image3Path");
                    } else {
                        // Nothing to delete
                        con.rollback();
                        return;
                    }
                }
            }

            // 2) Delete DB row
            try (PreparedStatement psDel = con.prepareStatement(deleteSql)) {
                psDel.setInt(1, postId);
                psDel.executeUpdate();
            }

            con.commit();
            // 3) Try deleting files on disk (best-effort, outside DB transaction)
            safeDelete(webRootAbsolutePath, img1);
            safeDelete(webRootAbsolutePath, img2);
            safeDelete(webRootAbsolutePath, img3);
        } catch (SQLException e) {
            throw e;
        }
    }

    // Helper method to create Post object from ResultSet
    private static Post createPostFromResultSet(ResultSet rs) throws SQLException {
        return new Post(
                rs.getInt("postId"),
                rs.getInt("userId"),
                rs.getString("authorName"),
                rs.getString("title"),
                rs.getString("description"),
                rs.getBytes("image1Data"),
                rs.getString("image1Type"),
                rs.getBytes("image2Data"),
                rs.getString("image2Type"),
                rs.getBytes("image3Data"),
                rs.getString("image3Type"),
                rs.getString("status"),
                rs.getTimestamp("createdAt"),
                rs.getTimestamp("updatedAt")
        );
    }

    // File deletion helpers

    /**
     * Deletes a relative path like "uploads/posts/abc.jpg" under the web root.
     * Ensures we only delete inside the /uploads directory to prevent traversal issues.
     */
    private static void safeDelete(String webRootAbsolutePath, String relativePath) {
        if (relativePath == null || relativePath.isEmpty()) return;
        try {
            File webRoot = new File(webRootAbsolutePath);
            File uploadsRoot = new File(webRoot, "uploads"); // only allow deletions under /uploads

            File target = new File(webRoot, relativePath);
            String targetCanon = target.getCanonicalPath();
            String uploadsCanon = uploadsRoot.getCanonicalPath();

            // Only delete if target is actually inside /uploads
            if (targetCanon.startsWith(uploadsCanon) && target.exists() && target.isFile()) {
                boolean ok = target.delete();
                System.out.println("[PostDAO] Delete file " + targetCanon + " -> " + ok);
            } else {
                System.out.println("[PostDAO] Skip delete (outside uploads or not found): " + targetCanon);
            }
        } catch (IOException e) {
            System.out.println("[PostDAO] Error resolving file for deletion: " + e.getMessage());
        }
    }
}

--- main/java/dao/PromotionDAO.java ---

package dao;

import dao.constants.PromotionSQLConstants;
import factory.PromotionFactory;
import model.Promotion;
import utils.DatabaseConnection;

import java.io.IOException;
import java.sql.*;
import java.time.LocalDate;
import java.util.LinkedList;

public class PromotionDAO {

    public static LinkedList<Promotion> getPromotions() throws SQLException {
        LinkedList<Promotion> allPromotions = new LinkedList<>();

        try (Connection con = DatabaseConnection.getConnection();
             PreparedStatement pstmt = con.prepareStatement(PromotionSQLConstants.SELECT_ALL_PROMOTIONS)) {

            ResultSet rs = pstmt.executeQuery();

            while (rs.next()) {
                allPromotions.add(PromotionFactory.createPromotionFromResultSet(rs));
            }
        }

        return allPromotions;
    }

    public static void addPromotion(Promotion promotion) throws IOException, SQLException {
        if (promotion != null) {
            try (Connection con = DatabaseConnection.getConnection();
                 PreparedStatement pstmt = con.prepareStatement(
                         PromotionSQLConstants.INSERT_PROMOTION, Statement.RETURN_GENERATED_KEYS)) {

                System.out.println("Connected to Database!");

                pstmt.setString(1, promotion.getCode());
                pstmt.setDouble(2, promotion.getDiscount());
                pstmt.setDate(3, Date.valueOf(promotion.getStartDate()));
                pstmt.setDate(4, Date.valueOf(promotion.getEndDate()));
                pstmt.setInt(5, promotion.getUsageCount());
                pstmt.setString(6, promotion.getDescription());

                int result = pstmt.executeUpdate();

                System.out.println("Number of changes made " + result);

                try (ResultSet generatedKeys = pstmt.getGeneratedKeys()) {
                    if (generatedKeys.next()) {
                        promotion.setPromotionId(generatedKeys.getInt(1));
                    }
                }
            }
        }
    }

    public static void removePromotion(Promotion promotion) throws IOException, SQLException {
        if (promotion == null) {
            throw new IllegalArgumentException("Promotion cannot be null");
        }

        try (Connection con = DatabaseConnection.getConnection();
             PreparedStatement pstmt = con.prepareStatement(PromotionSQLConstants.DELETE_PROMOTION)) {

            pstmt.setInt(1, promotion.getPromotionId());
            int affectedRows = pstmt.executeUpdate();

            if (affectedRows == 0) {
                throw new SQLException("Deleting promotion failed, no rows affected.");
            }

            System.out.println("Promotion deleted successfully. Rows affected: " + affectedRows);
        }
    }

    public static Promotion findPromotionById(int promotionId) throws SQLException {
        try (Connection con = DatabaseConnection.getConnection();
             PreparedStatement pstmt = con.prepareStatement(PromotionSQLConstants.SELECT_PROMOTION_BY_ID)) {

            pstmt.setInt(1, promotionId);

            try (ResultSet rs = pstmt.executeQuery()) {
                if (rs.next()) {
                    return PromotionFactory.createPromotionFromResultSet(rs);
                }
            }
        }
        return null;
    }

    public static Promotion findPromotionByCode(String code) throws SQLException {
        try (Connection con = DatabaseConnection.getConnection();
             PreparedStatement pstmt = con.prepareStatement(PromotionSQLConstants.SELECT_PROMOTION_BY_CODE)) {

            pstmt.setString(1, code);

            try (ResultSet rs = pstmt.executeQuery()) {
                if (rs.next()) {
                    return PromotionFactory.createPromotionFromResultSet(rs);
                }
            }
        }
        return null;
    }

    public static void updatePromotion(int promotionId, String code, double discount,
                                       LocalDate startDate, LocalDate endDate, int usageCount, String description)
            throws IOException, SQLException {
        try (Connection con = DatabaseConnection.getConnection();
             PreparedStatement pstmt = con.prepareStatement(PromotionSQLConstants.UPDATE_PROMOTION)) {

            pstmt.setString(1, code);
            pstmt.setDouble(2, discount);
            pstmt.setDate(3, Date.valueOf(startDate));
            pstmt.setDate(4, Date.valueOf(endDate));
            pstmt.setInt(5, usageCount); // Add this line
            pstmt.setString(6, description); // Changed from 5 to 6
            pstmt.setInt(7, promotionId); // Changed from 6 to 7

            int affectedRows = pstmt.executeUpdate();

            if (affectedRows == 0) {
                throw new SQLException("Updating promotion failed, no rows affected.");
            }

            System.out.println("Promotion updated successfully. Rows affected: " + affectedRows);
        }
    }

    public static void incrementUsageCount(String code) throws SQLException {
        try (Connection con = DatabaseConnection.getConnection();
             PreparedStatement pstmt = con.prepareStatement(PromotionSQLConstants.INCREMENT_USAGE_COUNT)) {

            pstmt.setString(1, code);

            int affectedRows = pstmt.executeUpdate();

            if (affectedRows == 0) {
                throw new SQLException("Updating usage count failed, no rows affected.");
            }

            System.out.println("Promotion usage count incremented successfully. Rows affected: " + affectedRows);
        }
    }

    public static int trackUsage(String code) throws SQLException {
        try (Connection con = DatabaseConnection.getConnection();
             PreparedStatement pstmt = con.prepareStatement(PromotionSQLConstants.TRACK_USAGE)) {

            pstmt.setString(1, code);

            try (ResultSet rs = pstmt.executeQuery()) {
                if (rs.next()) {
                    return rs.getInt(1);
                }
            }
        }
        return 0;
    }

    public static Promotion findValidByCode(String code) throws SQLException {
        String sql = "SELECT promotionId, code, discount, startDate, endDate, usageCount, description FROM promotions WHERE UPPER(code) = UPPER(?) AND startDate <= CURDATE() AND endDate >= CURDATE()";
        try (Connection con = DatabaseConnection.getConnection();
             PreparedStatement pstmt = con.prepareStatement(sql)) {
            pstmt.setString(1, code);
            try (ResultSet rs = pstmt.executeQuery()) {
                if (rs.next()) {
                    return PromotionFactory.createPromotionFromResultSet(rs);
                }
            }
        }
        return null;
    }

}

--- main/java/dao/TrackDAO.java ---

package dao;

import dao.constants.TrackSQLConstants;
import factory.TrackFactory;
import model.Track;
import model.enums.TrackStatus;
import utils.DatabaseConnection;

import java.sql.*;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;

public class TrackDAO {

    private static final String SELECT_BASE = "SELECT t.*, u.firstName, u.lastName, ad.stage_name FROM tracks t JOIN users u ON t.artist_id = u.userId LEFT JOIN artist_details ad ON t.artist_id = ad.user_id";

    /**
     * Fetches ONLY APPROVED tracks for the public-facing pages with pagination.
     */
    public static List<Track> getApprovedTracksPaginated(int page, int pageSize) throws SQLException {
        List<Track> tracks = new ArrayList<>();
        String sql = SELECT_BASE + " WHERE t.status = 'APPROVED' ORDER BY t.trackId LIMIT ? OFFSET ?";
        try (Connection con = DatabaseConnection.getConnection();
             PreparedStatement pstmt = con.prepareStatement(sql)) {

            pstmt.setInt(1, pageSize);
            pstmt.setInt(2, (page - 1) * pageSize);

            try (ResultSet rs = pstmt.executeQuery()) {
                while (rs.next()) {
                    tracks.add(TrackFactory.createTrackFromResultSet(rs));
                }
            }
        }
        return tracks;
    }

    /**
     * Counts ONLY APPROVED tracks for public pagination.
     */
    public static int countApprovedTracks() throws SQLException {
        try (Connection con = DatabaseConnection.getConnection();
             PreparedStatement pstmt = con.prepareStatement("SELECT COUNT(*) FROM tracks WHERE status = 'APPROVED'");
             ResultSet rs = pstmt.executeQuery()) {
            if (rs.next()) {
                return rs.getInt(1);
            }
        }
        return 0;
    }

    /**
     * Fetches ALL tracks regardless of status for the admin panel.
     */
    public static List<Track> getAllTracksForAdmin() throws SQLException {
        List<Track> tracks = new LinkedList<>();
        String sql = SELECT_BASE + " ORDER BY t.trackId DESC";
        try (Connection con = DatabaseConnection.getConnection();
             PreparedStatement pstmt = con.prepareStatement(sql);
             ResultSet rs = pstmt.executeQuery()) {

            while (rs.next()) {
                tracks.add(TrackFactory.createTrackFromResultSet(rs));
            }
        }
        return tracks;
    }

    public static void addTrack(Track track) throws SQLException {
        if (track == null) return;
        // The `status` column has a DEFAULT of 'PENDING', so we don't need to specify it on insert.
        String sql = "INSERT INTO tracks (title, price, genre, rating, artist_id, full_track_data, cover_art_data, cover_art_type, duration, release_date) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (Connection con = DatabaseConnection.getConnection();
             PreparedStatement pstmt = con.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {

            pstmt.setString(1, track.getTitle());
            pstmt.setDouble(2, track.getPrice());
            pstmt.setString(3, track.getGenre());
            pstmt.setDouble(4, track.getRating());
            pstmt.setInt(5, track.getArtistId());
            pstmt.setBytes(6, track.getFullTrackData());
            pstmt.setBytes(7, track.getCoverArtData());
            pstmt.setString(8, track.getCoverArtType());
            pstmt.setInt(9, track.getDuration());
            pstmt.setDate(10, track.getReleaseDate() != null ? Date.valueOf(track.getReleaseDate()) : null);
            pstmt.executeUpdate();

            try (ResultSet generatedKeys = pstmt.getGeneratedKeys()) {
                if (generatedKeys.next()) {
                    track.setTrackId(generatedKeys.getInt(1));
                }
            }
        }
    }

    public static void updateTrackStatus(int trackId, TrackStatus status) throws SQLException {
        String sql = "UPDATE tracks SET status = ? WHERE trackId = ?";
        try (Connection con = DatabaseConnection.getConnection();
             PreparedStatement pstmt = con.prepareStatement(sql)) {
            pstmt.setString(1, status.name());
            pstmt.setInt(2, trackId);
            pstmt.executeUpdate();
        }
    }

    public static void removeTrack(int trackId) throws SQLException {
        try (Connection con = DatabaseConnection.getConnection();
             PreparedStatement pstmt = con.prepareStatement(TrackSQLConstants.DELETE_TRACK)) {
            pstmt.setInt(1, trackId);
            pstmt.executeUpdate();
        }
    }

    public static Track findTrackById(int trackId) throws SQLException {
        String sql = SELECT_BASE + " WHERE t.trackId = ?";
        try (Connection con = DatabaseConnection.getConnection();
             PreparedStatement pstmt = con.prepareStatement(sql)) {
            pstmt.setInt(1, trackId);
            try (ResultSet rs = pstmt.executeQuery()) {
                if (rs.next()) {
                    return TrackFactory.createTrackFromResultSet(rs);
                }
            }
        }
        return null;
    }

    public static void updateTrack(Track track) throws SQLException {
        if (track == null) return;
        String sql = "UPDATE tracks SET title = ?, price = ?, genre = ?, rating = ?, artist_id = ?, duration = ?, release_date = ? " +
                (track.getFullTrackData() != null ? ", full_track_data = ? " : "") +
                (track.getCoverArtData() != null ? ", cover_art_data = ?, cover_art_type = ? " : "") +
                "WHERE trackId = ?";
        try (Connection con = DatabaseConnection.getConnection();
             PreparedStatement pstmt = con.prepareStatement(sql)) {

            int paramIndex = 1;
            pstmt.setString(paramIndex++, track.getTitle());
            pstmt.setDouble(paramIndex++, track.getPrice());
            pstmt.setString(paramIndex++, track.getGenre());
            pstmt.setDouble(paramIndex++, track.getRating());
            pstmt.setInt(paramIndex++, track.getArtistId());
            pstmt.setInt(paramIndex++, track.getDuration());
            pstmt.setDate(paramIndex++, track.getReleaseDate() != null ? Date.valueOf(track.getReleaseDate()) : null);
            if (track.getFullTrackData() != null) {
                pstmt.setBytes(paramIndex++, track.getFullTrackData());
            }
            if (track.getCoverArtData() != null) {
                pstmt.setBytes(paramIndex++, track.getCoverArtData());
                pstmt.setString(paramIndex++, track.getCoverArtType());
            }

            pstmt.setInt(paramIndex, track.getTrackId());
            pstmt.executeUpdate();
        }
    }

    // Unchanged methods below...
    public static List<Track> searchProducts(String title, String genre, Double minPrice, Double maxPrice, Double rating, int page, int pageSize) {
        List<Track> list = new ArrayList<>();
        // IMPORTANT: Add status filter to public search
        StringBuilder sql = new StringBuilder(SELECT_BASE + " WHERE t.status = 'APPROVED'");
        List<Object> params = new ArrayList<>();

        if (title != null && !title.trim().isEmpty()) {
            sql.append(" AND t.title LIKE ?");
            params.add("%" + title.trim() + "%");
        }
        if (genre != null && !genre.isEmpty()) {
            sql.append(" AND t.genre = ?");
            params.add(genre);
        }
        if (minPrice != null) {
            sql.append(" AND t.price >= ?");
            params.add(minPrice);
        }
        if (maxPrice != null) {
            sql.append(" AND t.price <= ?");
            params.add(maxPrice);
        }
        if (rating != null) {
            sql.append(" AND t.rating >= ?");
            params.add(rating);
        }

        sql.append(" ORDER BY t.trackId LIMIT ? OFFSET ?");
        params.add(pageSize);
        params.add((page - 1) * pageSize);

        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement ps = conn.prepareStatement(sql.toString())) {

            for (int i = 0; i < params.size(); i++) {
                ps.setObject(i + 1, params.get(i));
            }

            try (ResultSet rs = ps.executeQuery()) {
                while (rs.next()) {
                    list.add(TrackFactory.createTrackFromResultSet(rs));
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return list;
    }

    public static int countProducts(String title, String genre, Double minPrice, Double maxPrice, Double minRating) {
        // IMPORTANT: Add status filter to public search count
        StringBuilder sql = new StringBuilder("SELECT COUNT(*) FROM tracks WHERE status = 'APPROVED'");
        List<Object> params = new ArrayList<>();
        if (title != null && !title.trim().isEmpty()) {
            sql.append(" AND title LIKE ?");
            params.add("%" + title.trim() + "%");
        }
        if (genre != null && !genre.isEmpty()) {
            sql.append(" AND genre = ?");
            params.add(genre);
        }
        if (minPrice != null) {
            sql.append(" AND price >= ?");
            params.add(minPrice);
        }
        if (maxPrice != null) {
            sql.append(" AND price <= ?");
            params.add(maxPrice);
        }
        if (minRating != null) {
            sql.append(" AND rating >= ?");
            params.add(minRating);
        }

        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement ps = conn.prepareStatement(sql.toString())) {

            for (int i = 0; i < params.size(); i++) {
                ps.setObject(i + 1, params.get(i));
            }

            try (ResultSet rs = ps.executeQuery()) {
                if (rs.next()) return rs.getInt(1);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return 0;
    }

    public static List<Track> getTracksByArtistId(int artistId) throws SQLException {
        List<Track> tracks = new LinkedList<>();
        String sql = SELECT_BASE + " WHERE t.artist_id = ?";
        try (Connection con = DatabaseConnection.getConnection();
             PreparedStatement pstmt = con.prepareStatement(sql)) {

            pstmt.setInt(1, artistId);
            try (ResultSet rs = pstmt.executeQuery()) {
                while (rs.next()) {
                    tracks.add(TrackFactory.createTrackFromResultSet(rs));
                }
            }
        }
        return tracks;
    }

    public static List<Track> getPurchasedTracksByUserId(int userId) throws SQLException {
        List<Track> purchasedTracks = new ArrayList<>();
        String sql = "SELECT t.*, u.firstName, u.lastName, ad.stage_name " +
                "FROM purchased_tracks pt " +
                "JOIN tracks t ON pt.track_id = t.trackId " +
                "JOIN users u ON t.artist_id = u.userId " +
                "LEFT JOIN artist_details ad ON u.userId = ad.user_id " +
                "WHERE pt.user_id = ? " +
                "ORDER BY pt.purchase_date DESC";
        try (Connection con = DatabaseConnection.getConnection();
             PreparedStatement pstmt = con.prepareStatement(sql)) {

            pstmt.setInt(1, userId);
            try (ResultSet rs = pstmt.executeQuery()) {
                while (rs.next()) {
                    purchasedTracks.add(TrackFactory.createTrackFromResultSet(rs));
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            throw e;
        }

        return purchasedTracks;
    }
}

--- main/java/dao/UserDAO.java ---

package dao;

import dao.constants.UserSQLConstants;
import factory.UserFactory;
import model.Admin;
import model.Artist;
import model.User;
import model.enums.AdminRole;
import utils.DatabaseConnection;
import utils.PasswordUtil;

import java.io.IOException;
import java.sql.*;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;

public class UserDAO {

    public static LinkedList<User> getUsers() throws SQLException {
        LinkedList<User> allUsers = new LinkedList<>();
        try (Connection con = DatabaseConnection.getConnection();
             PreparedStatement pstmt = con.prepareStatement(UserSQLConstants.SELECT_ALL_USERS)) {
            ResultSet rs = pstmt.executeQuery();
            while (rs.next()) {
                allUsers.add(UserFactory.createUserFromResultSet(rs));
            }
        }
        return allUsers;
    }

    public static List<Artist> getAllArtists() throws SQLException {
        List<Artist> artists = new ArrayList<>();
        try (Connection con = DatabaseConnection.getConnection();
             PreparedStatement pstmt = con.prepareStatement(UserSQLConstants.SELECT_ALL_ARTISTS)) {
            ResultSet rs = pstmt.executeQuery();
            while (rs.next()) {
                artists.add((Artist) UserFactory.createUserFromResultSet(rs));
            }
        }
        return artists;
    }

    public static void addUser(User user) throws IOException, SQLException {
        Connection con = null;
        try {
            con = DatabaseConnection.getConnection();
            con.setAutoCommit(false);

            try (PreparedStatement pstmt = con.prepareStatement(UserSQLConstants.INSERT_USER, Statement.RETURN_GENERATED_KEYS)) {
                pstmt.setString(1, user.getUserType().name());
                pstmt.setString(2, user.getFirstName());
                pstmt.setString(3, user.getLastName());
                pstmt.setString(4, user.getEmail());
                pstmt.setString(5, user.getPassword());
                pstmt.executeUpdate();

                try (ResultSet generatedKeys = pstmt.getGeneratedKeys()) {
                    if (generatedKeys.next()) {
                        user.setUserId(generatedKeys.getInt(1));
                    }
                }
            }

            if (user instanceof Artist artist) {
                saveArtistDetails(artist, con);
            } else if (user instanceof Admin admin && admin.getRole() != null) {
                updateAdminRole(admin.getUserId(), admin.getRole());
            }

            con.commit();
        } catch (SQLException e) {
            if (con != null) con.rollback();
            throw e;
        } finally {
            if (con != null) {
                con.setAutoCommit(true);
                con.close();
            }
        }
    }

    public static void updateUser(User user) throws SQLException, IOException {
        Connection con = null;
        try {
            con = DatabaseConnection.getConnection();
            con.setAutoCommit(false); // Start transaction

            try (PreparedStatement pstmt = con.prepareStatement(UserSQLConstants.UPDATE_USER)) {
                pstmt.setString(1, user.getFirstName());
                pstmt.setString(2, user.getLastName());
                pstmt.setString(3, user.getEmail());
                pstmt.setString(4, user.getUserType().name());
                pstmt.setInt(5, user.getUserId());
                pstmt.executeUpdate();
            }

            if (user instanceof Artist artist) {
                saveArtistDetails(artist, con);
            }

            con.commit();
        } catch (SQLException e) {
            if (con != null) con.rollback();
            throw e;
        } finally {
            if (con != null) {
                con.setAutoCommit(true);
                con.close();
            }
        }
    }

    private static void saveArtistDetails(Artist artist, Connection con) throws SQLException {
        try (PreparedStatement pstmt = con.prepareStatement(UserSQLConstants.UPSERT_ARTIST_DETAILS)) {
            pstmt.setInt(1, artist.getUserId());
            pstmt.setString(2, artist.getStageName());
            pstmt.setString(3, artist.getBio());

            pstmt.executeUpdate();
        }
    }

    public static boolean isStageNameTaken(String stageName, int currentUserId) throws SQLException {
        if (stageName == null || stageName.trim().isEmpty()) {
            return false;
        }
        String sql = "SELECT COUNT(*) FROM artist_details ad JOIN users u ON ad.user_id = u.userId WHERE ad.stage_name = ? AND u.userId != ?";
        try (Connection con = DatabaseConnection.getConnection();
             PreparedStatement pstmt = con.prepareStatement(sql)) {
            pstmt.setString(1, stageName.trim());
            pstmt.setInt(2, currentUserId);
            try (ResultSet rs = pstmt.executeQuery()) {
                if (rs.next()) {
                    return rs.getInt(1) > 0;
                }
            }
        }
        return false;
    }

    public static void removeUser(User user) throws IOException, SQLException {
        if (user == null || user.getUserId() <= 0) {
            throw new IllegalArgumentException("Invalid user ID for removal.");
        }
        try (Connection con = DatabaseConnection.getConnection();
             PreparedStatement pstmt = con.prepareStatement(UserSQLConstants.DELETE_USER)) {
            pstmt.setInt(1, user.getUserId());
            pstmt.executeUpdate();
        }
    }

    public static User findUserById(int userId) throws SQLException {
        if (userId <= 0) {
            return null;
        }
        try (Connection con = DatabaseConnection.getConnection();
             PreparedStatement pstmt = con.prepareStatement(UserSQLConstants.SELECT_USER_BY_ID)) {
            pstmt.setInt(1, userId);
            try (ResultSet rs = pstmt.executeQuery()) {
                if (rs.next()) {
                    return UserFactory.createUserFromResultSet(rs);
                }
            }
        }
        return null;
    }

    public static User findUserByEmail(String email) throws SQLException {
        if (email == null || email.trim().isEmpty()) {
            return null;
        }
        try (Connection con = DatabaseConnection.getConnection();
             PreparedStatement pstmt = con.prepareStatement(UserSQLConstants.SELECT_USER_BY_EMAIL)) {
            pstmt.setString(1, email.trim());
            try (ResultSet rs = pstmt.executeQuery()) {
                if (rs.next()) {
                    return UserFactory.createUserFromResultSet(rs);
                }
            }
        }
        return null;
    }

    public static void updateUserPassword(int userId, String newPassword) throws IOException, SQLException {
        if (userId <= 0) {
            throw new IllegalArgumentException("Invalid user ID.");
        }
        try (Connection con = DatabaseConnection.getConnection();
             PreparedStatement pstmt = con.prepareStatement(UserSQLConstants.UPDATE_USER_PASSWORD)) {
            String hashPassword = PasswordUtil.hashPassword(newPassword.trim());
            pstmt.setString(1, hashPassword);
            pstmt.setInt(2, userId);
            pstmt.executeUpdate();
        }
    }

    public static void updateAdminRole(int userId, AdminRole newRole) throws SQLException {
        if (userId <= 0) {
            throw new IllegalArgumentException("Invalid user ID.");
        }
        if (newRole == null) {
            try (Connection con = DatabaseConnection.getConnection();
                 PreparedStatement pstmt = con.prepareStatement(UserSQLConstants.DELETE_ADMIN_ROLE)) {
                pstmt.setInt(1, userId);
                pstmt.executeUpdate();
            }
        } else {
            try (Connection con = DatabaseConnection.getConnection();
                 PreparedStatement pstmt = con.prepareStatement(UserSQLConstants.INSERT_ADMIN_ROLE)) {
                pstmt.setInt(1, userId);
                pstmt.setString(2, newRole.name());
                pstmt.setString(3, newRole.name());
                pstmt.executeUpdate();
            }
        }
    }

    public static List<String> getUserLikedGenres(int userId) throws SQLException {
        List<String> genres = new ArrayList<>();
        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement ps = conn.prepareStatement(UserSQLConstants.SELECT_USER_GENRES)) {

            ps.setInt(1, userId);
            ResultSet rs = ps.executeQuery();

            while (rs.next()) {
                genres.add(rs.getString("genre"));
            }
        }
        return genres;
    }

    public static AdminRole getAdminRole(int userId) throws SQLException {
        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement ps = conn.prepareStatement(UserSQLConstants.SELECT_ADMIN_ROLE)) {

            ps.setInt(1, userId);
            ResultSet rs = ps.executeQuery();

            if (rs.next()) {
                return AdminRole.valueOf(rs.getString("role"));
            }
        }
        return null;
    }

    public static Artist getArtistDetails(int userId) throws SQLException {
        if (userId <= 0) {
            throw new IllegalArgumentException("Invalid user ID: " + userId);
        }

        try (Connection con = DatabaseConnection.getConnection()) {
            Artist artist = new Artist();
            artist.setUserId(userId);
            loadArtistDetails(artist, con);
            if (artist.getStageName() == null) {
                return null;
            }
            artist.setSpecializedGenres(getArtistGenres(userId, con));
            return artist;
        }
    }

    private static void addArtistGenres(int userId, List<String> genres, Connection con) throws SQLException {
        try (PreparedStatement pstmt = con.prepareStatement(UserSQLConstants.INSERT_ARTIST_GENRES)) {
            for (String genre : genres) {
                pstmt.setInt(1, userId);
                pstmt.setString(2, genre.trim());
                pstmt.addBatch();
            }
            pstmt.executeBatch();
        }
    }

    private static List<String> getArtistGenres(int userId, Connection con) throws SQLException {
        List<String> genres = new ArrayList<>();
        try (PreparedStatement pstmt = con.prepareStatement(UserSQLConstants.SELECT_ARTIST_GENRES)) {
            pstmt.setInt(1, userId);
            ResultSet rs = pstmt.executeQuery();
            while (rs.next()) {
                genres.add(rs.getString("genre"));
            }
        }
        return genres;
    }

    private static void loadArtistDetails(Artist artist, Connection con) throws SQLException {
        try (PreparedStatement pstmt = con.prepareStatement(UserSQLConstants.SELECT_ARTIST_DETAILS)) {
            pstmt.setInt(1, artist.getUserId());
            ResultSet rs = pstmt.executeQuery();
            if (rs.next()) {
                artist.setStageName(rs.getString("stage_name"));
                artist.setBio(rs.getString("bio"));
            }
        }
    }


    private int getArtistTrackCount(int userId) {
        int trackCount;
        try (Connection con = DatabaseConnection.getConnection();
             PreparedStatement pstmt = con.prepareStatement(UserSQLConstants.GET_ARTIST_TRACK_COUNT)) {

            pstmt.setInt(1, userId);
            ResultSet rs = pstmt.executeQuery();

            trackCount = rs.getInt(1);

        } catch (SQLException e) {
            throw new RuntimeException(e);
        }

        return trackCount;
    }

}

--- main/java/factory/AdvertisementFactory.java ---

package factory;

import model.Advertisement;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.LocalDate;

public class AdvertisementFactory {

    public static Advertisement createAdvertisement(String title, String content, byte[] imageData, String imageUrl,
                                                    LocalDate startDate, LocalDate endDate, boolean active) {
        return new Advertisement(title, content, imageData, imageUrl, startDate, endDate, active);
    }

    public static Advertisement createAdvertisementFromResultSet(ResultSet rs) throws SQLException {
        return new Advertisement(
                rs.getInt("adId"),
                rs.getString("title"),
                rs.getString("content"),
                rs.getBytes("imageData"),
                rs.getString("imageUrl"),
                rs.getDate("startDate").toLocalDate(),
                rs.getDate("endDate").toLocalDate(),
                rs.getBoolean("active")
        );
    }
}

--- main/java/factory/OrderFactory.java ---

// factory/OrderFactory.java
package factory;

import model.Order;
import model.enums.OrderStatus;

import java.sql.ResultSet;
import java.sql.SQLException;

/**
 * OrderFactory implements the Factory Pattern for creating Order instances from a database record.
 */
public class OrderFactory {

    /**
     * Creates an Order from a ResultSet (e.g., during retrieval).
     * This is the primary purpose of the factory now.
     *
     * @param rs The ResultSet from which to create the Order object.
     * @return A populated Order object.
     * @throws SQLException if a database access error occurs.
     */
    public static Order createOrderFromResultSet(ResultSet rs) throws SQLException {
        Order order = new Order();
        order.setOrderId(rs.getInt("order_id"));
        order.setUserId(rs.getInt("user_id"));
        order.setTotalAmount(rs.getDouble("total_amount"));
        order.setDiscountAmount(rs.getDouble("discount_amount"));
        order.setFinalAmount(rs.getDouble("final_amount"));
        order.setPromotionCode(rs.getString("promotion_code"));
        order.setStatus(OrderStatus.valueOf(rs.getString("status")));
        order.setOrderDate(rs.getTimestamp("order_date").toLocalDateTime());
        order.setPaymentMethod(rs.getString("payment_method"));
        order.setTransactionId(rs.getString("transaction_id"));
        return order;
    }
}

--- main/java/factory/PaymentFactory.java ---

package factory;

import model.Payment;
import java.time.LocalDateTime;

public class PaymentFactory {

    public static Payment createPayment(int orderId, double amount, String paymentMethod, String transactionId, String status) {
        return new Payment(orderId, amount, paymentMethod, transactionId, status);
    }

    public static Payment createPayment(int paymentId, int orderId, double amount, LocalDateTime paymentDate, String paymentMethod, String transactionId, String status) {
        return new Payment(paymentId, orderId, amount, paymentDate, paymentMethod, transactionId, status);
    }

    public static Payment createEmptyPayment() {
        return new Payment();
    }

    public static Payment createPaymentWithOrderId(int orderId) {
        Payment payment = new Payment();
        payment.setOrderId(orderId);
        return payment;
    }
}


--- main/java/factory/PromotionFactory.java ---

package factory;

import model.Promotion;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.LocalDate;

public class PromotionFactory {

    public static Promotion createPromotion(String code, double discount, LocalDate startDate, LocalDate endDate,
                                            int usageCount, String description) {
        return new Promotion(code, discount, startDate, endDate, usageCount, description);
    }

    public static Promotion createPromotionFromResultSet(ResultSet rs) throws SQLException {
        Promotion promotion = new Promotion();
        promotion.setPromotionId(rs.getInt("promotionId"));
        promotion.setCode(rs.getString("code"));
        promotion.setDiscount(rs.getDouble("discount"));
        promotion.setStartDate(rs.getDate("startDate").toLocalDate());
        promotion.setEndDate(rs.getDate("endDate").toLocalDate());
        promotion.setUsageCount(rs.getInt("usageCount")); // Make sure this line exists
        promotion.setDescription(rs.getString("description"));
        return promotion;
    }
}

--- main/java/factory/TrackFactory.java ---

// In main/java/factory/TrackFactory.java
package factory;

import model.Track;
import model.enums.TrackStatus; // Import the enum

import java.sql.ResultSet;
import java.sql.SQLException;

public class TrackFactory {

    public static Track createTrackFromResultSet(ResultSet rs) throws SQLException {
        Track track = new Track();
        track.setTrackId(rs.getInt("trackId")); 
        track.setTitle(rs.getString("title")); 
        track.setPrice(rs.getDouble("price")); 
        track.setGenre(rs.getString("genre")); 
        track.setRating(rs.getDouble("rating")); 
        track.setArtistId(rs.getInt("artist_id")); 
        track.setDuration(rs.getInt("duration")); 
        track.setReleaseDate(rs.getDate("release_date") != null ? rs.getDate("release_date").toLocalDate() : null); 
        track.setFullTrackData(rs.getBytes("full_track_data")); 
        track.setCoverArtData(rs.getBytes("cover_art_data")); 
        track.setCoverArtType(rs.getString("cover_art_type")); 

        // NEW: Read and set the status
        try {
            String statusStr = rs.getString("status");
            if (statusStr != null) {
                track.setStatus(TrackStatus.valueOf(statusStr.toUpperCase()));
            }
        } catch (IllegalArgumentException e) {
            track.setStatus(TrackStatus.PENDING); // Default if value is invalid
        }

        try {
            String artistName = rs.getString("stage_name"); 
            if (artistName == null || artistName.trim().isEmpty()) {
                artistName = rs.getString("firstName") + " " + rs.getString("lastName");
            }
            track.setArtistName(artistName.trim());
        } catch (SQLException e) {
            track.setArtistName("Unknown Artist");
        }

        return track;
    }
}

--- main/java/factory/UserFactory.java ---

package factory;

import dao.UserDAO;
import model.Admin;
import model.Artist;
import model.StandardUser;
import model.User;
import model.enums.UserType;

import java.sql.ResultSet;
import java.sql.SQLException;

public class UserFactory {

    public static User createUser(String role, String firstName, String lastName, String email, String password) {
        UserType userType;
        try {
            userType = UserType.valueOf(role.toUpperCase());
        } catch (IllegalArgumentException e) {
            throw new IllegalArgumentException("Invalid role: " + role + ". Must be 'USER', 'ADMIN', or 'ARTIST'.");
        }

        return switch (userType) {
            case ADMIN -> new Admin(firstName, lastName, email, password);
            case ARTIST -> new Artist(firstName, lastName, email, password);
            default -> new StandardUser(firstName, lastName, email, password);
        };
    }

    public static User createUserFromResultSet(ResultSet rs) throws SQLException {
        int userId = rs.getInt("userId");
        String firstName = rs.getString("firstName");
        String lastName = rs.getString("lastName");
        String email = rs.getString("email");
        String password = rs.getString("password");
        String roleStr = rs.getString("role");

        UserType userType = UserType.valueOf(roleStr);

        User user = switch (userType) {
            case ADMIN -> {
                Admin admin = new Admin(userId, firstName, lastName, email, password);
                admin.setRole(UserDAO.getAdminRole(userId));
                yield admin;
            }
            // Update the createUserFromResultSet method for ARTIST case
            case ARTIST -> {
                Artist artist = new Artist(userId, firstName, lastName, email, password);
                // Load artist details
                Artist artistDetails = UserDAO.getArtistDetails(userId);
                if (artistDetails != null) {
                    artist.setStageName(artistDetails.getStageName());
                    artist.setBio(artistDetails.getBio());
                    artist.setTrackCount(artistDetails.getTrackCount());
                }
                yield artist;
            }

            default -> new StandardUser(userId, firstName, lastName, email, password);
        };

        user.setLikedGenres(UserDAO.getUserLikedGenres(userId));
        return user;
    }
}

--- main/java/model/Admin.java ---

package model;

import model.enums.AdminRole;
import model.enums.UserType;

public class Admin extends User {
    private AdminRole role;

    public Admin(String firstName, String lastName, String email, String password) {
        super(firstName, lastName, email, password);
    }

    public Admin(int userId, String firstName, String lastName, String email, String password) {
        super(userId, firstName, lastName, email, password);
    }

    // Admin-specific methods
    public AdminRole getRole() {
        return role;
    }

    public void setRole(AdminRole role) {
        this.role = role;
    }

    @Override
    public UserType getUserType() {
        return UserType.ADMIN;
    }

    @Override
    public boolean isAdmin() {
        return true;
    }
}

--- main/java/model/Advertisement.java ---

package model;

import java.time.LocalDate;

public class Advertisement {
    private int adId;
    private String title;
    private String content;
    private byte[] imageData;
    private String imageUrl; // Optional, for external URLs
    private LocalDate startDate;
    private LocalDate endDate;
    private boolean active;

    public Advertisement(String title, String content, byte[] imageData, String imageUrl, LocalDate startDate, LocalDate endDate, boolean active) {
        this.title = title;
        this.content = content;
        this.imageData = imageData;
        this.imageUrl = imageUrl;
        this.startDate = startDate;
        this.endDate = endDate;
        this.active = active;
    }

    public Advertisement(int adId, String title, String content, byte[] imageData, String imageUrl, LocalDate startDate, LocalDate endDate, boolean active) {
        this.adId = adId;
        this.title = title;
        this.content = content;
        this.imageData = imageData;
        this.imageUrl = imageUrl;
        this.startDate = startDate;
        this.endDate = endDate;
        this.active = active;
    }

    // Getters and Setters
    public int getAdId() {
        return adId;
    }

    public void setAdId(int adId) {
        this.adId = adId;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public String getContent() {
        return content;
    }

    public void setContent(String content) {
        this.content = content;
    }

    public byte[] getImageData() {
        return imageData;
    }

    public void setImageData(byte[] imageData) {
        this.imageData = imageData;
    }

    public String getImageUrl() {
        return imageUrl;
    }

    public void setImageUrl(String imageUrl) {
        this.imageUrl = imageUrl;
    }

    public LocalDate getStartDate() {
        return startDate;
    }

    public void setStartDate(LocalDate startDate) {
        this.startDate = startDate;
    }

    public LocalDate getEndDate() {
        return endDate;
    }

    public void setEndDate(LocalDate endDate) {
        this.endDate = endDate;
    }

    public boolean isActive() {
        return active;
    }

    public void setActive(boolean active) {
        this.active = active;
    }
}

--- main/java/model/Artist.java ---

package model;

import model.enums.UserType;

import java.util.List;

public class Artist extends User {
    private String stageName;
    private String bio;
    private List<String> specializedGenres;
    private List<Track> tracks;
    private int trackCount;

    public Artist() {
    }

    public Artist(String firstName, String lastName, String email, String password) {
        super(firstName, lastName, email, password);
    }

    public Artist(int userId, String firstName, String lastName, String email, String password) {
        super(userId, firstName, lastName, email, password);
    }

    // Artist-specific getters and setters
    public String getStageName() {
        return stageName;
    }

    public void setStageName(String stageName) {
        this.stageName = stageName;
    }

    public String getBio() {
        return bio;
    }

    public void setBio(String bio) {
        this.bio = bio;
    }

    public List<String> getSpecializedGenres() {
        return specializedGenres;
    }

    public void setSpecializedGenres(List<String> specializedGenres) {
        this.specializedGenres = specializedGenres;
    }

    public List<Track> getTracks() {
        return tracks;
    }

    public void setTracks(List<Track> tracks) {
        this.tracks = tracks;
    }

    public int getTrackCount() {
        return trackCount;
    }

    public void setTrackCount(int trackCount) {
        this.trackCount = trackCount;
    }

    @Override
    public UserType getUserType() {
        return UserType.ARTIST;
    }

    @Override
    public boolean isAdmin() {
        return false;
    }
}

--- main/java/model/enums/AdminRole.java ---

package model.enums;

public enum AdminRole {
    SUPER_ADMIN,
    MARKETING_MANAGER,
    SUPPORT_MANAGER,
    FINANCE_MANAGER,
    CONTENT_MANAGER,
    DEFAULT_ROLE;
}

--- main/java/model/enums/OrderStatus.java ---

package model.enums;

public enum OrderStatus {
    PENDING,
    COMPLETED,
    CANCELLED,
    REFUNDED
}

--- main/java/model/enums/TrackStatus.java ---

package model.enums;

public enum TrackStatus {
    PENDING,
    APPROVED,
    REJECTED
}

--- main/java/model/enums/UserType.java ---

package model.enums;

public enum UserType {
    USER,
    ADMIN,
    ARTIST;
}

--- main/java/model/Order.java ---

package model;

import model.enums.OrderStatus;

import java.time.LocalDateTime;
import java.util.List;

public class Order {
    private int orderId;
    private int userId;
    private List<Integer> trackIds;
    private double totalAmount;
    private OrderStatus status;
    private LocalDateTime orderDate;
    private String paymentMethod;
    private String transactionId;
    private double discountAmount;
    private double finalAmount;
    private String promotionCode;

    public Order() {
    }

    ;

    public Order(int userId, List<Integer> trackIds, double totalAmount, OrderStatus status, LocalDateTime orderDate, String paymentMethod) {
        this.userId = userId;
        this.trackIds = trackIds;
        this.totalAmount = totalAmount;
        this.status = status;
        this.orderDate = orderDate;
        this.paymentMethod = paymentMethod;
    }

    public int getOrderId() {
        return orderId;
    }

    public void setOrderId(int orderId) {
        this.orderId = orderId;
    }

    public int getUserId() {
        return userId;
    }

    public void setUserId(int userId) {
        this.userId = userId;
    }

    public List<Integer> getTrackIds() {
        return trackIds;
    }

    public void setTrackIds(List<Integer> trackIds) {
        this.trackIds = trackIds;
    }

    public double getTotalAmount() {
        return totalAmount;
    }

    public void setTotalAmount(double totalAmount) {
        this.totalAmount = totalAmount;
    }

    public OrderStatus getStatus() {
        return status;
    }

    public void setStatus(OrderStatus status) {
        this.status = status;
    }

    public LocalDateTime getOrderDate() {
        return orderDate;
    }

    public void setOrderDate(LocalDateTime orderDate) {
        this.orderDate = orderDate;
    }

    public String getPaymentMethod() {
        return paymentMethod;
    }

    public void setPaymentMethod(String paymentMethod) {
        this.paymentMethod = paymentMethod;
    }

    public String getTransactionId() {
        return transactionId;
    }

    public void setTransactionId(String transactionId) {
        this.transactionId = transactionId;
    }

    public double getDiscountAmount() {
        return discountAmount;
    }

    public void setDiscountAmount(double discountAmount) {
        this.discountAmount = discountAmount;
    }

    public double getFinalAmount() {
        return finalAmount;
    }

    public void setFinalAmount(double finalAmount) {
        this.finalAmount = finalAmount;
    }

    public String getPromotionCode() {
        return promotionCode;
    }

    public void setPromotionCode(String promotionCode) {
        this.promotionCode = promotionCode;
    }
}

--- main/java/model/Payment.java ---

package model;

import java.time.LocalDateTime;

public class Payment {
    private int paymentId;
    private int orderId;
    private double amount;
    private LocalDateTime paymentDate;
    private String paymentMethod;
    private String transactionId;
    private String status;

    public Payment() {
        this.paymentDate = LocalDateTime.now();
    }

    public Payment(int paymentId, int orderId, double amount, LocalDateTime paymentDate, String paymentMethod, String transactionId, String status) {
        this.paymentId = paymentId;
        this.orderId = orderId;
        this.amount = amount;
        this.paymentDate = paymentDate != null ? paymentDate : LocalDateTime.now();
        this.paymentMethod = paymentMethod;
        this.transactionId = transactionId;
        this.status = status;
    }

    public Payment(int orderId, double amount, String paymentMethod, String transactionId, String status) {
        this.orderId = orderId;
        this.amount = amount;
        this.paymentDate = LocalDateTime.now();
        this.paymentMethod = paymentMethod;
        this.transactionId = transactionId;
        this.status = status;
    }

    public int getPaymentId() {
        return paymentId;
    }

    public void setPaymentId(int paymentId) {
        this.paymentId = paymentId;
    }

    public int getOrderId() {
        return orderId;
    }

    public void setOrderId(int orderId) {
        this.orderId = orderId;
    }

    public double getAmount() {
        return amount;
    }

    public void setAmount(double amount) {
        this.amount = amount;
    }

    public LocalDateTime getPaymentDate() {
        return paymentDate;
    }

    public void setPaymentDate(LocalDateTime paymentDate) {
        this.paymentDate = paymentDate;
    }

    public String getPaymentMethod() {
        return paymentMethod;
    }

    public void setPaymentMethod(String paymentMethod) {
        this.paymentMethod = paymentMethod;
    }

    public String getTransactionId() {
        return transactionId;
    }

    public void setTransactionId(String transactionId) {
        this.transactionId = transactionId;
    }

    public String getStatus() {
        return status;
    }

    public void setStatus(String status) {
        this.status = status;
    }

    @Override
    public String toString() {
        return "Payment{" +
                "paymentId=" + paymentId +
                ", orderId=" + orderId +
                ", amount=" + amount +
                ", paymentDate=" + paymentDate +
                ", paymentMethod='" + paymentMethod + '\'' +
                ", transactionId='" + transactionId + '\'' +
                ", status='" + status + '\'' +
                '}';
    }
}


--- main/java/model/Post.java ---

package model;

import java.sql.Timestamp;

public class Post {
    private int postId;
    private int userId;
    private String authorName;
    private String title;
    private String description;
    private byte[] image1Data;
    private String image1Type;
    private byte[] image2Data;
    private String image2Type;
    private byte[] image3Data;
    private String image3Type;
    private String status; // pending, approved, rejected
    private Timestamp createdAt;
    private Timestamp updatedAt;

    // Constructor for creating new post
    public Post(int userId, String authorName, String title, String description) {
        this.userId = userId;
        this.authorName = authorName;
        this.title = title;
        this.description = description;
        this.status = "pending";
    }

    // Constructor for retrieving from database
    public Post(int postId, int userId, String authorName, String title, String description,
                byte[] image1Data, String image1Type, byte[] image2Data, String image2Type, byte[] image3Data, String image3Type,
                String status, Timestamp createdAt, Timestamp updatedAt) {
        this.postId = postId;
        this.userId = userId;
        this.authorName = authorName;
        this.title = title;
        this.description = description;
        this.image1Data = image1Data;
        this.image1Type = image1Type;
        this.image2Data = image2Data;
        this.image2Type = image2Type;
        this.image3Data = image3Data;
        this.image3Type = image3Type;
        this.status = status;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
    }


    // Getters and Setters
    public int getPostId() {
        return postId;
    }

    public void setPostId(int postId) {
        this.postId = postId;
    }

    public int getUserId() {
        return userId;
    }

    public void setUserId(int userId) {
        this.userId = userId;
    }

    public String getAuthorName() {
        return authorName;
    }

    public void setAuthorName(String authorName) {
        this.authorName = authorName;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public byte[] getImage1Data() {
        return image1Data;
    }

    public void setImage1Data(byte[] image1Data) {
        this.image1Data = image1Data;
    }

    public String getImage1Type() {
        return image1Type;
    }

    public void setImage1Type(String image1Type) {
        this.image1Type = image1Type;
    }

    public byte[] getImage2Data() {
        return image2Data;
    }

    public void setImage2Data(byte[] image2Data) {
        this.image2Data = image2Data;
    }

    public String getImage2Type() {
        return image2Type;
    }

    public void setImage2Type(String image2Type) {
        this.image2Type = image2Type;
    }

    public byte[] getImage3Data() {
        return image3Data;
    }

    public void setImage3Data(byte[] image3Data) {
        this.image3Data = image3Data;
    }

    public String getImage3Type() {
        return image3Type;
    }

    public void setImage3Type(String image3Type) {
        this.image3Type = image3Type;
    }

    public String getStatus() {
        return status;
    }

    public void setStatus(String status) {
        this.status = status;
    }

    public Timestamp getCreatedAt() {
        return createdAt;
    }

    public void setCreatedAt(Timestamp createdAt) {
        this.createdAt = createdAt;
    }

    public Timestamp getUpdatedAt() {
        return updatedAt;
    }

    public void setUpdatedAt(Timestamp updatedAt) {
        this.updatedAt = updatedAt;
    }
}

--- main/java/model/Promotion.java ---

package model;

import java.time.LocalDate;

public class Promotion {
    private int promotionId;
    private String code;
    private double discount;
    private LocalDate startDate;
    private LocalDate endDate;
    private int usageCount;
    private String description;

    public Promotion(String code, double discount, LocalDate startDate, LocalDate endDate, int usageCount, String description) {
        this.code = code;
        this.discount = discount;
        this.startDate = startDate;
        this.endDate = endDate;
        this.usageCount = usageCount;
        this.description = description;
    }

    public Promotion(int promotionId, String code, double discount, LocalDate startDate, LocalDate endDate, int usageCount, String description) {
        this.promotionId = promotionId;
        this.code = code;
        this.discount = discount;
        this.startDate = startDate;
        this.endDate = endDate;
        this.usageCount = usageCount;
        this.description = description;
    }

    public Promotion() {

    }

    // Getters and Setters
    public int getPromotionId() {
        return promotionId;
    }

    public void setPromotionId(int promotionId) {
        this.promotionId = promotionId;
    }

    public String getCode() {
        return code;
    }

    public void setCode(String code) {
        this.code = code;
    }

    public double getDiscount() {
        return discount;
    }

    public void setDiscount(double discount) {
        this.discount = discount;
    }

    public LocalDate getStartDate() {
        return startDate;
    }

    public void setStartDate(LocalDate startDate) {
        this.startDate = startDate;
    }

    public LocalDate getEndDate() {
        return endDate;
    }

    public void setEndDate(LocalDate endDate) {
        this.endDate = endDate;
    }

    public int getUsageCount() {
        return usageCount;
    }

    public void setUsageCount(int usageCount) {
        this.usageCount = usageCount;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }
}

--- main/java/model/StandardUser.java ---

package model;

import model.enums.UserType;

public class StandardUser extends User {
    public StandardUser(String firstName, String lastName, String email, String password) {
        super(firstName, lastName, email, password);
    }

    public StandardUser(int userId, String firstName, String lastName, String email, String password) {
        super(userId, firstName, lastName, email, password);
    }

    public StandardUser() {
    }

    @Override
    public UserType getUserType() {
        return UserType.USER;
    }

    @Override
    public boolean isAdmin() {
        return false;
    }
}

--- main/java/model/Track.java ---

package model;

import model.enums.TrackStatus;

import java.time.LocalDate;

public class Track {
    private int trackId;
    private String title;
    private double price;
    private String genre;
    private double rating;
    private int artistId;
    private String artistName;
    private byte[] snippetData;
    private byte[] fullTrackData;
    private byte[] coverArtData;
    private String coverArtType;
    private int duration;
    private LocalDate releaseDate;
    private TrackStatus status;

    public Track() {
    }

    public Track(int trackId, String title, double price, String genre, double rating, int artistId, String artistName, int duration, LocalDate releaseDate, byte[] coverArtData, byte[] snippetData, byte[] fullTrackData) {
        this.trackId = trackId;
        this.title = title;
        this.price = price;
        this.genre = genre;
        this.rating = rating;
        this.artistId = artistId;
        this.artistName = artistName;
        this.duration = duration;
        this.releaseDate = releaseDate;
        this.coverArtData = coverArtData;
        this.snippetData = snippetData;
        this.fullTrackData = fullTrackData;
    }

    public int getTrackId() {
        return trackId;
    }

    public void setTrackId(int trackId) {
        this.trackId = trackId;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public double getPrice() {
        return price;
    }

    public void setPrice(double price) {
        this.price = price;
    }

    public String getGenre() {
        return genre;
    }

    public void setGenre(String genre) {
        this.genre = genre;
    }

    public double getRating() {
        return rating;
    }

    public void setRating(double rating) {
        this.rating = rating;
    }

    public int getArtistId() {
        return artistId;
    }

    public TrackStatus getStatus() {
        return status;
    }

    public void setStatus(TrackStatus status) {
        this.status = status;
    }

    public void setArtistId(int artistId) {
        this.artistId = artistId;
    }

    public String getArtistName() {
        return artistName;
    }

    public void setArtistName(String artistName) {
        this.artistName = artistName;
    }

    public int getDuration() {
        return duration;
    }

    public void setDuration(int duration) {
        this.duration = duration;
    }

    public LocalDate getReleaseDate() {
        return releaseDate;
    }

    public void setReleaseDate(LocalDate releaseDate) {
        this.releaseDate = releaseDate;
    }

    public byte[] getSnippetData() {
        return snippetData;
    }

    public void setSnippetData(byte[] snippetData) {
        this.snippetData = snippetData;
    }

    public byte[] getFullTrackData() {
        return fullTrackData;
    }

    public void setFullTrackData(byte[] fullTrackData) {
        this.fullTrackData = fullTrackData;
    }

    public byte[] getCoverArtData() {
        return coverArtData;
    }

    public void setCoverArtData(byte[] coverArtData) {
        this.coverArtData = coverArtData;
    }

    public String getCoverArtType() {
        return coverArtType;
    }

    public void setCoverArtType(String coverArtType) {
        this.coverArtType = coverArtType;
    }
}

--- main/java/model/User.java ---

package model;

import model.enums.UserType;

import java.util.ArrayList;
import java.util.List;

public abstract class User {
    protected int userId;
    protected String firstName;
    protected String lastName;
    protected String email;
    protected String password;
    protected List<String> likedGenres = new ArrayList<>();

    public User() {

    }

    public User(String firstName, String lastName, String email, String password) {
        this.firstName = firstName;
        this.lastName = lastName;
        this.email = email;
        this.password = password;
    }

    public User(int userId, String firstName, String lastName, String email, String password) {
        this.userId = userId;
        this.firstName = firstName;
        this.lastName = lastName;
        this.email = email;
        this.password = password;
    }

    // Common methods
    public void addLikedGenre(String genre) {
        if (genre != null && !genre.trim().isEmpty()) {
            likedGenres.add(genre.trim());
        }
    }

    public List<String> getLikedGenres() {
        return new ArrayList<>(likedGenres); // Return copy to prevent external modification
    }

    public void setLikedGenres(List<String> genres) {
        if (genres != null) {
            this.likedGenres = new ArrayList<>(genres);
        } else {
            this.likedGenres = new ArrayList<>();
        }
    }

    // Abstract methods - must be implemented by subclasses
    public abstract UserType getUserType();

    public abstract boolean isAdmin();

    // Common getters and setters
    public int getUserId() {
        return userId;
    }

    public void setUserId(int userId) {
        this.userId = userId;
    }

    public String getFirstName() {
        return firstName;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    public String getLastName() {
        return lastName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    public String getFullName() {
        return firstName + " " + lastName;
    }
}

--- main/java/service/AdvertisementService.java ---

package service;

import dao.AdvertisementDAO;
import factory.AdvertisementFactory;
import model.Advertisement;
import service.validators.AdvertisementValidation.AdvertisementValidator;

import java.io.IOException;
import java.sql.SQLException;
import java.time.LocalDate;
import java.util.LinkedList;

public class AdvertisementService {

    public LinkedList<Advertisement> getAdvertisements() throws SQLException {
        return AdvertisementDAO.getAdvertisements();
    }

    public LinkedList<Advertisement> getActiveAdvertisements() throws SQLException {
        return AdvertisementDAO.getActiveAdvertisements();
    }

    public void addAdvertisement(String title, String content, byte[] imageData, String imageUrl,
                                 LocalDate startDate, LocalDate endDate, boolean active) throws IOException, SQLException {
        Advertisement ad = AdvertisementFactory.createAdvertisement(title, content, imageData, imageUrl, startDate, endDate, active);
        AdvertisementValidator validator = AdvertisementValidator.forType("standard");
        validator.validate(ad);
        AdvertisementDAO.addAdvertisement(ad);
    }

    public void updateAdvertisement(int adId, String title, String content, byte[] imageData, String imageUrl,
                                    LocalDate startDate, LocalDate endDate, boolean active) throws IOException, SQLException {

        Advertisement tempAd = AdvertisementFactory.createAdvertisement(title, content, imageData, imageUrl, startDate, endDate, active);
        tempAd.setAdId(adId);
        AdvertisementValidator validator = AdvertisementValidator.forType("standard");
        validator.validate(tempAd);
        AdvertisementDAO.updateAdvertisement(adId, title, content, imageData, imageUrl, startDate, endDate, active);
    }

    public void deleteAdvertisement(int adId) throws IOException, SQLException {
        AdvertisementDAO.deleteAdvertisement(adId);
    }

    public Advertisement findAdvertisementById(int adId) throws SQLException {
        return AdvertisementDAO.findAdvertisementById(adId);
    }
}

--- main/java/service/OrderService.java ---

package service;

import dao.CartDAO;
import dao.OrderDAO;
import dao.PromotionDAO;
import model.Order;
import model.Promotion;
import model.Track;
import model.User;
import model.enums.OrderStatus;
import utils.DatabaseConnection;

import java.sql.Connection;
import java.sql.SQLException;
import java.time.LocalDateTime;
import java.util.List;
import java.util.stream.Collectors;

public class OrderService {

    public List<Order> getOrders() throws SQLException {
        return OrderDAO.getOrders();
    }

    public Order createOrder(User user, List<Track> cartTracks, double originalCartTotal, String promoCode, Connection con) throws SQLException, IllegalArgumentException {
        if (cartTracks == null || cartTracks.isEmpty()) {
            throw new IllegalArgumentException("Cannot create an order with an empty cart.");
        }

        double serverCalculatedTotal = cartTracks.stream()
                .mapToDouble(Track::getPrice)
                .sum();

        double discountAmount = 0.0;
        double finalAmount = serverCalculatedTotal;
        Promotion promo = null;

        if (promoCode != null && !promoCode.trim().isEmpty()) {
            promo = PromotionDAO.findValidByCode(promoCode);
            if (promo != null) {
                discountAmount = serverCalculatedTotal * (promo.getDiscount() / 100.0);
                finalAmount = serverCalculatedTotal - discountAmount;
            } else {
                // Do not throw an exception here, just ignore the invalid code
                promoCode = null;
            }
        }

        Order order = new Order();
        order.setUserId(user.getUserId());
        order.setTotalAmount(serverCalculatedTotal);
        order.setDiscountAmount(discountAmount);
        order.setFinalAmount(finalAmount);
        order.setPromotionCode(promoCode);
        order.setStatus(OrderStatus.PENDING); // Correct initial status
        order.setOrderDate(LocalDateTime.now());

        // The DAO method will use the passed connection 'con'
        OrderDAO.addOrder(order, con);

        if (promo != null) {
            PromotionDAO.incrementUsageCount(promo.getCode());
        }

        // Return the newly created order with its generated ID
        return order;
    }

    public void refundOrder(int orderId) throws SQLException {
        updateOrderStatus(orderId, OrderStatus.REFUNDED);
        // Here you would also update the payment status if you had a payments table
    }

    public void removeOrder(int orderId) throws SQLException {
        Order order = findOrderById(orderId);
        if (order == null) {
            throw new SQLException("Order not found: " + orderId);
        }
        OrderDAO.removeOrder(order);
    }

    public Order findOrderById(int orderId) throws SQLException {
        return OrderDAO.findOrderById(orderId);
    }

    public void updateOrderStatus(int orderId, OrderStatus status) throws SQLException {
        Order currentOrder = findOrderById(orderId);
        if (currentOrder == null) {
            throw new SQLException("Order not found: " + orderId);
        }

        if (!isValidStatusTransition(currentOrder.getStatus(), status)) {
            throw new IllegalArgumentException("Invalid status transition from " + currentOrder.getStatus() + " to " + status);
        }

        OrderDAO.updateOrderStatus(orderId, status);
    }

    public void updateOrderStatus(int orderId, OrderStatus status, Connection con) throws SQLException {
        // This method assumes it's part of an ongoing transaction and skips the findOrderById check.
        OrderDAO.updateOrderStatus(orderId, status, con);
    }

    public void updateOrderPaymentDetails(int orderId, String paymentMethod, String transactionId, Connection con) throws SQLException {
        OrderDAO.updateOrderPaymentDetails(orderId, paymentMethod, transactionId, con);
    }

    private boolean isValidStatusTransition(OrderStatus current, OrderStatus next) {
        if (current == next) return true;

        return switch (current) {
            case PENDING -> next == OrderStatus.COMPLETED || next == OrderStatus.CANCELLED;
            case COMPLETED -> next == OrderStatus.REFUNDED;
            case CANCELLED, REFUNDED -> false;
        };
    }
}

--- main/java/service/PaymentService.java ---

package service;

import dao.PaymentDAO;
import factory.PaymentFactory;
import model.Payment;
import utils.DatabaseConnection;

import java.sql.Connection;
import java.sql.SQLException;
import java.util.List;
import java.util.UUID;

public class PaymentService {

    public List<Payment> getAllPayments() throws SQLException {
        return PaymentDAO.getAllPayments();
    }

    public Payment processPayment(int orderId, double amount, String paymentMethod, Connection con) throws SQLException {
        try {
            String transactionId = generateTransactionId();
            Payment payment = PaymentFactory.createPayment(orderId, amount, paymentMethod, transactionId, "PENDING");
            PaymentDAO.addPayment(payment, con);

            boolean paymentSuccess = simulatePaymentProcessing(paymentMethod);

            if (paymentSuccess) {
                PaymentDAO.updatePaymentStatusByOrderId(orderId, "SUCCESS", con);
                payment.setStatus("SUCCESS");
                return payment; // Return the full payment object on success
            } else {
                PaymentDAO.updatePaymentStatusByOrderId(orderId, "FAILED", con);
                return null; // Return null on failure
            }
        } catch (SQLException e) {
            e.printStackTrace();
            throw e;
        }
    }

    public Payment getPaymentByOrderId(int orderId) {
        Connection con = null;
        try {
            con = DatabaseConnection.getConnection();
            return PaymentDAO.getPaymentByOrderId(orderId, con);
        } catch (SQLException e) {
            e.printStackTrace();
            return null;
        } finally {
            if (con != null) {
                try {
                    con.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
    }

    public Payment getPaymentById(int paymentId) {
        Connection con = null;
        try {
            con = DatabaseConnection.getConnection();
            return PaymentDAO.getPaymentById(paymentId, con);
        } catch (SQLException e) {
            e.printStackTrace();
            return null;
        } finally {
            if (con != null) {
                try {
                    con.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
    }

    private String generateTransactionId() {
        return "TXN_" + System.currentTimeMillis() + "_" + UUID.randomUUID().toString().substring(0, 8).toUpperCase();
    }

    private boolean simulatePaymentProcessing(String paymentMethod) {
        // Simulate payment processing delay
        try {
            Thread.sleep(1000);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        }

        // Simulate different success rates based on payment method
        switch (paymentMethod.toUpperCase()) {
            case "CARD":
                return Math.random() > 0.1; // 90% success rate
            case "ONLINE":
                return Math.random() > 0.05; // 95% success rate
            default:
                return Math.random() > 0.2; // 80% success rate
        }
    }
}


--- main/java/service/PostService.java ---

package service;
import dao.PostDAO;
import model.Post;
import model.User;
import model.enums.UserType;
import java.sql.SQLException;
import java.util.List;
public class PostService {

    /**
     * Gets a specified number of recent posts for the home page.
     */
    public List<Post> getRecentPosts(int limit) throws SQLException {
        return PostDAO.getRecentApprovedPosts(limit);
    }

    /**
     * Gets all approved posts for the public community feed.
     */
    public List<Post> getAllApprovedPosts() throws SQLException {
        return PostDAO.getAllApprovedPosts();
    }

    /**
     * Gets all posts for a specific user (for the "My Posts" page).
     */
    public List<Post> getPostsForUser(int userId) throws SQLException {
        return PostDAO.getPostsByUserId(userId);
    }

    /**
     * Gets all posts for the admin panel.
     */
    public List<Post> getAllPostsForAdmin() throws SQLException {
        return PostDAO.getAllPostsForAdmin();
    }

    /**
     * Gets a single post by its ID.
     */
    public Post getPostById(int postId) throws SQLException {
        return PostDAO.getPostById(postId);
    }

    /**
     * Handles the creation of a new post, including setting its initial status.
     * @param post The post object to be created.
     * @param user The user creating the post.
     */
    public void createPost(Post post, User user) throws SQLException {
        // Business Rule: Admins posts are auto-approved.
        // Others are pending.
        if (user.getUserType() == UserType.ADMIN) {
            post.setStatus("approved");
        } else {
            post.setStatus("pending");
        }
        PostDAO.createPost(post);
    }

    /**
     * Handles updating a post, checking permissions, and resetting status.
     * @param post The post with updated information.
     * @param user The user attempting the update.
     * @throws SQLException
     * @throws IllegalAccessException If the user does not have permission.
     */
    public void updatePost(Post post, User user) throws SQLException, IllegalAccessException {
        Post existingPost = PostDAO.getPostById(post.getPostId());
        if (existingPost == null) {
            throw new IllegalArgumentException("Post not found.");
        }

        // Security Check: User must be the owner or an admin.
        if (existingPost.getUserId() != user.getUserId() && user.getUserType() != UserType.ADMIN) {
            throw new IllegalAccessException("You do not have permission to edit this post.");
        }

        // Business Rule: If a non-admin edits, status goes back to pending.
        if (user.getUserType() != UserType.ADMIN) {
            post.setStatus("pending");
        }

        PostDAO.updatePost(post);
    }

    /**
     * Handles deleting a post, checking for permissions.
     * @param postId The ID of the post to delete.
     * @param user The user attempting the deletion.
     * @throws SQLException
     * @throws IllegalAccessException If the user does not have permission.
     */
    public void deletePost(int postId, User user) throws SQLException, IllegalAccessException {
        Post post = PostDAO.getPostById(postId);
        if (post == null) {
            throw new IllegalArgumentException("Post not found.");
        }

        // Security Check: User must be the owner or an admin.
        if (post.getUserId() != user.getUserId() && user.getUserType() != UserType.ADMIN) {
            throw new IllegalAccessException("You do not have permission to delete this post.");
        }

        PostDAO.deletePost(postId);
    }

    /**
     * Updates a post's status.
     * (For Admins)
     * @param postId The post ID.
     * @param status The new status ("approved", "rejected").
     */
    public void updatePostStatus(int postId, String status) throws SQLException {
        if (!status.equals("approved") && !status.equals("rejected")) {
            throw new IllegalArgumentException("Invalid status provided.");
        }
        PostDAO.updatePostStatus(postId, status);
    }
}

--- main/java/service/PromotionService.java ---

package service;

import dao.PromotionDAO;
import factory.PromotionFactory;
import model.Promotion;
import service.validators.PromotionValidation.PromotionValidator;

import java.io.IOException;
import java.sql.SQLException;
import java.time.LocalDate;
import java.util.LinkedList;

public class PromotionService {

    public LinkedList<Promotion> getPromotions() throws SQLException {
        return PromotionDAO.getPromotions();
    }

    public void addPromotion(String code, double discount, LocalDate startDate, LocalDate endDate, String description) throws IOException, SQLException {
        if (findPromotionByCode(code) != null) {
            throw new IllegalArgumentException("Promotion code already exists: " + code);
        }
        Promotion promotion = PromotionFactory.createPromotion(code, discount, startDate, endDate, 0, description);
        PromotionValidator validator = PromotionValidator.forType("standard");
        validator.validate(promotion);
        PromotionDAO.addPromotion(promotion);
    }

    public void removePromotion(int promotionId) throws IOException, SQLException {
        Promotion promotion = findPromotionById(promotionId);
        if (promotion == null) {
            throw new SQLException("Promotion not found: " + promotionId);
        }
        PromotionDAO.removePromotion(promotion);
    }

    public Promotion findPromotionById(int promotionId) throws SQLException {
        return PromotionDAO.findPromotionById(promotionId);
    }

    public Promotion findPromotionByCode(String code) throws SQLException {
        return PromotionDAO.findPromotionByCode(code);
    }

    public void updatePromotion(int promotionId, String code, double discount, LocalDate startDate,
                                LocalDate endDate, String description) throws IOException, SQLException {

        Promotion current = findPromotionById(promotionId);
        if (current == null) {
            throw new SQLException("Promotion not found: " + promotionId);
        }
        if (!current.getCode().equals(code) && findPromotionByCode(code) != null) {
            throw new IllegalArgumentException("Promotion code already exists: " + code);
        }
        Promotion tempPromotion = PromotionFactory.createPromotion(code, discount, startDate, endDate, current.getUsageCount(), description);
        tempPromotion.setPromotionId(promotionId);
        PromotionValidator validator = PromotionValidator.forType("standard");
        validator.validate(tempPromotion);

        PromotionDAO.updatePromotion(promotionId, code, discount, startDate, endDate, current.getUsageCount(), description);
    }

    public void incrementUsageCount(String code) throws SQLException {
        PromotionDAO.incrementUsageCount(code);
    }

    public int trackUsage(String code) throws SQLException {
        return PromotionDAO.trackUsage(code);
    }
}

--- main/java/service/UserService.java ---

package service;

import dao.UserDAO;
import factory.UserFactory;
import model.Admin;
import model.Artist;
import model.User;
import model.enums.AdminRole;
import model.enums.UserType;
import service.validators.UserValidation.AdminUserValidator;
import service.validators.UserValidation.UserValidator;

import java.io.IOException;
import java.sql.SQLException;
import java.util.LinkedList;
import java.util.List;

public class UserService {

    /**
     * Updates an artist's complete profile. This is the single entry point for this operation.
     */
    public void updateArtist(Artist artist, String newPassword) throws SQLException, IOException {
        // 1. Fetch existing user data to ensure it exists and is an artist.
        User existingUser = UserDAO.findUserById(artist.getUserId());
        if (existingUser == null || existingUser.getUserType() != UserType.ARTIST) {
            throw new IllegalArgumentException("Artist not found with ID: " + artist.getUserId());
        }

        // 2. Validate the complete, updated Artist object.
        UserValidator validator = UserValidator.forUser(artist);
        validator.validate(artist);

        // 3. Check for business rule violations (uniqueness constraints).
        if (!existingUser.getEmail().equalsIgnoreCase(artist.getEmail()) && UserDAO.findUserByEmail(artist.getEmail()) != null) {
            throw new IllegalArgumentException("Email already exists: " + artist.getEmail());
        }
        if (UserDAO.isStageNameTaken(artist.getStageName(), artist.getUserId())) {
            throw new IllegalArgumentException("Stage name is already taken: " + artist.getStageName());
        }

        // 4. Persist the updated user and artist details in a single transaction.
        UserDAO.updateUser(artist);

        // 5. Update password only if a new one was provided.
        if (newPassword != null && !newPassword.trim().isEmpty()) {
            this.updateUserPassword(artist.getUserId(), newPassword);
        }
    }

    /**
     * Updates a standard user or an admin's profile.
     */
    public void updateUser(User user, String newPassword) throws SQLException, IOException {
        // 1. Fetch existing user data to ensure it exists.
        User existingUser = UserDAO.findUserById(user.getUserId());
        if (existingUser == null) {
            throw new IllegalArgumentException("User not found with ID: " + user.getUserId());
        }
        // This method should not be used to update artists.
        if (user.getUserType() == UserType.ARTIST || existingUser.getUserType() == UserType.ARTIST) {
            throw new IllegalArgumentException("Use the updateArtist() method to modify artist profiles.");
        }

        // 2. Validate the incoming object.
        UserValidator validator = UserValidator.forUser(user);
        validator.validate(user);

        // 3. Check for email uniqueness.
        if (!existingUser.getEmail().equalsIgnoreCase(user.getEmail()) && UserDAO.findUserByEmail(user.getEmail()) != null) {
            throw new IllegalArgumentException("Email already exists: " + user.getEmail());
        }

        // 4. Persist the changes.
        UserDAO.updateUser(user);

        // 5. Handle Admin role update.
        if (user instanceof Admin admin) {
            UserDAO.updateAdminRole(admin.getUserId(), admin.getRole());
        } else if (existingUser.getUserType() == UserType.ADMIN && user.getUserType() != UserType.ADMIN) {
            // If user's role was changed FROM Admin, remove their entry.
            UserDAO.updateAdminRole(user.getUserId(), null);
        }

        // 6. Update password if provided.
        if (newPassword != null && !newPassword.trim().isEmpty()) {
            this.updateUserPassword(user.getUserId(), newPassword);
        }
    }

    public List<Artist> getAllArtists() throws SQLException {
        return UserDAO.getAllArtists();
    }

    public LinkedList<User> getAllUsers() throws SQLException {
        return UserDAO.getUsers();
    }

    public void addUser(User user) throws IOException, SQLException {
        if (user == null) {
            throw new IllegalArgumentException("User cannot be null");
        }
        UserValidator validator = UserValidator.forUser(user);
        validator.validate(user);
        if (findUserByEmail(user.getEmail()) != null) {
            throw new IllegalArgumentException("Email already exists: " + user.getEmail());
        }
        UserDAO.addUser(user);
    }

    public void removeUser(User user) throws IOException, SQLException {
        if (user == null || user.getUserId() <= 0) {
            throw new IllegalArgumentException("Invalid user for removal");
        }
        UserDAO.removeUser(user);
    }

    public User findUserById(int userId) throws SQLException {
        if (userId <= 0) {
            throw new IllegalArgumentException("Invalid user ID: " + userId);
        }
        return UserDAO.findUserById(userId);
    }

    public User findUserByEmail(String email) throws SQLException {
        if (email == null || email.trim().isEmpty()) {
            return null;
        }
        return UserDAO.findUserByEmail(email.trim());
    }

    public void updateUserPassword(int userId, String newPassword) throws IOException, SQLException {
        if (userId <= 0) {
            throw new IllegalArgumentException("Invalid user ID: " + userId);
        }
        if (newPassword == null || newPassword.trim().isEmpty()) {
            throw new IllegalArgumentException("Password cannot be null or empty");
        }
        User user = findUserById(userId);
        if (user == null) {
            throw new SQLException("User not found with ID: " + userId);
        }
        // Create a temporary user of the same type just for password validation
        User tempUser = UserFactory.createUser(user.getUserType().name().toLowerCase(), "dummy", "dummy", "dummy@email.com", newPassword);
        UserValidator validator = UserValidator.forUser(tempUser);
        validator.validate(tempUser); // This will check password length rules for the specific user type

        UserDAO.updateUserPassword(userId, newPassword.trim());
    }

    public void updateAdminRole(int userId, AdminRole newRole) throws SQLException {
        if (userId <= 0) {
            throw new IllegalArgumentException("Invalid user ID: " + userId);
        }
        User user = findUserById(userId);
        if (user == null) {
            throw new SQLException("User not found with ID: " + userId);
        }
        if (newRole != null && user.getUserType() == UserType.ADMIN) {
            UserValidator validator = UserValidator.forUser(user);
            if (validator.strategy instanceof AdminUserValidator) {
                ((AdminUserValidator) validator.strategy).validateRole(newRole);
            }
        }
        UserDAO.updateAdminRole(userId, newRole);
    }
}

--- main/java/service/validators/AdvertisementValidation/AdvertisementValidator.java ---

package service.validators.AdvertisementValidation;

import model.Advertisement;

public class AdvertisementValidator {
    private AdvertisementValidatorStrategy strategy = new BasicAdvertisementValidator();

    public void validate(Advertisement ad) {
        strategy.validate(ad);
    }

    public void setStrategy(AdvertisementValidatorStrategy strategy) {
        this.strategy = strategy;
    }

    public static AdvertisementValidator forType(String type) {
        return new AdvertisementValidator();
    }
}

--- main/java/service/validators/AdvertisementValidation/AdvertisementValidatorStrategy.java ---

package service.validators.AdvertisementValidation;

import model.Advertisement;

public interface AdvertisementValidatorStrategy {
    void validate(Advertisement ad) throws IllegalArgumentException;
}

--- main/java/service/validators/AdvertisementValidation/BasicAdvertisementValidator.java ---

package service.validators.AdvertisementValidation;

import model.Advertisement;

class BasicAdvertisementValidator implements AdvertisementValidatorStrategy {
    private static final int MAX_TITLE_LENGTH = 100;
    private static final int MAX_CONTENT_LENGTH = 255;
    private static final int MAX_IMAGE_URL_LENGTH = 255;
    private static final long MAX_IMAGE_SIZE = 10 * 1024 * 1024; // 10MB

    @Override
    public void validate(Advertisement ad) {
        if (ad.getTitle() == null || ad.getTitle().trim().isEmpty() || ad.getTitle().length() > MAX_TITLE_LENGTH) {
            throw new IllegalArgumentException("Invalid title: must be non-empty and <= " + MAX_TITLE_LENGTH + " chars");
        }
        if (ad.getContent() == null || ad.getContent().trim().isEmpty() || ad.getContent().length() > MAX_CONTENT_LENGTH) {
            throw new IllegalArgumentException("Invalid content: must be non-empty and <= " + MAX_CONTENT_LENGTH + " chars");
        }
        if (ad.getImageUrl() != null && ad.getImageUrl().length() > MAX_IMAGE_URL_LENGTH) {
            throw new IllegalArgumentException("Invalid image URL: <= " + MAX_IMAGE_URL_LENGTH + " chars");
        }
        if (ad.getImageData() != null && ad.getImageData().length > MAX_IMAGE_SIZE) {
            throw new IllegalArgumentException("Image too large: max " + MAX_IMAGE_SIZE + " bytes");
        }
        if (ad.getStartDate() == null || ad.getEndDate() == null || ad.getStartDate().isAfter(ad.getEndDate())) {
            throw new IllegalArgumentException("Invalid dates: start must be before end");
        }
    }
}


--- main/java/service/validators/OrderValidation/AdminOrderValidator.java ---

package service.validators.OrderValidation;

import model.Order;
import model.enums.OrderStatus;

import java.util.List;

class AdminOrderValidator implements OrderValidatorStrategy {
    private static final List<OrderStatus> VALID_STATUSES = List.of(
            OrderStatus.PENDING,
            OrderStatus.COMPLETED,
            OrderStatus.CANCELLED,
            OrderStatus.REFUNDED
    );

    @Override
    public void validate(Order order) throws IllegalArgumentException {
        if (order.getUserId() <= 0) {
            throw new IllegalArgumentException("Invalid user ID: must be positive");
        }
        if (order.getStatus() == null || !VALID_STATUSES.contains(order.getStatus())) {
            throw new IllegalArgumentException("Invalid status provided: " + order.getStatus());
        }
    }
}

--- main/java/service/validators/OrderValidation/BasicOrderValidator.java ---

package service.validators.OrderValidation;

import model.Order;
import model.enums.OrderStatus;

import java.time.LocalDateTime;
import java.util.List;

class BasicOrderValidator implements OrderValidatorStrategy {
    private static final double MIN_TOTAL_AMOUNT = 0.0;
    // Change this list from String to OrderStatus
    private static final List<OrderStatus> VALID_STATUSES = List.of(
            OrderStatus.PENDING,
            OrderStatus.COMPLETED,
            OrderStatus.CANCELLED,
            OrderStatus.REFUNDED
    );

    @Override
    public void validate(Order order) {
        if (order.getUserId() <= 0) {
            throw new IllegalArgumentException("Invalid user ID: must be positive");
        }
        // This validation is for new orders, so trackIds must be present.
        if (order.getTrackIds() == null || order.getTrackIds().isEmpty()) {
            throw new IllegalArgumentException("Order must have at least one track");
        }
        if (order.getTotalAmount() < MIN_TOTAL_AMOUNT) {
            throw new IllegalArgumentException("Total amount must be non-negative");
        }
        // This check will now correctly compare an enum with a list of enums
        if (order.getStatus() == null || !VALID_STATUSES.contains(order.getStatus())) {
            throw new IllegalArgumentException("Invalid status: must be one of " + VALID_STATUSES);
        }
        if (order.getOrderDate() == null || order.getOrderDate().isAfter(LocalDateTime.now())) {
            throw new IllegalArgumentException("Order date must be in the past or present");
        }
        if (order.getPaymentMethod() == null || order.getPaymentMethod().trim().isEmpty()) {
            throw new IllegalArgumentException("Payment method is required");
        }
    }
}

--- main/java/service/validators/OrderValidation/OrderValidator.java ---

package service.validators.OrderValidation;

import model.Order;

public class OrderValidator {
    private OrderValidatorStrategy strategy = new BasicOrderValidator();

    public void validate(Order order) {
        strategy.validate(order);
    }

    public void setStrategy(OrderValidatorStrategy strategy) {
        this.strategy = strategy;
    }

    public static OrderValidator forType(String type) {
        if ("admin".equals(type)) {
            OrderValidator validator = new OrderValidator();
            validator.setStrategy(new AdminOrderValidator());
            return validator;
        }
        // Default is the BasicOrderValidator for customer-initiated orders
        return new OrderValidator();
    }
}

--- main/java/service/validators/OrderValidation/OrderValidatorStrategy.java ---

package service.validators.OrderValidation;

import model.Order;

public interface OrderValidatorStrategy {
    void validate(Order order) throws IllegalArgumentException;
}




--- main/java/service/validators/PromotionValidation/BasicPromotionValidator.java ---

package service.validators.PromotionValidation;

import model.Promotion;

class BasicPromotionValidator implements PromotionValidatorStrategy {
    private static final int MAX_CODE_LENGTH = 50;
    private static final int MAX_DESCRIPTION_LENGTH = 255;
    private static final double MIN_DISCOUNT = 0.0;
    private static final double MAX_DISCOUNT = 100.0;

    @Override
    public void validate(Promotion promotion) {
        if (promotion.getCode() == null || promotion.getCode().trim().isEmpty() || promotion.getCode().length() > MAX_CODE_LENGTH) {
            throw new IllegalArgumentException("Invalid code: non-empty and <= " + MAX_CODE_LENGTH + " chars");
        }
        if (promotion.getDiscount() < MIN_DISCOUNT || promotion.getDiscount() > MAX_DISCOUNT) {
            throw new IllegalArgumentException("Invalid discount: between " + MIN_DISCOUNT + " and " + MAX_DISCOUNT + "%");
        }
        if (promotion.getDescription() != null && promotion.getDescription().length() > MAX_DESCRIPTION_LENGTH) {
            throw new IllegalArgumentException("Invalid description: <= " + MAX_DESCRIPTION_LENGTH + " chars");
        }
        if (promotion.getStartDate() == null || promotion.getEndDate() == null || promotion.getStartDate().isAfter(promotion.getEndDate())) {
            throw new IllegalArgumentException("Invalid dates: start must be before end");
        }
    }
}

--- main/java/service/validators/PromotionValidation/PromotionValidator.java ---

package service.validators.PromotionValidation;

import model.Promotion;

public class PromotionValidator {
    private PromotionValidatorStrategy strategy = new BasicPromotionValidator();

    public void validate(Promotion promotion) {
        strategy.validate(promotion);
    }

    public void setStrategy(PromotionValidatorStrategy strategy) {
        this.strategy = strategy;
    }

    // For future extensibility (e.g., LimitedTimePromotionValidator)
    public static PromotionValidator forType(String type) {
        // Default for now
        return new PromotionValidator();
    }
}

--- main/java/service/validators/PromotionValidation/PromotionValidatorStrategy.java ---

package service.validators.PromotionValidation;

import model.Promotion;

public interface PromotionValidatorStrategy {
    void validate(Promotion promotion) throws IllegalArgumentException;
}

--- main/java/service/validators/UserValidation/AdminUserValidator.java ---

package service.validators.UserValidation;

import model.Admin;
import model.User;
import model.enums.AdminRole;

public class AdminUserValidator implements UserValidatorStrategy {

    private final StandardUserValidator standardValidator = new StandardUserValidator();
    private static final int MIN_ADMIN_PASSWORD_LENGTH = 8;

    @Override
    public void validate(User user) {
        standardValidator.validate(user);

        if (!(user instanceof Admin)) {
            throw new IllegalArgumentException("AdminUserValidator can only validate Admin users");
        }

        Admin admin = (Admin) user;

        // Stricter password for admins
        String password = user.getPassword();
        if (password != null && password.length() < MIN_ADMIN_PASSWORD_LENGTH) {
            throw new IllegalArgumentException("Admin password must be at least " + MIN_ADMIN_PASSWORD_LENGTH + " characters long");
        }

        if (admin.getRole() != null && !isValidAdminRole(admin.getRole())) {
            throw new IllegalArgumentException("Invalid admin role: " + admin.getRole());
        }
    }

    public void validateRole(AdminRole role) {
        if (role == null) {
            return;
        }
        if (!isValidAdminRole(role)) {
            throw new IllegalArgumentException("Invalid admin role: " + role);
        }
    }

    private boolean isValidAdminRole(AdminRole role) {
        return AdminRole.valueOf(role.name()) != null; // Fixed: Handles null safely if fromRoleName does
    }
}

--- main/java/service/validators/UserValidation/ArtistUserValidator.java ---

package service.validators.UserValidation;

import model.Artist;
import model.User;

import java.util.List;

public class ArtistUserValidator implements UserValidatorStrategy {

    private final StandardUserValidator standardValidator = new StandardUserValidator();
    private static final int MAX_BIO_LENGTH = 500;

    @Override
    public void validate(User user) {
        // First, run all standard user validations (name, email, etc.)
        standardValidator.validate(user);

        if (!(user instanceof Artist artist)) {
            throw new IllegalArgumentException("ArtistUserValidator can only validate Artist users");
        }

        // Validate bio (this rule is always enforced for artists)
        String bio = artist.getBio();
        if (bio == null || bio.trim().isEmpty()) {
            throw new IllegalArgumentException("Artist bio cannot be null or empty");
        }
        if (bio.length() > MAX_BIO_LENGTH) {
            throw new IllegalArgumentException("Bio cannot exceed " + MAX_BIO_LENGTH + " characters");
        }

        // Validate specialized genres ONLY if the list exists (is not null).
        // This allows the validator to work for updates where genres are not being modified.
        List<String> specializedGenres = artist.getSpecializedGenres();
        if (specializedGenres != null) {
            if (specializedGenres.isEmpty()) {
                throw new IllegalArgumentException("Artist must have at least 1 specialized genre(s)");
            }
            for (String genre : specializedGenres) {
                if (genre == null || genre.trim().isEmpty() || genre.length() > 50) {
                    throw new IllegalArgumentException("Invalid specialized genre: " + genre);
                }
            }
        }
    }
}

--- main/java/service/validators/UserValidation/StandardUserValidator.java ---

package service.validators.UserValidation;

import model.User;

import java.util.List;
import java.util.regex.Pattern;

public class StandardUserValidator implements UserValidatorStrategy {

    private static final Pattern EMAIL_PATTERN = Pattern.compile(
            "^[A-Za-z0-9+_.-]+@([A-Za-z0-9.-]+\\.[A-Za-z]{2,})$"
    );
    private static final int MIN_PASSWORD_LENGTH = 4;
    private static final int MAX_NAME_LENGTH = 50;
    private static final int MAX_EMAIL_LENGTH = 100;
    private static final int MAX_PASSWORD_LENGTH = 255;

    @Override
    public void validate(User user) {
        validateUserFields(
                user.getFirstName(),
                user.getLastName(),
                user.getEmail(),
                user.getPassword()
        );
        validateLikedGenres(user.getLikedGenres());
    }

    private void validateUserFields(String firstName, String lastName, String email, String password) {
        if (firstName == null || firstName.trim().isEmpty()) {
            throw new IllegalArgumentException("First name cannot be null or empty");
        }
        if (firstName.length() > MAX_NAME_LENGTH) {
            throw new IllegalArgumentException("First name cannot exceed " + MAX_NAME_LENGTH + " characters");
        }

        if (lastName == null || lastName.trim().isEmpty()) {
            throw new IllegalArgumentException("Last name cannot be null or empty");
        }
        if (lastName.length() > MAX_NAME_LENGTH) {
            throw new IllegalArgumentException("Last name cannot exceed " + MAX_NAME_LENGTH + " characters");
        }

        if (email == null || email.trim().isEmpty()) {
            throw new IllegalArgumentException("Email cannot be null or empty");
        }
        if (email.length() > MAX_EMAIL_LENGTH) {
            throw new IllegalArgumentException("Email cannot exceed " + MAX_EMAIL_LENGTH + " characters");
        }
        if (!EMAIL_PATTERN.matcher(email.trim()).matches()) {
            throw new IllegalArgumentException("Invalid email format: " + email);
        }

        if (password != null) {
            if (password.length() < MIN_PASSWORD_LENGTH) {
                throw new IllegalArgumentException("Password must be at least " + MIN_PASSWORD_LENGTH + " characters long");
            }
            if (password.length() > MAX_PASSWORD_LENGTH) {
                throw new IllegalArgumentException("Password cannot exceed " + MAX_PASSWORD_LENGTH + " characters");
            }
        }
    }

    private void validateLikedGenres(List<String> likedGenres) {
        if (likedGenres != null) {
            for (String genre : likedGenres) {
                if (genre == null || genre.trim().isEmpty() || genre.length() > 50) {
                    throw new IllegalArgumentException("Invalid genre: " + genre);
                }
            }
        }
    }
}

--- main/java/service/validators/UserValidation/UserValidator.java ---

package service.validators.UserValidation;

import model.User;
import model.enums.UserType;

public class UserValidator {

    public UserValidatorStrategy strategy;

    public UserValidator(UserValidatorStrategy strategy) {
        this.strategy = strategy;
    }

    public void validate(User user) throws IllegalArgumentException {
        if (strategy == null) {
            throw new IllegalStateException("No validation strategy set");
        }
        strategy.validate(user);
    }

    public void setStrategy(UserValidatorStrategy strategy) {
        this.strategy = strategy;
    }

    public static UserValidator forUser(User user) {
        UserType userType = user.getUserType();
        return switch (userType) {
            case ADMIN -> new UserValidator(new AdminUserValidator());
            case ARTIST -> new UserValidator(new ArtistUserValidator());
            default -> new UserValidator(new StandardUserValidator());
        };
    }
}

--- main/java/service/validators/UserValidation/UserValidatorStrategy.java ---

package service.validators.UserValidation;

import model.User;

public interface UserValidatorStrategy {
    void validate(User user) throws IllegalArgumentException;
}




--- main/java/utils/AudioUploadUtil.java ---

// In utils/AudioUploadUtil.java
package utils;

import jakarta.servlet.http.Part;
import ws.schild.jave.Encoder;
import ws.schild.jave.MultimediaObject;
import ws.schild.jave.encode.AudioAttributes;
import ws.schild.jave.encode.EncodingAttributes;

import java.io.File;
import java.io.IOException;
import java.nio.file.Paths;

public class AudioUploadUtil {

    private static final String UPLOAD_DIR = "uploads";

    public static class AudioUploadResult {
        private final String fullTrackPath;
        private final String snippetPath;

        public AudioUploadResult(String fullTrackPath, String snippetPath) {
            this.fullTrackPath = fullTrackPath;
            this.snippetPath = snippetPath;
        }

        public String getFullTrackPath() {
            return fullTrackPath;
        }

        public String getSnippetPath() {
            return snippetPath;
        }
    }

    public static AudioUploadResult handleAudioUpload(Part filePart, String realPath) throws IOException {
        String fileName = Paths.get(filePart.getSubmittedFileName()).getFileName().toString();
        File uploadDir = new File(realPath + File.separator + UPLOAD_DIR);
        if (!uploadDir.exists()) uploadDir.mkdirs();

        File fullTrackFile = new File(uploadDir, fileName);
        filePart.write(fullTrackFile.getAbsolutePath());

        // Generate Snippet
        String snippetFileName = "snippet_" + fileName;
        File snippetFile = new File(uploadDir, snippetFileName);
        createSnippet(fullTrackFile, snippetFile);

        return new AudioUploadResult(
                UPLOAD_DIR + "/" + fileName,
                UPLOAD_DIR + "/" + snippetFileName
        );
    }

    private static void createSnippet(File source, File target) {
        try {
            AudioAttributes audio = new AudioAttributes();
            // Set audio attributes if needed (e.g., codec, bit rate)

            EncodingAttributes attrs = new EncodingAttributes();
            attrs.setAudioAttributes(audio);
            attrs.setDuration(30F); // Create a 30-second snippet

            Encoder encoder = new Encoder();
            encoder.encode(new MultimediaObject(source), target, attrs);
        } catch (Exception e) {
            e.printStackTrace(); // Handle encoding exception
        }
    }
}

--- main/java/utils/DatabaseConnection.java ---

package utils;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;

public class DatabaseConnection {
    private static String DB_URL = "jdbc:mysql://localhost:3306/music_db?allowPublicKeyRetrieval=true&useSSL=false&serverTimezone=UTC";
    private static String DB_USER = "root";
    private static String DB_PASSWORD = "1234";

    public static Connection getConnection() throws SQLException {

        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
        } catch (ClassNotFoundException e) {
            System.out.println("Driver not found: " + e.getMessage());
        }

        return DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
    }

}


--- main/java/utils/EmailHandleUtil.java ---

package utils;

import jakarta.mail.*;
import jakarta.mail.internet.InternetAddress;
import jakarta.mail.internet.MimeMessage;

import java.util.Properties;

public class EmailHandleUtil {
    public static void sendMail(String to, String subject, String body) throws Exception {
        final String username = "prageethperera2002@gmail.com";   // Your Gmail
        final String password = "bgma yxkv cvsq glzw";    // 16-char app password

        Properties props = new Properties();
        props.put("mail.smtp.auth", "true");
        props.put("mail.smtp.starttls.enable", "true");
        props.put("mail.smtp.host", "smtp.gmail.com");
        props.put("mail.smtp.port", "587"); // TLS port

        Session session = Session.getInstance(props, new Authenticator() {
            @Override
            protected PasswordAuthentication getPasswordAuthentication() {
                return new PasswordAuthentication(username, password);
            }
        });

        Message message = new MimeMessage(session);
        message.setFrom(new InternetAddress(username));
        message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(to));
        message.setSubject(subject);

        message.setContent(body, "text/html; charset=utf-8");

        Transport.send(message);
        System.out.println("Email sent successfully to " + to);
    }

}


--- main/java/utils/ImageUploadUtil.java ---

package utils;

import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.Part;

import java.io.IOException;
import java.io.InputStream;

public class ImageUploadUtil {

    private static final String[] ALLOWED_EXTENSIONS = {".png", ".jpg", ".jpeg"};
    private static final long MAX_FILE_SIZE = 1024 * 1024 * 10;  // 10MB

    /**
     * Handles image upload: validates, reads bytes, and generates a simple URL.
     *
     * @param request   The multipart request.
     * @param fieldName The form field name for the image (default: "imageFile").
     * @return An ImageUploadResult with bytes and URL, or null if no image.
     * @throws IOException      If read error.
     * @throws ServletException If validation fails.
     */
    public ImageUploadResult handleImageUpload(HttpServletRequest request, String fieldName) throws IOException, ServletException {
        Part filePart = request.getPart(fieldName);
        if (filePart == null || filePart.getSize() == 0) {
            return null;  // No image uploaded
        }

        if (filePart.getSize() > MAX_FILE_SIZE) {
            throw new ServletException("Image too large. Max size: 10MB.");
        }

        String fileName = extractFileName(filePart);
        String extension = getExtension(fileName);
        if (!isValidExtension(extension)) {
            throw new ServletException("Invalid image type. Only PNG, JPG, and JPEG are allowed.");
        }

        byte[] imageData;
        try (InputStream input = filePart.getInputStream()) {
            imageData = input.readAllBytes();
        }

        String imageUrl = generateImageUrl(fileName, extension);
        return new ImageUploadResult(imageData, imageUrl);
    }

    private String extractFileName(Part part) {
        String contentDisp = part.getHeader("content-disposition");
        if (contentDisp == null) return "";
        String[] items = contentDisp.split(";");
        for (String s : items) {
            if (s.trim().startsWith("filename")) {
                return s.substring(s.indexOf("=") + 2, s.length() - 1).trim();
            }
        }
        return "";
    }

    private String getExtension(String fileName) {
        return fileName.contains(".") ? fileName.substring(fileName.lastIndexOf(".")) : "";
    }

    private boolean isValidExtension(String extension) {
        for (String allowedExt : ALLOWED_EXTENSIONS) {
            if (allowedExt.equalsIgnoreCase(extension)) {
                return true;
            }
        }
        return false;
    }

    private String generateImageUrl(String fileName, String extension) {
        // Simple timestamp-based URL; in production, use secure storage (e.g., S3) and real paths
        return "/uploads/" + System.currentTimeMillis() + extension;
    }

    // Inner result class for convenience
    public record ImageUploadResult(byte[] imageData, String imageUrl) {
    }
}

--- main/java/utils/json/LocalDateAdapter.java ---

package utils.json;

import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.io.IOException;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;

/**
 * Gson TypeAdapter for Java 8's LocalDate class.
 * Serializes LocalDate to an ISO-8601 string (e.g., "2025-10-20").
 */
public class LocalDateAdapter extends TypeAdapter<LocalDate> {

    private static final DateTimeFormatter formatter = DateTimeFormatter.ISO_LOCAL_DATE;

    @Override
    public void write(final JsonWriter jsonWriter, final LocalDate localDate) throws IOException {
        if (localDate == null) {
            jsonWriter.nullValue();
        } else {
            jsonWriter.value(formatter.format(localDate));
        }
    }

    @Override
    public LocalDate read(final JsonReader jsonReader) throws IOException {
        if (jsonReader.peek() == com.google.gson.stream.JsonToken.NULL) {
            jsonReader.nextNull();
            return null;
        } else {
            return LocalDate.parse(jsonReader.nextString(), formatter);
        }
    }
}

--- main/java/utils/PasswordUtil.java ---

package utils;

import org.mindrot.jbcrypt.BCrypt;

public class PasswordUtil {

    // Hash the password
    public static String hashPassword(String plainPassword) {
        return BCrypt.hashpw(plainPassword, BCrypt.gensalt(12));
    }

    // Verify entered password against stored hash
    public static boolean checkPassword(String plainPassword, String hashedPassword) {
        return BCrypt.checkpw(plainPassword, hashedPassword);
    }
}


--- main/webapp/admin/css/admin-styles.css ---

/* Admin-specific styles for manage-users.jsp, manage-marketing.jsp, manage-orders.jsp */
@import "theme.css";

/* Table Styles */
.table-container {
    background-color: var(--card-bg);
    border-radius: var(--border-radius);
    padding: 1.5rem;
    border: 1px solid #333;
    margin-bottom: 2rem;
    overflow-x: auto;
}

.table-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1.5rem;
}

.table-header h3 {
    color: var(--text-primary);
    font-size: var(--font-size-subheading);
    margin: 0;
}

.table-actions {
    display: flex;
    gap: 0.75rem;
}

table {
    width: 100%;
    border-collapse: collapse;
    color: var(--text-primary);
}

/* Add or modify these styles */
th, td {
    padding: 0.875rem;
    text-align: left;
    border-bottom: 1px solid #333;
    font-size: var(--font-size-small);
    vertical-align: middle; /* Center content vertically */
    min-height: 100px; /* Match preview-img height */
}

th {
    background-color: rgba(42, 42, 42, 0.5);
    color: var(--text-secondary);
    font-weight: 600;
}

td.actions {
    display: flex;
    gap: 0.5rem;
    align-items: center; /* Center buttons vertically */
}

.btn-sm {
    padding: 0.375rem 0.75rem;
    font-size: var(--font-size-label);
    height: 100%; /* Fill the cell height */
    box-sizing: border-box; /* Include padding in height */
}

tr:hover {
    background-color: rgba(42, 42, 42, 0.3);
}

.actions {
    display: flex;
    gap: 0.5rem;

}

.btn {
    padding: 0.5rem 1rem;
    border-radius: var(--border-radius);
    border: none;
    cursor: pointer;
    transition: var(--transition);
    font-size: var(--font-size-small);
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
}

.btn-primary {
    background-color: var(--primary);
    color: #000;
}

.btn-primary:hover {
    background-color: #9965f4;
}

.btn-secondary {
    background-color: #2a2a2a;
    color: var(--text-primary);
}

.btn-secondary:hover {
    background-color: #3a3a3a;
}

.btn-edit {
    background-color: var(--secondary);
    color: #000;
}

.btn-edit:hover {
    background-color: #02b3a1;
}

.btn-delete {
    background-color: #dc3545;
    color: #fff;
}

.btn-delete:hover {
    background-color: #c82333;
}

.btn-sm {
    padding: 0.375rem 0.75rem;
    font-size: var(--font-size-label);
}

/* Modal Styles */
.modal-content {
    background-color: var(--card-bg);
    color: var(--text-primary);
    border: 1px solid #333;
    border-radius: var(--border-radius);
}

.modal-header {
    border-bottom: 1px solid #333;
    padding: 1.25rem 1.5rem;
}

.modal-title {
    color: var(--text-primary);
    font-size: var(--font-size-subheading);
}

.modal-body {
    padding: 1.5rem;
}

.modal-footer {
    border-top: 1px solid #333;
    padding: 1.25rem 1.5rem;
}

.form-group {
    margin-bottom: 1.25rem;
}

.form-group label {
    display: block;
    color: var(--text-secondary);
    margin-bottom: 0.5rem;
    font-size: var(--font-size-label);
    font-weight: 500;
}

.form-control {
    width: 100%;
    padding: 0.75rem;
    border: 1px solid #444;
    border-radius: var(--border-radius);
    background-color: #2a2a2a;
    color: var(--text-primary);
    font-size: var(--font-size-small);
    transition: var(--transition);
}

.form-control:focus {
    border-color: var(--primary);
    box-shadow: 0 0 0 0.25rem rgba(187, 134, 252, 0.25);
    outline: none;
}

/* Image Preview */
.preview-img {
    width: 100px;
    height: 60px;
    border-radius: var(--border-radius);
    object-fit: cover;
    border: 1px solid #333;
    vertical-align: middle; /* Align image with other content */
}

/* Status Badges */
.status-badge {
    display: inline-block;
    padding: 0.25rem 0.75rem;
    border-radius: 20px;
    font-size: var(--font-size-label);
    font-weight: 500;
}

.status-active {
    background-color: rgba(3, 218, 198, 0.2);
    color: var(--secondary);
}

.status-inactive {
    background-color: rgba(220, 53, 69, 0.2);
    color: #dc3545;
}

.status-pending {
    background-color: rgba(255, 193, 7, 0.2);
    color: #ffc107;
}

/* Image Preview */
.image-preview {
    width: 100px;
    height: 100px;
    border-radius: var(--border-radius);
    object-fit: cover;
    border: 1px solid #333;
}

.text-muted {
    color: var(--text-secondary) !important;
}

/* Artist Profile Styles */
.artist-profile-card {
    background: rgba(42, 42, 42, 0.5);
    padding: 1.5rem;
    border-radius: var(--border-radius);
    border: 1px solid #333;
}

.artist-avatar {
    color: var(--primary);
}

.artist-stats {
    display: flex;
    justify-content: space-around;
    margin-top: 1rem;
}

.stat-item {
    text-align: center;
}

.stat-number {
    display: block;
    font-size: 1.5rem;
    font-weight: bold;
    color: var(--primary);
}

.stat-label {
    font-size: 0.8rem;
    color: var(--text-secondary);
}

/* Artist Details Styles */
.artist-details .section-title {
    color: var(--primary);
    font-size: 1.1rem;
    margin-bottom: 1rem;
    padding-bottom: 0.5rem;
    border-bottom: 1px solid #333;
}

.detail-item {
    display: flex;
    margin-bottom: 0.75rem;
    align-items: flex-start;
}

.detail-item label {
    min-width: 120px;
    font-weight: 500;
    color: var(--text-secondary);
    margin-right: 1rem;
}

.detail-item span, .detail-item a {
    color: var(--text-primary);
    word-break: break-word;
}

.bio-content {
    background: rgba(42, 42, 42, 0.3);
    padding: 1rem;
    border-radius: var(--border-radius);
    border-left: 3px solid var(--primary);
}

/* Recent Activity Styles */
.recent-activity {
    border-top: 1px solid #333;
    padding-top: 1rem;
}

.activity-list {
    max-height: 200px;
    overflow-y: auto;
}

.activity-item {
    display: flex;
    align-items: center;
    padding: 0.75rem;
    border-bottom: 1px solid #333;
}

.activity-item:last-child {
    border-bottom: none;
}

.activity-icon {
    width: 30px;
    height: 30px;
    background: rgba(187, 134, 252, 0.1);
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    margin-right: 1rem;
    color: var(--primary);
}

.activity-content {
    flex: 1;
}

.activity-text {
    color: var(--text-primary);
    font-size: 0.9rem;
}

.activity-time {
    font-size: 0.8rem;
}

/* Badge Styles */
.badge {
    padding: 0.5rem 1rem;
    border-radius: 20px;
    font-size: 0.8rem;
    font-weight: 500;
}

.verification-badge {
    margin: 1rem 0;
}

/* Responsive Design */
@media (max-width: 768px) {
    .detail-item {
        flex-direction: column;
    }

    .detail-item label {
        min-width: auto;
        margin-bottom: 0.25rem;
    }

    .artist-stats {
        flex-direction: column;
        gap: 1rem;
    }
}

--- main/webapp/admin/css/index.css ---

/* General application styles from index.css */
@import "theme.css";

* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    background-color: var(--dark-bg);
    color: var(--text-primary);
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    font-size: var(--font-size-base);
    line-height: 1.5;
}

/* Admin Layout Styles */
.admin-container {
    display: flex;
    min-height: 100vh;
}

.admin-sidebar {
    width: var(--sidebar-width);
    background-color: var(--card-bg);
    border-right: 1px solid #333;
    position: fixed;
    height: 100vh;
    overflow-y: auto;
    z-index: 1000;
    transition: var(--transition);
}

.sidebar-header {
    padding: 1.5rem;
    border-bottom: 1px solid #333;
    text-align: center;
}

.sidebar-header h2 {
    color: var(--primary);
    font-size: var(--font-size-subheading);
    margin: 0;
}

.sidebar-nav {
    padding: 1rem 0;
}

.sidebar-nav a {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    color: var(--text-secondary);
    text-decoration: none;
    padding: 0.875rem 1.5rem;
    transition: var(--transition);
    font-size: var(--font-size-small);
}

.sidebar-nav a:hover, .sidebar-nav a.active {
    background-color: rgba(187, 134, 252, 0.1);
    color: var(--primary);
    border-left: 3px solid var(--primary);
}

.sidebar-nav i {
    width: 20px;
    text-align: center;
}

.admin-main {
    flex: 1;
    margin-left: var(--sidebar-width);
    padding: 1.5rem;
    transition: var(--transition);
}

.admin-header {
    background-color: var(--card-bg);
    border-radius: var(--border-radius);
    padding: 1.5rem;
    margin-bottom: 1.5rem;
    border: 1px solid #333;
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.admin-header h1 {
    color: var(--text-primary);
    font-size: var(--font-size-heading);
    margin: 0;
}

.user-info {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    color: var(--text-secondary);
    font-size: var(--font-size-small);
}

.user-avatar {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    background-color: var(--primary);
    display: flex;
    align-items: center;
    justify-content: center;
    color: #000;
    font-weight: bold;
}

/* Dashboard Styles */
.welcome-section {
    background-color: var(--card-bg);
    border-radius: var(--border-radius);
    padding: 2rem;
    margin-bottom: 2rem;
    border: 1px solid #333;
    display: flex;
    align-items: center;
    gap: 1.5rem;
}

.welcome-icon {
    width: 80px;
    height: 80px;
    border-radius: 50%;
    background: linear-gradient(135deg, var(--primary), var(--secondary));
    display: flex;
    align-items: center;
    justify-content: center;
    flex-shrink: 0;
}

.welcome-icon i {
    font-size: 2rem;
    color: #000;
}

.welcome-content h2 {
    color: var(--text-primary);
    margin-bottom: 0.5rem;
}

.welcome-content p {
    color: var(--text-secondary);
    margin: 0;
}

.dashboard-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
    gap: 1.5rem;
    margin-bottom: 2rem;
}

.dashboard-card {
    background-color: var(--card-bg);
    border-radius: var(--border-radius);
    padding: 1.5rem;
    border: 1px solid #333;
    transition: var(--transition);
    display: flex;
    flex-direction: column;
    align-items: center;
    text-align: center;
}

.dashboard-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 10px 20px rgba(0, 0, 0, 0.3);
    border-color: var(--primary);
}

.card-icon {
    width: 60px;
    height: 60px;
    border-radius: 50%;
    background-color: rgba(187, 134, 252, 0.1);
    display: flex;
    align-items: center;
    justify-content: center;
    margin-bottom: 1rem;
}

.card-icon i {
    font-size: 1.5rem;
    color: var(--primary);
}

.card-title {
    font-size: var(--font-size-subheading);
    margin-bottom: 0.5rem;
    color: var(--text-primary);
}

.card-description {
    color: var(--text-secondary);
    font-size: var(--font-size-small);
    margin-bottom: 1rem;
}

.card-link {
    color: var(--primary);
    text-decoration: none;
    font-weight: 500;
    font-size: var(--font-size-small);
    display: flex;
    align-items: center;
    gap: 0.5rem;
    transition: var(--transition);
}

.card-link:hover {
    color: var(--secondary);
}

/* Stats Grid */
.stats-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
    gap: 1.5rem;
    margin-bottom: 2rem;
}

.stat-card {
    background-color: var(--card-bg);
    border-radius: var(--border-radius);
    padding: 1.5rem;
    border: 1px solid #333;
    display: flex;
    align-items: center;
    gap: 1rem;
}

.stat-icon {
    width: 50px;
    height: 50px;
    border-radius: 50%;
    background-color: rgba(187, 134, 252, 0.1);
    display: flex;
    align-items: center;
    justify-content: center;
    flex-shrink: 0;
}

.stat-icon i {
    font-size: 1.25rem;
    color: var(--primary);
}

.stat-content h3 {
    color: var(--text-primary);
    font-size: 1.5rem;
    margin: 0;
}

.stat-content p {
    color: var(--text-secondary);
    font-size: var(--font-size-small);
    margin: 0;
}

/* Footer */
.admin-footer {
    background-color: #1a1a1a;
    color: var(--text-secondary);
    text-align: center;
    padding: 1.5rem;
    margin-top: 2rem;
    border-radius: var(--border-radius);
    font-size: var(--font-size-small);
}

/* Responsive Design */
@media (max-width: 992px) {
    .admin-sidebar {
        transform: translateX(-100%);
    }

    .admin-sidebar.active {
        transform: translateX(0);
    }

    .admin-main {
        margin-left: 0;
    }
}

@media (max-width: 768px) {
    .dashboard-grid {
        grid-template-columns: 1fr;
    }

    .welcome-section {
        flex-direction: column;
        text-align: center;
    }
}

--- main/webapp/admin/css/theme.css ---

/* theme.css - Updated with proper font sizes */
:root {
    --dark-bg: #121212;
    --card-bg: #1e1e1e;
    --primary: #bb86fc;
    --secondary: #03dac6;
    --text-primary: #ffffff;
    --text-secondary: #b3b3b3;
    --placeholder-color: #888;
    --font-size-base: 1rem;
    --font-size-heading: 1.5rem;
    --font-size-subheading: 1.25rem;
    --font-size-small: 0.875rem;
    --font-size-label: 0.8rem;
    --border-radius: 8px;
    --sidebar-width: 250px;
    --header-height: 70px;
    --transition: all 0.3s ease;
}

--- main/webapp/community/community-styles.css ---

/* ==========================================================================
   COMMUNITY STYLES - CONSOLIDATED
   This file contains all necessary styles for the community feed,
   post creation/editing, user's posts page, navbar, and footer.
   ========================================================================== */

/* ==========================================================================
   THEME VARIABLES
   ========================================================================== */
:root {
    /* Vibrant Primary Palette */
    --primary: #8A2BE2;
    --primary-hover: #A155E7;

    /* Background Colors */
    --dark-bg: #121212;
    --card-bg: #181818;
    --card-hover: #282828;
    --surface: rgba(69, 21, 113, 0.08);

    /* Text Colors */
    --text-primary: #ffffff;
    --text-secondary: #b3b3b3;
    --text-muted: #535353;

    /* Borders */
    --border-light: rgba(255, 255, 255, 0.08);
    --border-medium: rgba(255, 255, 255, 0.12);

    /* Shadows */
    --shadow-sm: 0 1px 3px rgba(0, 0, 0, 0.4);
    --shadow-md: 0 4px 12px rgba(69, 21, 113, 0.15);
    --shadow-lg: 0 8px 32px rgba(69, 21, 113, 0.1);

    /* Gradients */
    --gradient-primary: linear-gradient(135deg, var(--primary), #D0AAF3);
    --gradient-hover: linear-gradient(135deg, var(--primary-hover), #290C43);

    /* Transitions */
    --transition-fast: 0.15s ease;
    --transition-normal: 0.25s ease;
}

/* ==========================================================================
   BASE STYLES
   ========================================================================== */
* {
    box-sizing: border-box;
}

body {
    background-color: var(--dark-bg);
    color: var(--text-primary);
    font-family: 'Inter', 'Segoe UI', system-ui, -apple-system, sans-serif;
    margin: 0;
    padding: 0;
    line-height: 1.5;
    overflow-x: hidden;
    -webkit-font-smoothing: antialiased;
}

.btn {
    border-radius: 6px;
    font-weight: 500;
    transition: all var(--transition-fast);
    border: none;
    padding: 8px 16px;
    font-size: 0.875rem;
}

.btn-primary {
    background: var(--primary);
    color: #fff;
    border: 1px solid var(--primary);
}

.btn-primary:hover {
    background: var(--primary-hover);
    border-color: var(--primary-hover);
    transform: translateY(-1px);
    box-shadow: var(--shadow-md);
}

.form-control {
    background: var(--card-bg);
    border: 1px solid var(--border-light);
    color: var(--text-primary);
    border-radius: 6px;
    padding: 8px 12px;
    transition: all var(--transition-fast);
}

.form-control:focus {
    background: var(--card-bg);
    border-color: var(--primary);
    color: var(--text-primary);
    box-shadow: 0 0 0 2px rgba(139, 92, 246, 0.1);
}

.form-control::placeholder {
    color: var(--text-muted);
}

/* ==========================================================================
   LAYOUT & SECTIONS
   ========================================================================== */
.container {
    max-width: 1400px;
    margin: 40px auto;
    padding: 0 24px;
}

.section-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 2rem;
    padding: 0 16px 1rem;
    border-bottom: 1px solid var(--border-light);
}

.section-header h2 {
    margin: 0;
    color: var(--text-primary);
    font-size: clamp(1.25rem, 3vw, 1.75rem);
    font-weight: 600;
}

.alert {
    padding: 1rem 1.5rem;
    border-radius: 8px;
    margin: 0 16px 2rem;
    border: 1px solid transparent;
}

.alert-info {
    background-color: rgba(32, 201, 151, 0.1);
    border-color: rgba(32, 201, 151, 0.2);
    color: var(--text-primary);
}

.alert-error, .alert-danger {
    background-color: rgba(220, 53, 69, 0.1);
    border-color: rgba(220, 53, 69, 0.2);
    color: #f8d7da;
}

/* ==========================================================================
   POSTS STYLES
   ========================================================================== */
.posts-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));
    gap: 1.5rem;
    padding: 0 16px;
}

.post-card {
    background: var(--card-bg);
    border: 1px solid var(--border-light);
    border-radius: 8px;
    overflow: hidden;
    display: flex;
    flex-direction: column;
    transition: transform 0.2s ease, border-color 0.2s ease;
    box-shadow: var(--shadow-sm);
}

.post-card:hover {
    transform: translateY(-5px);
    border-color: var(--primary);
    box-shadow: var(--shadow-md);
}

.post-card a {
    text-decoration: none;
    color: inherit;
}

.post-header {
    padding: 1rem 1.25rem;
}

.post-header h3 {
    font-size: 1.1rem;
    font-weight: 600;
    color: var(--text-primary);
    margin: 0 0 0.25rem;
}

.post-header h3 a:hover {
    color: var(--primary);
}

.post-author {
    font-size: 0.8rem;
    color: var(--text-secondary);
}

.post-content {
    padding: 1rem 1.25rem;
    flex-grow: 1;
}

.post-content p {
    color: var(--text-secondary);
    line-height: 1.6;
    margin: 0;
}

.post-images {
    padding: 0; /* Remove padding for carousel */
    margin-bottom: 1rem;
    aspect-ratio: 16 / 9; /* Give the carousel a consistent shape */
    background-color: #000;
}

.carousel-item img {
    width: 100%;
    height: 100%;
    object-fit: contain; /* Use contain to see the whole image without cropping */
}

/* Dark theme for carousel controls */
.carousel-control-prev-icon,
.carousel-control-next-icon {
    filter: invert(1) grayscale(100) brightness(1.5);
}

.carousel-indicators [data-bs-target] {
    background-color: var(--primary);
}

.post-footer {
    padding: 0.75rem 1.25rem;
    background-color: rgba(0, 0, 0, 0.2);
    border-top: 1px solid var(--border-light);
    margin-top: auto;
}

.post-date {
    font-size: 0.75rem;
    color: var(--text-muted);
}

/* ==========================================================================
   CUSTOM COMMUNITY & FORM STYLES
   ========================================================================== */
.community-main {
    min-height: calc(100vh - 200px);
    padding-bottom: 2rem;
}

.posts-list {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
    padding: 0 16px;
}

.post-item {
    background: var(--card-bg);
    border: 1px solid var(--border-light);
    border-radius: 8px;
    padding: 1.25rem;
    transition: all var(--transition-fast);
}

.post-item:hover {
    border-color: var(--primary);
}

.post-item-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    gap: 1rem;
    margin-bottom: 0.75rem;
    flex-wrap: wrap;
}

.post-item-header h3 {
    margin: 0;
    font-size: 1.2rem;
    font-weight: 600;
}

.status-badge {
    padding: 0.25rem 0.6rem;
    font-size: 0.75rem;
    font-weight: 700;
    border-radius: 20px;
    text-transform: uppercase;
    letter-spacing: 0.5px;
    display: inline-block;
    vertical-align: middle;
    margin-left: 0.5rem;
}

.status-pending, .status-submited { background-color: #f39c12; color: #000; }
.status-approved { background-color: #2ecc71; color: #000; }
.status-rejected { background-color: #e74c3c; color: #fff; }

.post-item-actions {
    display: flex;
    gap: 0.5rem;
    align-items: center;
}

.post-item-actions form {
    margin-bottom: 0;
}

.btn-delete {
    background-color: #c23616;
    color: #fff;
    border: 1px solid #c23616;
}

.btn-delete:hover {
    background-color: #e84118;
    border-color: #e84118;
}

.post-description {
    color: var(--text-secondary);
    line-height: 1.6;
    margin: 0;
}

.form-container {
    background: var(--card-bg);
    border: 1px solid var(--border-light);
    border-radius: 8px;
    padding: 2.5rem;
    max-width: 800px;
    margin: 2rem auto;
}

.form-container h2 {
    margin-top: 0;
    margin-bottom: 2rem;
    text-align: center;
    color: var(--text-primary);
}

.form-group {
    margin-bottom: 1.5rem;
}

.form-group label {
    display: block;
    margin-bottom: 0.5rem;
    font-weight: 500;
    color: var(--text-secondary);
}

.form-group input[type="text"],
.form-group textarea,
.form-group input[type="file"] {
    width: 100%;
    background: #2a2a2a;
    border: 1px solid var(--border-light);
    color: var(--text-primary);
    border-radius: 6px;
    padding: 8px 12px;
    transition: all var(--transition-fast);
}

.form-group input[type="text"]:focus,
.form-group textarea:focus {
    border-color: var(--primary);
    box-shadow: 0 0 0 2px rgba(139, 92, 246, 0.1);
}

.form-group textarea {
    resize: vertical;
}

.form-actions {
    display: flex;
    justify-content: flex-end;
    gap: 1rem;
    margin-top: 2rem;
    border-top: 1px solid var(--border-light);
    padding-top: 1.5rem;
}

.btn-secondary {
    background: transparent;
    border: 1px solid var(--border-medium);
    color: var(--text-primary);
}

.btn-secondary:hover {
    background: rgba(255, 255, 255, 0.1);
    border-color: var(--text-secondary);
}

.current-image {
    margin-bottom: 1rem;
}

.current-image p {
    margin-bottom: 0.5rem;
    color: var(--text-secondary);
    font-size: 0.9rem;
}

/* ==========================================================================
   FOOTER
   ========================================================================== */
.footer {
    background: var(--card-bg);
    border-top: 1px solid var(--border-light);
    padding: 30px 0;
    margin-top: 40px;
}

.footer-content {
    max-width: 1200px;
    margin: 0 auto;
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 12px;
    text-align: center;
}

.footer-brand {
    font-size: 1.25rem;
    font-weight: 700;
    color: var(--text-primary);
}

.footer-text {
    color: var(--text-secondary);
    font-size: 0.85rem;
    line-height: 1.4;
    max-width: 400px;
    margin: 0;
}

.footer-copy {
    color: var(--text-muted);
    font-size: 0.8rem;
    margin: 0;
}

/* ==========================================================================
   RESPONSIVE STYLES
   ========================================================================== */
@media (max-width: 768px) {
    .posts-grid {
        grid-template-columns: 1fr;
        gap: 1rem;
        padding: 0 12px;
    }

    .section-header {
        flex-direction: column;
        align-items: flex-start;
        gap: 1rem;
        padding: 0 12px 1rem;
    }

    .alert {
        margin: 0 12px 1.5rem;
    }

    .form-container {
        padding: 1.5rem;
    }
}

--- main/webapp/css/animations.css ---

/* ==========================================================================
   MODERN ANIMATIONS
   ========================================================================== */
@keyframes fadeInUp {
    from {
        opacity: 0;
        transform: translateY(30px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

@keyframes slideInLeft {
    from {
        opacity: 0;
        transform: translateX(-30px);
    }
    to {
        opacity: 1;
        transform: translateX(0);
    }
}

@keyframes slideInRight {
    from {
        opacity: 0;
        transform: translateX(30px);
    }
    to {
        opacity: 1;
        transform: translateX(0);
    }
}

@keyframes scaleIn {
    from {
        opacity: 0;
        transform: scale(0.9);
    }
    to {
        opacity: 1;
        transform: scale(1);
    }
}

@keyframes glowPulse {
    0%, 100% {
        box-shadow: 0 0 20px rgba(139, 92, 246, 0.4);
    }
    50% {
        box-shadow: 0 0 30px rgba(139, 92, 246, 0.8);
    }
}

/* Animation Classes */
.animate-fade-in-up {
    animation: fadeInUp 0.6s ease-out;
}

.animate-slide-in-left {
    animation: slideInLeft 0.6s ease-out;
}

.animate-slide-in-right {
    animation: slideInRight 0.6s ease-out;
}

.animate-scale-in {
    animation: scaleIn 0.4s ease-out;
}

.animate-glow {
    animation: glowPulse 2s ease-in-out infinite;
}

/* Staggered animations for cards */
.compact-music-card {
    animation: fadeInUp 0.6s ease-out;
}

.compact-music-card:nth-child(odd) {
    animation-delay: 0.1s;
}

.compact-music-card:nth-child(even) {
    animation-delay: 0.2s;
}

--- main/webapp/css/artist-profile.css ---

@import "theme.css";
@import "modules/_navbar.css";
@import "modules/_components.css";

body {
    background-color: var(--dark-bg);
    color: var(--text-primary);
}

.profile-header {
    background-color: var(--card-bg);
    padding: 2rem;
    border-radius: var(--border-radius);
    display: flex;
    align-items: center;
    gap: 2rem;
    margin-bottom: 2rem;
    border: 1px solid var(--border-light);
}

.artist-avatar {
    color: var(--primary);
}

.artist-info h1 {
    font-weight: 700;
    margin: 0;
}

.artist-stats {
    display: flex;
    gap: 1.5rem;
    color: var(--text-secondary);
    margin-top: 0.5rem;
}

.profile-actions {
    margin-left: auto;
}

.profile-section {
    background-color: var(--card-bg);
    padding: 2rem;
    border-radius: var(--border-radius);
    margin-bottom: 2rem;
    border: 1px solid var(--border-light);
}

.profile-section h2 {
    font-size: 1.5rem;
    font-weight: 600;
    margin-bottom: 1rem;
    padding-bottom: 0.5rem;
    border-bottom: 1px solid var(--border-light);
}

.table .actions {
    display: flex;
    gap: 0.5rem;
}


--- main/webapp/css/cart-fixes.css ---

/* Cart & Navbar Emergency Fixes */
.cart-btn-nav {
    position: relative !important;
    padding: 8px 12px !important;
}

.cart-badge {
    position: absolute !important;
    top: -6px !important;
    right: -6px !important;
    background: var(--primary) !important;
    color: #000 !important;
    border-radius: 10px !important;
    min-width: 18px !important;
    height: 18px !important;
    font-size: 0.7rem !important;
    font-weight: 700 !important;
    display: flex !important;
    align-items: center !important;
    justify-content: center !important;
    border: 2px solid var(--dark-bg) !important;
}

/* Ensure modal dark theme */
.modal-content {
    background-color: var(--card-bg) !important;
    color: var(--text-primary) !important;
}

.modal-header, .modal-footer {
    border-color: var(--border-light) !important;
}

/* Navbar search fix */
.navbar .input-group {
    background: var(--card-bg) !important;
    border: 1px solid var(--border-light) !important;
}

.navbar .input-group .form-control {
    background: transparent !important;
    color: var(--text-primary) !important;
}

--- main/webapp/css/index.css ---

@import "theme.css";
@import "modules/_base.css";
@import "modules/_navbar.css";
@import "modules/_banner.css";
@import "modules/_layout.css";
@import "modules/_modal.css";
@import "modules/_search.css";
@import "modules/_components.css";
@import "modules/_posts.css";
@import "animations.css";
@import "modules/_responsive.css";


--- main/webapp/css/login.css ---

@import "theme.css";

body {
    background-color: var(--dark-bg);
    color: var(--text-primary);
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    min-height: 100vh;
    display: flex;
    flex-direction: column;
    box-sizing: border-box; /* Ensures consistent box model */
}

.auth-container {
    display: flex;
    justify-content: center;
    align-items: center;
    flex-grow: 1;
    padding: 2rem;
}

.auth-card {
    background-color: var(--card-bg);
    border-radius: 10px;
    padding: 2.5rem;
    width: 100%;
    max-width: 450px;
    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.5);
    transition: box-shadow 0.3s ease; /* Smooth hover effect */
}

.auth-card:hover {
    box-shadow: 0 15px 35px rgba(0, 0, 0, 0.6); /* Subtle elevation on hover */
}

.auth-header {
    text-align: center;
    margin-bottom: 2rem;
}

.auth-icon {
    font-size: 2.5rem;
    color: var(--primary);
    margin-bottom: 1rem;
    transition: transform 0.3s ease; /* Icon animation */
}

.auth-icon:hover {
    transform: scale(1.1); /* Slight scale on hover for interactivity */
}

.form-control {
    background-color: #2a2a2a;
    border: 1px solid #444;
    color: var(--text-primary);
    padding: 0.75rem 1rem;
    transition: border-color 0.3s ease, box-shadow 0.3s ease; /* Smooth transitions */
    box-sizing: border-box;
}

.password-input-group .form-control {
    padding-right: 3rem; /* Extra space for password toggle to prevent overlap */
}

.form-control:focus {
    background-color: #2a2a2a;
    color: var(--text-primary);
    border-color: var(--primary);
    box-shadow: 0 0 0 0.25rem rgba(187, 134, 252, 0.25);
}

.btn-primary {
    background-color: var(--primary);
    border: none;
    color: #000;
    padding: 0.75rem;
    font-weight: 600;
    transition: background-color 0.3s ease;
    /* Smooth hover /
   width: 100%; / Full width for better UX on forms */
}

.btn-primary:hover {
    background-color: #9965f4;
}

.form-check-input {
    background-color: #2a2a2a;
    border: 1px solid #444;
    transition: background-color 0.3s ease;
}

.form-check-input:checked {
    background-color: var(--primary);
    border-color: var(--primary);
}

.form-control::placeholder {
    color: var(--placeholder-color);
    opacity: 1;
}

.form-control:-ms-input-placeholder {
    color: var(--placeholder-color);
}

.form-control::-ms-input-placeholder {
    color: var(--placeholder-color);
}

.password-toggle {
    cursor: pointer;
    position: absolute;
    right: 12px;
    top: 70%;
    transform: translateY(-50%);
    color: var(--text-secondary);
    transition: color 0.3s ease;
    z-index: 1;
    display: flex;
    align-items: center;
    justify-content: center;
    width: 1.5rem;
    height: 1.5rem;
}

.password-toggle:hover {
    color: var(--primary); /* Highlight on hover */
}

.password-input-group {
    position: relative;
}

.footer {
    background-color: #1a1a1a;
    padding: 1.5rem 0;
    margin-top: auto;
    text-align: center;
}

.footer-links {
    margin-top: 0.5rem;
}

.footer-links a {
    color: var(--text-secondary);
    text-decoration: none;
    margin: 0 10px;
    font-size: 0.9rem;
    transition: color 0.3s ease;
}

.footer-links a:hover {
    color: var(--primary);
}

/* Responsive adjustments */
@media (max-width: 576px) {
    .auth-container {
        padding: 1rem;
    }

    .auth-card {
        padding: 2rem 1.5rem;
        margin: 0 1rem;
    }

    .auth-icon {
        font-size: 2rem;
    }

    .btn-primary {
        padding: 0.875rem;
        font-size: 1.1rem; /* Slightly larger for touch targets */
    }
}

--- main/webapp/css/modules/_banner.css ---

/* ==========================================================================
   ENHANCED BANNER - Vibrant & Immersive Music Hero with Blurred Blobs
   ========================================================================== */
.compact-banner {
    background: linear-gradient(135deg, var(--dark-bg) 0%, var(--gradient-primary) 50%, var(--dark-bg) 100%);
    background-size: 200% 200%;
    animation: gradientShift 15s ease infinite;
    padding: clamp(60px, 8vw, 120px) 24px clamp(40px, 6vw, 60px);
    margin-bottom: 0;
    border-bottom: 1px solid var(--border-light);
    position: relative;
    overflow: hidden;
}

.compact-banner::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: url("data:image/svg+xml,%3Csvg width='60' height='60' viewBox='0 0 60 60' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cg fill='%23ffffff' fill-opacity='0.03'%3E%3Ccircle cx='30' cy='30' r='2'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E");
    animation: float 20s ease-in-out infinite;
    pointer-events: none;
}

/* Blurred Blobs - Abstract, Organic Shapes for Depth */
.blob {
    position: absolute;
    border-radius: 60% 40% 30% 70% / 60% 30% 70% 40%;
    filter: blur(30px);
    opacity: 0.4;
    animation: blobFloat 25s ease-in-out infinite reverse;
    z-index: 0;
}

/* Use radial-gradient for more organic blob feel */
.blob-1 {
    width: 250px;
    height: 250px;
    background: radial-gradient(circle at 30% 30%, var(--primary) 0%, transparent 70%);
    top: 20%;
    left: 5%;
    animation-delay: 0s;
}

.blob-2 {
    width: 350px;
    height: 200px;
    background: radial-gradient(ellipse at 70% 20%, #1ed760 0%, transparent 60%);
    top: 60%;
    right: 10%;
    border-radius: 40% 60% 50% 30% / 30% 70% 40% 60%;
    animation-delay: -5s;
    animation-duration: 30s;
}

.blob-3 {
    width: 300px;
    height: 300px;
    background: radial-gradient(circle at 20% 80%, #00d4aa 0%, transparent 65%);
    bottom: 20%;
    left: 20%;
    border-radius: 50% 70% 40% 60% / 60% 40% 70% 30%;
    animation-delay: -10s;
}

.compact-banner-content {
    max-width: 1200px;
    margin: 0 auto;
    text-align: center;
    position: relative;
    z-index: 2;
}

.compact-banner h1 {
    font-size: clamp(2.25rem, 5vw, 3.5rem);
    font-weight: 800;
    margin-bottom: 16px;
    color: var(--text-primary);
    line-height: 1.1;
    letter-spacing: -0.02em;
    text-shadow: 0 2px 8px rgba(0, 0, 0, 0.3);
    animation: fadeInUp 1s ease-out;
}

.compact-banner p {
    font-size: clamp(1.125rem, 2.5vw, 1.375rem);
    color: var(--text-secondary);
    margin-bottom: 32px;
    font-weight: 400;
    max-width: 600px;
    margin-left: auto;
    margin-right: auto;
    animation: fadeInUp 1s ease-out 0.2s both;
}

/* Optional CTA Button - Add to HTML for enhanced engagement */
.compact-banner .cta-btn {
    display: inline-block;
    padding: 14px 28px;
    background: var(--gradient-primary);
    color: #fff;
    border: none;
    border-radius: 50px;
    font-size: 1.1rem;
    font-weight: 600;
    text-decoration: none;
    transition: all var(--transition-normal);
    box-shadow: var(--shadow-md);
    animation: fadeInUp 1s ease-out 0.4s both;
}

.compact-banner .cta-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 24px rgba(29, 185, 84, 0.3);
    background: var(--gradient-hover);
}

/* Keyframe Animations */
@keyframes gradientShift {
    0%, 100% {
        background-position: 0% 50%;
    }
    50% {
        background-position: 100% 50%;
    }
}

@keyframes float {
    0%, 100% {
        transform: translateY(0px) rotate(0deg);
    }
    50% {
        transform: translateY(-20px) rotate(180deg);
    }
}

@keyframes blobFloat {
    0%, 100% {
        transform: translate(0, 0) rotate(0deg) scale(1);
    }
    33% {
        transform: translate(30px, -30px) rotate(120deg) scale(1.1);
    }
    66% {
        transform: translate(-20px, 20px) rotate(240deg) scale(0.9);
    }
}

@keyframes fadeInUp {
    from {
        opacity: 0;
        transform: translateY(30px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

/* Responsive Enhancements */
@media (max-width: 768px) {
    .compact-banner {
        padding: clamp(40px, 6vw, 80px) 16px clamp(20px, 4vw, 40px);
    }

    .blob {
        filter: blur(20px); /* Reduce blur on mobile for performance */
    }

    .compact-banner h1 {
        margin-bottom: 12px;
        letter-spacing: -0.01em;
    }

    .compact-banner p {
        margin-bottom: 24px;
    }

    .compact-banner .cta-btn {
        padding: 12px 24px;
        font-size: 1rem;
    }
}

--- main/webapp/css/modules/_base.css ---

/* ==========================================================================
   CLEAN BASE STYLES
   ========================================================================== */
* {
    box-sizing: border-box;
}

body {
    background-color: var(--dark-bg);
    color: var(--text-primary);
    font-family: 'Inter', 'Segoe UI', system-ui, -apple-system, sans-serif;
    margin: 0;
    padding: 0;
    line-height: 1.5;
    overflow-x: hidden;
    -webkit-font-smoothing: antialiased;
}

/* Clean Scrollbar */
::-webkit-scrollbar {
    width: 6px;
}

::-webkit-scrollbar-track {
    background: var(--dark-bg);
}

::-webkit-scrollbar-thumb {
    background: var(--text-muted);
    border-radius: 3px;
}

::-webkit-scrollbar-thumb:hover {
    background: var(--text-secondary);
}

/* Clean Button Styles */
.btn {
    border-radius: 6px;
    font-weight: 500;
    transition: all var(--transition-fast);
    border: none;
    padding: 8px 16px;
    font-size: 0.875rem;
}

.btn-primary {
    background: var(--primary);
    color: #fff;
    border: 1px solid var(--primary);
}

.btn-primary:hover {
    background: var(--primary-hover);
    border-color: var(--primary-hover);
    transform: translateY(-1px);
    box-shadow: var(--shadow-md);
}

.btn-outline-primary {
    border: 1px solid var(--primary);
    color: var(--primary);
    background: transparent;
}

.btn-outline-primary:hover {
    background: var(--primary);
    color: #fff;
    transform: translateY(-1px);
}

.btn-outline-light {
    border: 1px solid var(--border-medium);
    color: var(--text-primary);
    background: transparent;
}

.btn-outline-light:hover {
    background: rgba(255, 255, 255, 0.1);
    color: aliceblue;
    border-color: var(--text-secondary);
}

/* Form Controls */
.form-control {
    background: var(--card-bg);
    border: 1px solid var(--border-light);
    color: var(--text-primary);
    border-radius: 6px;
    padding: 8px 12px;
    transition: all var(--transition-fast);
}

.form-control:focus {
    background: var(--card-bg);
    border-color: var(--primary);
    color: var(--text-primary);
    box-shadow: 0 0 0 2px rgba(139, 92, 246, 0.1);
}

.form-control::placeholder {
    color: var(--text-muted);
}

--- main/webapp/css/modules/_components.css ---

/* ==========================================================================
   COMPONENTS: View Buttons
   ========================================================================== */
.view-controls {
    display: flex;
    gap: 8px;
    background: rgba(255, 255, 255, 0.05);
    padding: 4px;
    border-radius: 8px;
    border: 1px solid rgba(255, 255, 255, 0.1);
}

.view-btn {
    background: transparent;
    border: none;
    color: var(--text-secondary);
    width: 36px;
    height: 36px;
    border-radius: 6px;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: all 0.2s ease;
    position: relative;
}

.view-btn.active,
.view-btn:hover {
    background: var(--primary);
    color: #000;
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(187, 134, 252, 0.3);
}

.view-btn:focus {
    outline: none;
    box-shadow: 0 0 0 2px rgba(139, 92, 246, 0.5);
}

/* Tooltip for view buttons */
.view-btn::after {
    content: attr(data-tooltip);
    position: absolute;
    bottom: -40px;
    left: 50%;
    transform: translateX(-50%);
    background: #333;
    color: white;
    padding: 6px 12px;
    border-radius: 4px;
    font-size: 0.75rem;
    white-space: nowrap;
    opacity: 0;
    pointer-events: none;
    transition: opacity 0.2s ease;
    z-index: 1000;
}

.view-btn:hover::after {
    opacity: 1;
}

/* ==========================================================================
   COMPONENTS: Music Cards (Grid) - Updated Layout
   ========================================================================== */
.compact-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(180px, 1fr));
    gap: 24px;
    padding: 0 16px;
}

.compact-music-card {
    background: var(--card-bg);
    border-radius: 8px;
    padding: 16px;
    transition: all 0.3s ease;
    cursor: pointer;
    position: relative;
}

.compact-music-card:hover {
    background: #282828;
    transform: translateY(-4px);
}

.list-view .compact-music-card:hover {
    transform: none;
    background: #282828;
}

.album-cover-container {
    position: relative;
    margin-bottom: 16px;
}

.compact-album-cover {
    width: 100%;
    aspect-ratio: 1;
    border-radius: 6px;
    object-fit: cover;
    box-shadow: 0 8px 24px rgba(0, 0, 0, 0.5);
}

/* Remove hover actions from album cover */
.card-hover-actions {
    display: none; /* We'll move these to the bottom */
}

/* New layout for card content with price and buttons side by side */
.compact-card-content {
    display: flex;
    flex-direction: column;
    gap: 8px;
}

.compact-card-title {
    font-size: 0.95rem;
    font-weight: 600;
    color: var(--text-primary);
    margin-bottom: 2px;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    line-height: 1.3;
}

.compact-card-artist {
    font-size: 0.85rem;
    color: var(--text-secondary);
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    margin-bottom: 12px;
    line-height: 1.3;
}

/* New row for price and buttons */
.compact-card-footer {
    display: flex;
    justify-content: space-between;
    align-items: center;
    gap: 8px;
}

.price-tag-sm {
    font-size: 0.9rem;
    color: var(--primary);
    font-weight: 700;
    flex-shrink: 0;
}

/* Button container for play and cart */
.compact-card-actions {
    display: flex;
    gap: 6px;
    align-items: center;
    flex-shrink: 0;
}

/* Play & Cart Buttons (Small) - Updated */
.play-btn-sm,
.cart-btn-sm {
    width: 32px;
    height: 32px;
    border-radius: 50%;
    border: none;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    font-size: 0.8rem;
}

/* ==========================================================================
   COMPONENTS: Footer - Minimal Design
   ========================================================================== */
.footer {
    background: var(--card-bg);
    border-top: 1px solid var(--border-light);
    padding: 30px 0; /* Reduced padding */
    margin-top: 40px; /* Reduced margin */
}

.footer-content {
    max-width: 1200px;
    margin: 0 auto;
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 12px; /* Tighter spacing */
    text-align: center;
}

.footer-brand {
    font-size: 1.25rem; /* Smaller font */
    font-weight: 700;
    color: var(--text-primary); /* Simpler color, no gradient */
}

.footer-text {
    color: var(--text-secondary);
    font-size: 0.85rem; /* Smaller font */
    line-height: 1.4;
    max-width: 400px; /* Slightly wider for balance */
    margin: 0;
}

.social-links {
    display: flex;
    gap: 8px; /* Smaller gap */
    margin: 8px 0;
}

.social-link {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 32px; /* Smaller size */
    height: 32px;
    background: transparent; /* No background */
    color: var(--text-secondary);
    border-radius: 6px;
    text-decoration: none;
    transition: all var(--transition-fast);
    border: 1px solid var(--border-light);
}

.social-link:hover {
    color: var(--primary);
    border-color: var(--primary);
    transform: translateY(-1px); /* Subtle hover effect */
}

.footer-copy {
    color: var(--text-muted);
    font-size: 0.8rem; /* Smaller font */
    margin: 0;
}

/* ==========================================================================
   COMPONENTS: Pagination - Consistent with Dark Theme
   ========================================================================== */
.music-pagination {
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 8px;
    margin: 40px 0;
    padding: 0 16px;
}

.pagination-btn {
    background: var(--card-bg);
    border: 1px solid var(--border-light);
    color: var(--text-secondary);
    width: 40px;
    height: 40px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: all var(--transition-fast);
    font-size: 0.875rem;
    font-weight: 500;
    text-decoration: none;
    flex-shrink: 0;
}

.pagination-btn:hover:not(:disabled) {
    background: var(--primary);
    color: #000;
    border-color: var(--primary);
    transform: translateY(-1px);
    box-shadow: var(--shadow-md);
}

.pagination-btn.active {
    background: var(--primary);
    color: #000;
    border-color: var(--primary);
}

.pagination-btn:disabled {
    opacity: 0.5;
    cursor: not-allowed;
    transform: none;
    box-shadow: none;
}

.pagination-btn i {
    font-size: 0.75rem;
}

/* Page Numbers Container */
.page-numbers {
    display: flex;
    gap: 4px;
    align-items: center;
}

.page-numbers .pagination-btn {
    width: 36px;
    height: 36px;
    font-size: 0.875rem;
    padding: 0;
}

/* Ellipsis for Long Lists */
.ellipsis {
    color: var(--text-muted);
    font-size: 0.875rem;
    padding: 0 8px;
    align-self: center;
}

/* Responsive Adjustments */
@media (max-width: 768px) {
    .music-pagination {
        gap: 6px;
        margin: 30px 0;
        padding: 0 8px;
    }

    .pagination-btn {
        width: 36px;
        height: 36px;
        font-size: 0.8rem;
    }

    .page-numbers .pagination-btn {
        width: 32px;
        height: 32px;
        font-size: 0.8rem;
    }

    .ellipsis {
        padding: 0 6px;
        font-size: 0.8rem;
    }
}

--- main/webapp/css/modules/_layout.css ---

/* ==========================================================================
   CLEAN LAYOUT & SECTIONS
   ========================================================================== */
.content-wrapper {
    display: flex;
    gap: 24px;
    max-width: 1400px;
    margin: 40px auto;
    align-items: flex-start;
    justify-content: center; /* Center the content horizontally */
}

.ad-sidebar {
    flex: 0 0 240px; /* Fixed width for 240x600 ads */
    display: flex;
    flex-direction: column;
    gap: 16px;
    height: fit-content;
}

.ad-banner {
    display: block; /* Ensure the anchor tag is block-level for image */
    border-radius: 8px;
    overflow: hidden;
    box-shadow: var(--shadow-md);
    transition: all var(--transition-fast);
    border: 1px solid var(--border-light);
}

.ad-banner:hover {
    transform: translateY(-2px);
    box-shadow: var(--shadow-lg);
    border-color: var(--primary);
}

.ad-image {
    width: 240px;
    height: 600px;
    object-fit: cover;
    display: block;
}

.main-content {
    flex: 1;
    max-width: 900px;
    padding: clamp(30px, 5vw, 1px) 0;
    margin: 0 auto; /* Center the main content */
}

.section-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 24px;
    padding: 0 16px;
    gap: 16px;
}

.section-header h2 {
    font-size: clamp(1.25rem, 3vw, 1.75rem);
    font-weight: 600;
    margin: 0;
    color: var(--text-primary);
}

/* Clean View Controls */
.view-controls {
    display: flex;
    gap: 4px;
    background: var(--surface);
    padding: 4px;
    border-radius: 8px;
    border: 1px solid var(--border-light);
}

.view-btn {
    background: transparent;
    border: none;
    color: var(--text-secondary);
    width: 36px;
    height: 36px;
    border-radius: 6px;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: all var(--transition-fast);
}

.view-btn.active,
.view-btn:hover {
    background: var(--primary);
    color: #fff;
}

.view-btn:focus {
    outline: none;
}

--- main/webapp/css/modules/_modal.css ---

/* ==========================================================================
   MODALS: Cart
   ========================================================================== */
.cart-modal .modal-content {
    background: linear-gradient(145deg, var(--card-bg), #1a1a1a);
    color: var(--text-primary);
    border-radius: 16px;
    border: 1px solid rgba(255, 255, 255, 0.1);
    box-shadow: 0 20px 60px rgba(0, 0, 0, 0.5);
    overflow: hidden;
    backdrop-filter: blur(10px);
}

.cart-modal .modal-header {
    border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    padding: 1.5rem 2rem;
    background: rgba(0, 0, 0, 0.2);
}

.cart-modal .modal-title {
    font-weight: 700;
    font-size: 1.25rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    color: var(--text-primary);
    margin: 0;
}

.cart-modal .modal-body {
    padding: 2rem;
    max-height: 60vh;
    overflow-y: auto;
    scrollbar-width: thin;
    scrollbar-color: var(--primary) rgba(0, 0, 0, 0.2);
}

.cart-modal .modal-body::-webkit-scrollbar {
    width: 6px;
}

.cart-modal .modal-body::-webkit-scrollbar-track {
    background: rgba(0, 0, 0, 0.2);
    border-radius: 3px;
}

.cart-modal .modal-body::-webkit-scrollbar-thumb {
    background: var(--primary);
    border-radius: 3px;
}

.cart-modal .modal-footer {
    border-top: 1px solid rgba(255, 255, 255, 0.1);
    padding: 1.5rem 2rem;
    background: rgba(0, 0, 0, 0.1);
    display: flex;
    justify-content: space-between;
    align-items: center;
    flex-wrap: wrap;
    gap: 1rem;
}

.cart-modal .btn-close {
    opacity: 0.7;
    transition: opacity 0.3s ease;
    background: transparent url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16' fill='%23fff'%3e%3cpath d='M.293.293a1 1 0 0 1 1.414 0L8 6.586 14.293.293a1 1 0 1 1 1.414 1.414L9.414 8l6.293 6.293a1 1 0 0 1-1.414 1.414L8 9.414l-6.293 6.293a1 1 0 0 1-1.414-1.414L6.586 8 .293 1.707a1 1 0 0 1 0-1.414z'/%3e%3c/svg%3e") center/1em auto no-repeat;
}

.cart-modal .btn-close:hover {
    opacity: 1;
}

/* Cart Items */
.cart-item {
    display: flex;
    align-items: center;
    padding: 1.5rem 0;
    border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    transition: all 0.3s ease;
}

.cart-item:hover {
    background: rgba(255, 255, 255, 0.05);
    border-radius: 8px;
    padding: 1.5rem;
    margin: 0 -1rem;
}

.cart-item:last-child {
    border-bottom: none;
}

.cart-item-img {
    width: 64px;
    height: 64px;
    object-fit: cover;
    border-radius: 8px;
    margin-right: 1rem;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
    transition: transform 0.3s ease;
    flex-shrink: 0;
}

.cart-item:hover .cart-item-img {
    transform: scale(1.05);
}

.cart-item-details {
    flex-grow: 1;
    text-align: left;
    min-width: 0;
    padding-right: 1rem;
}

.cart-item-title {
    font-weight: 600;
    font-size: 1rem;
    margin-bottom: 0.25rem;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    color: var(--text-primary);
}

.cart-item-artist {
    color: var(--text-secondary);
    font-size: 0.875rem;
    margin-bottom: 0.5rem;
    opacity: 0.8;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

.cart-item-price {
    color: var(--primary);
    font-weight: 700;
    font-size: 1.1rem;
}

.cart-item-remove {
    color: #dc3545;
    background: none;
    border: none;
    cursor: pointer;
    font-size: 1.25rem;
    padding: 0.75rem;
    border-radius: 50%;
    transition: all 0.3s ease;
    opacity: 0.7;
    flex-shrink: 0;
    display: flex;
    align-items: center;
    justify-content: center;
}

.cart-item-remove:hover {
    background: rgba(220, 53, 69, 0.1);
    color: #dc3545;
    opacity: 1;
    transform: scale(1.1);
}

/* Cart Summary */
.cart-summary {
    display: flex;
    justify-content: space-between;
    align-items: center;
    width: 100%;
    max-width: 200px;
    font-size: 1.25rem;
    font-weight: 600;
    color: var(--text-primary);
}

.cart-total {
    font-weight: 800;
    color: var(--primary);
    text-shadow: 0 0 8px rgba(139, 92, 246, 0.3);
}

/* Empty State */
.cart-empty {
    text-align: center;
    padding: 3rem 1rem;
    color: var(--text-secondary);
}

.cart-empty i {
    font-size: 4rem;
    margin-bottom: 1rem;
    display: block;
    color: rgba(255, 255, 255, 0.2);
}

.cart-empty p {
    font-size: 1.1rem;
    margin-bottom: 1.5rem;
}

/* Cart Badge in Modal */
.cart-modal .cart-badge {
    position: inherit;
    background: linear-gradient(135deg, var(--primary), #7c3aed);
    color: #000;
    border-radius: 12px;
    width: 24px;
    height: 24px;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    font-size: 0.75rem;
    font-weight: 700;
    box-shadow: 0 2px 8px rgba(139, 92, 246, 0.4);
    border: 1px solid rgba(255, 255, 255, 0.2);
    margin-left: 0.5rem;
}

/* Modal Button Styles */
.cart-modal .btn-secondary {
    background-color: #6c757d;
    border-color: #6c757d;
    color: white;
}

.cart-modal .btn-primary {
    background-color: var(--primary);
    border-color: var(--primary);
    color: #000;
}

.cart-modal .btn-primary:hover {
    background-color: #9965f4;
    border-color: #9965f4;
    color: #000;
}

--- main/webapp/css/modules/_navbar.css ---

/* ==========================================================================
   CLEAN NAVIGATION
   ========================================================================== */
.navbar {
    background: rgba(17, 16, 16, 0.98);
    backdrop-filter: blur(10px);
    border-bottom: 1px solid var(--border-light);
    padding: 0.75rem 0;
}

.navbar-brand {
    font-weight: 700;
    font-size: 1.25rem;
    color: var(--text-primary);
    text-decoration: none;
}

.navbar-brand i {
    color: var(--primary);
}

.navbar-nav {
    align-items: center;
    gap: 0.25rem;
}

.navbar-nav .nav-link {
    color: var(--text-secondary);
    font-weight: 500;
    padding: 0.5rem 0.75rem;
    border-radius: 6px;
    transition: all var(--transition-fast);
    font-size: 0.875rem;
    margin: 0 0.125rem;
}

.navbar-nav .nav-link:hover,
.navbar-nav .nav-link.active {
    color: var(--text-primary);
    background: var(--surface);
}

.navbar-nav .nav-link.active {
    color: var(--primary);
}

/* Clean Search Bar */
.input-group {
    border-radius: 6px;
    overflow: hidden;
    background: var(--card-bg);
    border: 1px solid var(--border-light);
    max-width: 280px;
    margin: 0 1rem;
}

.input-group:focus-within {
    border-color: var(--primary);
}

.input-group .form-control {
    background: transparent;
    border: none;
    color: var(--text-primary);
    font-size: 0.875rem;
    padding: 0.5rem 0.75rem;
}

.input-group .form-control:focus {
    box-shadow: none;
    background: transparent;
}

.input-group .btn {
    padding: 0.5rem 0.75rem;
    background: transparent;
    border: none;
    color: var(--text-secondary);
}

.input-group .btn:hover {
    background: rgba(255, 255, 255, 0.05);
    color: var(--text-primary);
}

/* Navbar Actions */
.navbar-actions {
    display: flex;
    align-items: center;
    gap: 0.75rem;
}

.navbar-actions .btn {
    margin: 0;
    white-space: nowrap;
}

/* Cart Button */
.cart-btn-nav {
    position: relative;
    padding: 0.5rem 0.75rem;
    background: transparent;
    border: 1px solid var(--border-medium);
    color: var(--text-primary);
    border-radius: 6px;
    transition: all var(--transition-fast);
}

.cart-btn-nav:hover {
    background: rgba(255, 255, 255, 0.05);
    border-color: var(--text-secondary);
}

.cart-badge {
    position: absolute;
    top: -6px;
    right: -6px;
    background: var(--primary);
    color: #fff;
    border-radius: 10px;
    min-width: 18px;
    height: 18px;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 0.7rem;
    font-weight: 600;
    border: 2px solid var(--dark-bg);
}

.cart-badge:empty {
    display: none;
}

/* User Actions */
.user-actions {
    display: flex;
    align-items: center;
    gap: 0.5rem;
}

/* Mobile Styles */
@media (max-width: 991.98px) {
    .navbar-nav {
        gap: 0.5rem;
        margin: 1rem 0;
    }

    .navbar-actions {
        flex-direction: column;
        width: 100%;
        gap: 0.5rem;
        margin-top: 1rem;
    }

    .navbar-actions .btn {
        width: 100%;
        justify-content: center;
    }

    .input-group {
        margin: 0.5rem 0;
        max-width: 100%;
    }
}

--- main/webapp/css/modules/_posts.css ---

/* /webapp/css/modules/_posts.css - UPDATED */

.posts-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));
    gap: 1.5rem;
    padding: 0 16px;
}

.post-card {
    background: var(--card-bg);
    border: 1px solid var(--border-light);
    border-radius: 8px;
    overflow: hidden;
    display: flex;
    flex-direction: column;
    transition: transform 0.2s ease, border-color 0.2s ease;
    box-shadow: var(--shadow-sm);
}

.post-card:hover {
    transform: translateY(-5px);
    border-color: var(--primary);
    box-shadow: var(--shadow-md);
}

.post-card a {
    text-decoration: none;
    color: inherit;
}

.post-header {
    padding: 1rem 1.25rem;
    border-bottom: 1px solid var(--border-light);
}

.post-header h3 {
    font-size: 1.1rem;
    font-weight: 600;
    color: var(--text-primary);
    margin: 0 0 0.25rem;
}

.post-header h3 a:hover {
    color: var(--primary);
}

.post-author {
    font-size: 0.8rem;
    color: var(--text-secondary);
}

.post-content {
    padding: 1rem 1.25rem;
    flex-grow: 1;
}

.post-content p {
    color: var(--text-secondary);
    line-height: 1.6;
    margin: 0;
}

.post-images {
    padding: 0 1.25rem;
    margin-bottom: 1rem;
}

.post-images img {
    width: 100%;
    max-height: 200px;
    object-fit: cover;
    border-radius: 6px;
    margin-bottom: 0.5rem;
    border: 1px solid var(--border-light);
}

.post-footer {
    padding: 0.75rem 1.25rem;
    background-color: rgba(0, 0, 0, 0.2);
    border-top: 1px solid var(--border-light);
    margin-top: auto;
}

.post-date {
    font-size: 0.75rem;
    color: var(--text-muted);
}

/* Section header styles for community page */
.section-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 2rem;
    padding: 0 16px 1rem;
    border-bottom: 1px solid var(--border-light);
}

.section-header h2 {
    margin: 0;
    color: var(--text-primary);
    font-size: clamp(1.25rem, 3vw, 1.75rem);
    font-weight: 600;
}

/* Alert styles */
.alert {
    padding: 1rem 1.5rem;
    border-radius: 8px;
    margin: 0 16px 2rem;
    border: 1px solid transparent;
}

.alert-info {
    background-color: rgba(32, 201, 151, 0.1);
    border-color: rgba(32, 201, 151, 0.2);
    color: var(--text-primary);
}

/* Responsive adjustments */
@media (max-width: 768px) {
    .posts-grid {
        grid-template-columns: 1fr;
        gap: 1rem;
        padding: 0 12px;
    }

    .section-header {
        flex-direction: column;
        align-items: flex-start;
        gap: 1rem;
        padding: 0 12px 1rem;
    }

    .post-card {
        margin-bottom: 0.5rem;
    }

    .alert {
        margin: 0 12px 1.5rem;
    }
}

--- main/webapp/css/modules/_responsive.css ---

/* ==========================================================================
   RESPONSIVE DESIGN - Music Cards & Layout
   ========================================================================== */
@media (max-width: 992px) {
    .content-wrapper {
        flex-direction: column;
        gap: 0;
        max-width: 1200px;
        justify-content: center;
    }

    .ad-sidebar {
        display: none; /* Hide ads on tablet and mobile sizes */
    }

    .main-content {
        max-width: 900px;
        margin: 0 auto; /* Keep centered */
        padding: clamp(30px, 5vw, 60px) 24px;
    }
}

@media (max-width: 768px) {
    .compact-grid {
        grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
        gap: 16px;
        padding: 0;
    }

    .compact-card-footer {
        flex-wrap: wrap;
        gap: 6px;
    }

    .compact-card-actions {
        gap: 4px;
    }

    .play-btn-sm,
    .cart-btn-sm {
        width: 28px;
        height: 28px;
        font-size: 0.7rem;
    }

    /* List view mobile adjustments */
    .list-view .compact-music-card {
        padding: 12px;
        gap: 12px;
    }

    .list-view .album-cover-container {
        width: 50px;
        height: 50px;
    }

    .list-view .compact-album-cover {
        width: 50px;
        height: 50px;
    }

    .list-view .compact-card-content {
        flex-direction: column;
        align-items: flex-start;
        gap: 8px;
    }

    .list-view .compact-card-footer {
        width: 100%;
        justify-content: space-between;
        gap: 12px;
    }

    .list-view .price-tag-sm {
        min-width: auto;
        text-align: left;
        font-size: 0.9rem;
    }

    .list-view .compact-card-actions {
        gap: 6px;
    }

    .list-view .play-btn-sm,
    .list-view .cart-btn-sm {
        width: 32px;
        height: 32px;
        font-size: 0.8rem;
    }
}

@media (max-width: 480px) {
    .compact-grid {
        grid-template-columns: repeat(auto-fill, minmax(140px, 1fr));
        gap: 12px;
    }

    .compact-music-card {
        padding: 12px;
    }

    /* List view extra small screens */
    .list-view .compact-music-card {
        padding: 10px;
        gap: 10px;
    }

    .list-view .album-cover-container {
        width: 45px;
        height: 45px;
    }

    .list-view .compact-album-cover {
        width: 45px;
        height: 45px;
    }

    .list-view .compact-card-title {
        font-size: 0.9rem;
    }

    .list-view .compact-card-artist {
        font-size: 0.8rem;
    }
}

--- main/webapp/css/modules/_search.css ---

/* ==========================================================================
   SEARCH PAGE STYLES - Consistent with Main Theme
   ========================================================================== */

/* Search Header Section */
.search-header {
    background: linear-gradient(135deg, var(--dark-bg) 0%, var(--gradient-primary) 50%, var(--dark-bg) 100%);
    background-size: 200% 200%;
    animation: gradientShift 15s ease infinite;
    padding: clamp(40px, 6vw, 80px) 24px;
    margin: 0 0 40px 0;
    border-bottom: 1px solid var(--border-light);
    position: relative;
    overflow: hidden;
    text-align: center; /* Center the banner content */
}

.search-header::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: url("data:image/svg+xml,%3Csvg width='60' height='60' viewBox='0 0 60 60' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cg fill='%23ffffff' fill-opacity='0.03'%3E%3Ccircle cx='30' cy='30' r='2'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E");
    animation: float 20s ease-in-out infinite;
    pointer-events: none;
}

.search-header h1 {
    font-size: clamp(1.75rem, 4vw, 2.5rem);
    font-weight: 700;
    margin-bottom: 16px;
    color: var(--text-primary);
    line-height: 1.1;
    letter-spacing: -0.02em;
    text-shadow: 0 2px 8px rgba(0, 0, 0, 0.3);
    animation: fadeInUp 1s ease-out;
}

/* Search Form Styling */
.search-form .input-group {
    max-width: 600px;
    margin: 0 auto;
    border-radius: 50px;
    overflow: hidden;
    background: rgba(255, 255, 255, 0.1);
    border: 1px solid var(--border-light);
    backdrop-filter: blur(10px);
    animation: fadeInUp 1s ease-out 0.2s both;
}

.search-form .input-group:focus-within {
    border-color: var(--primary);
    box-shadow: 0 0 0 2px rgba(139, 92, 246, 0.2);
}

.search-form .form-control {
    background: transparent;
    border: none;
    color: var(--text-primary);
    font-size: 1.1rem;
    padding: 12px 20px;
    font-weight: 400;
}

.search-form .form-control::placeholder {
    color: var(--text-secondary);
    opacity: 0.8;
}

.search-form .form-control:focus {
    background: transparent;
    border: none;
    box-shadow: none;
    color: var(--text-primary);
}

.search-form .btn {
    background: var(--gradient-primary);
    border: none;
    color: #fff;
    padding: 12px 24px;
    font-weight: 600;
    transition: all var(--transition-normal);
}

.search-form .btn:hover {
    background: var(--gradient-hover);
    transform: translateY(-1px);
    box-shadow: var(--shadow-md);
}

/* Main Content Layout with Sidebar */
.search-content-wrapper {
    display: flex;
    gap: 32px;
    max-width: 1400px;
    margin: 0 auto;
    align-items: flex-start;
}

/* Filters Sidebar */
.search-filters-sidebar {
    flex: 0 0 300px;
    background: var(--card-bg);
    border-radius: 12px;
    padding: 24px;
    border: 1px solid var(--border-light);
    position: sticky;
    top: 100px;
    animation: fadeInUp 1s ease-out 0.4s both;
}

.search-filters-sidebar h2 {
    font-size: 1.25rem;
    font-weight: 600;
    margin-bottom: 20px;
    color: var(--text-primary);
    border-bottom: 1px solid var(--border-light);
    padding-bottom: 12px;
}

.filter-group {
    margin-bottom: 24px;
}

.filter-label {
    color: var(--text-secondary);
    font-size: 0.875rem;
    font-weight: 600;
    margin-bottom: 8px;
    display: block;
}

.form-select {
    background: var(--card-bg);
    border: 1px solid var(--border-light);
    color: var(--text-primary);
    border-radius: 8px;
    padding: 10px 12px;
    font-size: 0.875rem;
    transition: all var(--transition-fast);
    width: 100%;
}

.form-select:focus {
    background: var(--card-bg);
    border-color: var(--primary);
    color: var(--text-primary);
    box-shadow: 0 0 0 2px rgba(139, 92, 246, 0.1);
}

.form-select option {
    background: var(--card-bg);
    color: var(--text-primary);
}

/* Filter Buttons */
.filter-buttons {
    display: flex;
    flex-direction: column;
    gap: 12px;
    margin-top: 8px;
}

.btn-primary {
    background: var(--gradient-primary);
    border: none;
    color: #fff;
    padding: 12px 20px;
    border-radius: 8px;
    font-weight: 600;
    transition: all var(--transition-normal);
    text-align: center;
    text-decoration: none;
    display: block;
}

.btn-primary:hover {
    background: var(--gradient-hover);
    transform: translateY(-2px);
    box-shadow: var(--shadow-md);
}

.btn-outline-secondary {
    background: transparent;
    border: 1px solid var(--primary);
    color: var(--primary);
    padding: 12px 20px;
    border-radius: 8px;
    font-weight: 600;
    transition: all var(--transition-normal);
    text-align: center;
    text-decoration: none;
    display: block;
}

.btn-outline-secondary:hover {
    background: var(--primary);
    color: #fff;
    transform: translateY(-2px);
}

/* Search Results Main Content */
.search-results-main {
    flex: 1;
    min-width: 0; /* Prevent flex item from overflowing */
}

/* Search Results Info */
.search-results-info {
    margin-bottom: 24px;
    padding: 0 16px;
    animation: fadeInUp 1s ease-out 0.6s both;
}

.search-results-info h4 {
    font-size: 1.25rem;
    font-weight: 600;
    color: var(--text-primary);
    margin-bottom: 8px;
}

.search-results-info p {
    color: var(--text-secondary);
    font-size: 0.875rem;
    margin: 0;
}

/* No Results State */
.no-results {
    text-align: center;
    padding: 60px 20px;
    color: var(--text-secondary);
    background: var(--card-bg);
    border-radius: 12px;
    border: 1px solid var(--border-light);
    animation: fadeInUp 1s ease-out;
}

.no-results i {
    font-size: 3rem;
    margin-bottom: 16px;
    display: block;
    color: var(--text-muted);
    opacity: 0.5;
}

.no-results h4 {
    font-size: 1.25rem;
    font-weight: 600;
    margin-bottom: 8px;
    color: var(--text-primary);
}

.no-results p {
    font-size: 0.875rem;
    margin: 0;
    opacity: 0.8;
}

/* Music Cards Grid for Search Results */
.search-results-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(180px, 1fr));
    gap: 24px;
    padding: 0 16px;
}

/* Pagination for Search Results */
.search-pagination {
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 8px;
    margin: 40px 0;
    padding: 0 16px;
}

.search-pagination .pagination-btn {
    background: var(--card-bg);
    border: 1px solid var(--border-light);
    color: var(--text-secondary);
    width: 40px;
    height: 40px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: all var(--transition-fast);
    font-size: 0.875rem;
    font-weight: 500;
    text-decoration: none;
    flex-shrink: 0;
}

.search-pagination .pagination-btn:hover:not(:disabled) {
    background: var(--primary);
    color: #000;
    border-color: var(--primary);
    transform: translateY(-1px);
    box-shadow: var(--shadow-md);
}

.search-pagination .pagination-btn.active {
    background: var(--primary);
    color: #000;
    border-color: var(--primary);
}

.search-pagination .pagination-btn:disabled {
    opacity: 0.5;
    cursor: not-allowed;
    transform: none;
    box-shadow: none;
}

/* Responsive Design */
@media (max-width: 992px) {
    .search-content-wrapper {
        flex-direction: column;
        gap: 24px;
    }

    .search-filters-sidebar {
        flex: none;
        width: 100%;
        position: static;
    }

    .filter-buttons {
        flex-direction: row;
        justify-content: flex-end;
    }

    .filter-buttons .btn {
        flex: 1;
        min-width: 120px;
    }
}

@media (max-width: 768px) {
    .search-header {
        padding: clamp(30px, 5vw, 60px) 16px;
        margin-bottom: 30px;
    }

    .search-filters-sidebar {
        padding: 20px;
    }

    .filter-buttons {
        flex-direction: column;
        gap: 8px;
    }

    .filter-buttons .btn {
        width: 100%;
    }

    .search-results-grid {
        grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
        gap: 16px;
        padding: 0;
    }

    .search-pagination {
        margin: 30px 0;
        padding: 0 8px;
    }

    .search-pagination .pagination-btn {
        width: 36px;
        height: 36px;
        font-size: 0.8rem;
    }
}

@media (max-width: 480px) {
    .search-results-grid {
        grid-template-columns: repeat(auto-fill, minmax(140px, 1fr));
        gap: 12px;
    }

    .search-filters-sidebar {
        padding: 16px;
    }

    .search-header h1 {
        text-align: center;
    }
}

--- main/webapp/css/navbar.css ---

/* navbar.css */

/* Base styles (minimal, assuming theme.css is loaded) */
body {
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
}

/* Navbar styles */
.navbar {
    background-color: rgba(18, 18, 18, 0.95) !important;
    backdrop-filter: blur(10px);
    border-bottom: 1px solid #333;
}

/* Button overrides for Bootstrap classes used in navbar */
.btn-primary {
    background-color: var(--primary);
    border: none;
    color: #000;
}

.btn-primary:hover {
    background-color: #9965f4;
}

.btn-outline-primary {
    border-color: var(--primary);
    color: var(--primary);
}

.btn-outline-primary:hover {
    background-color: var(--primary);
    color: #000;
}

.btn-outline-light {
    border-color: rgba(255, 255, 255, 0.5);
    color: rgba(255, 255, 255, 0.8);
}

.btn-outline-light:hover {
    background-color: rgba(255, 255, 255, 0.1);
    border-color: rgba(255, 255, 255, 0.8);
    color: #fff;
}

/* Search form styles */
.input-group .form-control {
    background-color: #2a2a2a;
    border: 1px solid #444;
    color: var(--text-primary);
}

.input-group .form-control:focus {
    background-color: #2a2a2a;
    color: var(--text-primary);
    border-color: var(--primary);
    box-shadow: 0 0 0 0.25rem rgba(187, 134, 252, 0.25);
}

/* Enhanced Cart Badge Styles */
.cart-badge {
    background: linear-gradient(135deg, var(--primary), #7c3aed); /* Gradient for depth */
    color: #000;
    border-radius: 12px; /* Pill shape */
    width: 24px;
    height: 24px;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 0.75rem;
    font-weight: 700;
    font-family: 'Segoe UI', sans-serif;
    box-shadow: 0 2px 8px rgba(139, 92, 246, 0.4); /* Subtle glow */
    border: 1px solid rgba(255, 255, 255, 0.2);
    transition: all 0.3s ease;
    min-width: 24px; /* Ensures consistent size */
}

.cart-badge:empty {
    display: none;
}

.cart-badge.updated {
    animation: pulseBadge 0.6s ease-in-out;
}

@keyframes pulseBadge {
    0% {
        transform: scale(1);
    }
    50% {
        transform: scale(1.2);
    }
    100% {
        transform: scale(1);
    }
}

/* Navbar-specific: Absolute overlay on cart icon */
.navbar .cart-badge {
    position: absolute;
    top: -8px;
    right: -8px;
}

/* Responsive for navbar badge */
@media (max-width: 768px) {
    .cart-badge {
        width: 20px;
        height: 20px;
        font-size: 0.7rem;
        top: -6px;
        right: -6px;
    }
}

--- main/webapp/css/order-details.css ---

/* /webapp/css/order-details.css */
@import "theme.css";
@import "modules/_navbar.css";
@import "modules/_components.css";

/* ==========================================================================
   ORDER DETAILS PAGE - MODERN OVERHAUL
   ========================================================================== */

body {
    background-color: var(--dark-bg);
    color: var(--text-primary);
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
}

.order-container {
    max-width: 1200px;
    margin: 40px auto;
    padding: 0 24px;
    display: grid;
    grid-template-columns: 2fr 1fr;
    gap: 32px;
    align-items: flex-start;
}

/* Main Content: Left Column */
.order-details-section {
    background-color: var(--card-bg);
    border-radius: var(--border-radius);
    padding: clamp(1.5rem, 3vw, 2.5rem);
    border: 1px solid var(--border-light);
}

.order-details-header h1 {
    font-size: clamp(1.5rem, 4vw, 2rem);
    font-weight: 700;
    margin: 0 0 8px 0;
    color: var(--text-primary);
}

.order-details-header p {
    color: var(--text-secondary);
    margin: 0 0 24px 0;
    font-size: var(--font-size-small);
}

/* Item List Styles */
.cart-items-list {
    border-top: 1px solid var(--border-light);
}

.cart-item {
    display: flex;
    align-items: center;
    gap: 16px;
    padding: 20px 0;
    border-bottom: 1px solid var(--border-light);
}

.cart-item:last-child {
    border-bottom: none;
}

.item-image {
    width: 64px;
    height: 64px;
    border-radius: 6px;
    object-fit: cover;
    flex-shrink: 0;
}

.item-details {
    flex-grow: 1;
    min-width: 0;
}

.item-details h5 {
    margin: 0 0 4px 0;
    color: var(--text-primary);
    font-size: 1rem;
    font-weight: 600;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

.item-details p {
    margin: 0;
    color: var(--text-secondary);
    font-size: var(--font-size-small);
}

.item-price {
    font-weight: 600;
    color: var(--text-primary);
    font-size: 1rem;
}

/* Order Summary: Right Column (Sticky) */
.order-summary-card {
    background-color: var(--card-bg);
    border-radius: var(--border-radius);
    padding: 24px;
    border: 1px solid var(--border-light);
    position: sticky;
    top: 100px; /* Adjust based on navbar height */
}

.order-summary-card h3 {
    font-size: 1.25rem;
    font-weight: 600;
    margin: 0 0 20px 0;
    padding-bottom: 12px;
    border-bottom: 1px solid var(--border-light);
}

/* Promo Code Section */
.promo-section {
    margin-bottom: 20px;
}

.promo-input-group {
    display: flex;
    gap: 8px;
}

.promo-input-group .form-control {
    flex-grow: 1;
}

.promo-input-group .btn {
    flex-shrink: 0;
    padding: 8px 16px;
}

.promo-feedback {
    font-size: var(--font-size-small);
    margin-top: 8px;
    display: none; /* Hidden by default */
}

.promo-feedback.success {
    color: var(--secondary);
}

.promo-feedback.error {
    color: #dc3545;
}

/* Summary Details */
.summary-details {
    display: flex;
    flex-direction: column;
    gap: 12px;
    margin-bottom: 20px;
}

.summary-row {
    display: flex;
    justify-content: space-between;
    font-size: var(--font-size-small);
    color: var(--text-secondary);
}

.summary-row span:last-child {
    color: var(--text-primary);
    font-weight: 500;
}

.summary-row.total {
    border-top: 1px solid var(--border-light);
    padding-top: 16px;
    margin-top: 8px;
    font-weight: 700;
    font-size: 1.2rem;
    color: var(--text-primary);
}

.summary-row.total span:last-child {
    color: var(--primary);
}

/* Checkout Button */
.btn-checkout {
    width: 100%;
    padding: 14px;
    font-size: 1rem;
    font-weight: 600;
    background-color: var(--primary);
    border-color: var(--primary);
    color: #000;
    transition: all 0.3s ease;
}

.btn-checkout:hover {
    background-color: var(--primary-hover);
    border-color: var(--primary-hover);
    transform: translateY(-2px);
    box-shadow: 0 5px 15px rgba(187, 134, 252, 0.3);
}

/* Empty State */
.empty-cart-container {
    text-align: center;
    padding: 4rem 1rem;
    color: var(--text-secondary);
    background-color: var(--card-bg);
    border-radius: var(--border-radius);
    border: 1px solid var(--border-light);
}

.empty-cart-container i {
    font-size: 4rem;
    margin-bottom: 1rem;
    color: rgba(255, 255, 255, 0.2);
}

.empty-cart-container p {
    font-size: 1.1rem;
    margin-bottom: 1.5rem;
}

/* Responsive Design */
@media (max-width: 992px) {
    .order-container {
        grid-template-columns: 1fr;
    }

    .order-summary-card {
        position: static;
        top: auto;
    }
}

@media (max-width: 576px) {
    .order-container {
        padding: 0 16px;
        margin: 24px auto;
    }

    .order-details-section,
    .order-summary-card {
        padding: 20px;
    }

    .cart-item {
        flex-direction: column;
        align-items: flex-start;
        text-align: left;
    }

    .item-price {
        margin-left: 0;
        margin-top: 8px;
        font-size: 1.1rem;
    }

    /* APPEND this CSS to the end of /webapp/css/order-details.css */

    /* Payment Form Styling */
    .payment-form-section {
        border-top: 1px solid var(--border-light);
        margin-top: 2rem;
        padding-top: 2rem;
    }

    .payment-form-section h2 {
        font-size: 1.5rem;
        font-weight: 600;
        margin-bottom: 1.5rem;
    }

    .payment-method-options {
        display: flex;
        gap: 1.5rem;
        margin-bottom: 1.5rem;
        background-color: var(--dark-bg);
        padding: 1rem;
        border-radius: var(--border-radius);
        border: 1px solid var(--border-light);
    }

    .payment-method-options .form-check-label {
        font-weight: 500;
        cursor: pointer;
    }

    .payment-method-options .form-check-input {
        cursor: pointer;
    }

    .form-label {
        font-size: 0.875rem;
        color: var(--text-secondary);
        margin-bottom: 0.5rem;
        font-weight: 500;
    }

}

--- main/webapp/css/signup.css ---

@import "theme.css";

body {
    background-color: var(--dark-bg);
    color: var(--text-primary);
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    min-height: 100vh;
    display: flex;
    flex-direction: column;
    background-image: linear-gradient(to bottom, #1a1a1a, #2d2d2d);
}

.auth-container {
    display: flex;
    justify-content: center;
    align-items: center;
    flex-grow: 1;
    padding: 2rem;
}

.auth-card {
    background-color: var(--card-bg);
    border-radius: 12px;
    padding: 2.5rem;
    width: 100%;
    max-width: 500px;
    box-shadow: 0 15px 35px rgba(0, 0, 0, 0.5);
}

.auth-header {
    text-align: center;
    margin-bottom: 2.5rem;
}

.auth-icon {
    font-size: 3rem;
    color: var(--primary);
    margin-bottom: 1.5rem;
}

.form-group {
    margin-bottom: 1.5rem;
}

.form-control {
    background-color: #2a2a2a;
    border: 1px solid #444;
    color: var(--text-primary);
    padding: 0.85rem 2.5rem 0.85rem 1.2rem;
    font-size: 1.05rem;
}

.form-control:focus {
    background-color: #2a2a2a;
    color: var(--text-primary);
    border-color: var(--primary);
    box-shadow: 0 0 0 0.3rem rgba(187, 134, 252, 0.25);
}

.form-control::placeholder {
    color: var(--placeholder-color);
    opacity: 1;
}

.form-control:-ms-input-placeholder {
    color: var(--placeholder-color);
}

.form-control::-ms-input-placeholder {
    color: var(--placeholder-color);
}

.btn-primary {
    background-color: var(--primary);
    border: none;
    color: #000;
    padding: 0.9rem;
    font-weight: 600;
    font-size: 1.1rem;
    border-radius: 8px;
    transition: all 0.3s;
    width: 100%;
    margin-top: 1rem;
}

.btn-primary:hover {
    background-color: #9965f4;
    transform: translateY(-2px);
    box-shadow: 0 5px 15px rgba(187, 134, 252, 0.4);
}

.form-check-input {
    background-color: #2a2a2a;
    border: 1px solid #444;
    width: 1.2em;
    height: 1.2em;
    margin-top: 0.15em;
}

.form-check-input:checked {
    background-color: var(--primary);
    border-color: var(--primary);
}

.form-check-label {
    margin-left: 0.5em;
}

.password-input-group {
    position: relative;
}

.password-toggle {
    cursor: pointer;
    position: absolute;
    right: 10px;
    top: 70%;
    transform: translateY(-50%);
    color: var(--text-secondary);
    font-size: 1.1rem;
    display: flex;
    align-items: center;
    justify-content: center;
    height: 100%;
    padding: 0 10px;
}

.footer {
    background-color: #1a1a1a;
    padding: 1.5rem 0;
    margin-top: auto;
    text-align: center;
}

.footer-links {
    margin-top: 0.5rem;
}

.footer-links a {
    color: var(--text-secondary);
    text-decoration: none;
    margin: 0 12px;
    font-size: 0.95rem;
    transition: color 0.3s;
}

.footer-links a:hover {
    color: var(--primary);
}

.form-label {
    font-weight: 500;
    margin-bottom: 0.5rem;
    display: block;
}

.terms-text {
    margin-left: 1.8rem;
    margin-top: 0.5rem;
}

.text-muted {
    --bs-text-opacity: 1;
    color: var(--text-secondary) !important;
}

--- main/webapp/css/theme.css ---

/* ==========================================================================
   ENHANCED THEME VARIABLES - Spotify-Inspired Vibrant Dark Mode
   ========================================================================== */
:root {
    /* Vibrant Primary Palette - Energetic Green for Music Energy */
    --primary: #8A2BE2; /* Spotify's iconic green for calls-to-action and highlights */
    --primary-hover: #A155E7; /* Lighter green for hover states */

    /* Background Colors - Deep Grays for Immersive Dark Mode */
    --dark-bg: #121212; /* Primary dark background, reduces eye strain */
    --card-bg: #181818; /* Slightly lighter for cards and surfaces */
    --card-hover: #282828; /* Subtle hover state for interactivity */
    --surface: rgba(69, 21, 113, 0.08); /* Subtle green-tinted overlay for depth */

    /* Text Colors - High Contrast Grays for Readability */
    --text-primary: #ffffff; /* Crisp white for main text */
    --text-secondary: #b3b3b3; /* Medium gray for secondary info */
    --text-muted: #535353; /* Darker gray for subtle elements */

    /* Borders - Minimalist with Low Opacity */
    --border-light: rgba(255, 255, 255, 0.08);
    --border-medium: rgba(255, 255, 255, 0.12);

    /* Shadows - Soft with Green Glow for Modern Feel */
    --shadow-sm: 0 1px 3px rgba(0, 0, 0, 0.4);
    --shadow-md: 0 4px 12px rgba(69, 21, 113, 0.15); /* Green-tinted for cohesion */
    --shadow-lg: 0 8px 32px rgba(69, 21, 113, 0.1);

    /* Gradients for Dynamic Music Vibes */
    --gradient-primary: linear-gradient(135deg, var(--primary), #D0AAF3);
    --gradient-hover: linear-gradient(135deg, var(--primary-hover), #290C43);

    /* Transitions - Smooth for Fluid Interactions */
    --transition-fast: 0.15s ease;
    --transition-normal: 0.25s ease;
}

--- main/webapp/js/cart-handlers.js ---

// Cart Handlers: Buttons and Modal
// cart-handlers.js
function initializeCartButtons() {
    document.removeEventListener('click', handleCartButtonClick); // Remove any existing listener
    document.addEventListener('click', handleCartButtonClick);

    function handleCartButtonClick(e) {
        if (e.target.closest('.cart-btn, .cart-btn-sm')) {
            const button = e.target.closest('.cart-btn, .cart-btn-sm');
            const trackId = button.getAttribute('data-track-id');
            if (!trackId) {
                console.warn('Cart button missing track-id');
                return;
            }
            const isAdded = button.classList.contains('added');
            const action = isAdded ? 'remove' : 'add';
            updateCart(action, trackId, button);
        }
    }
}

function initializeCartModal() {
    document.addEventListener('click', function (e) {
        if (e.target.closest('.cart-item-remove')) {
            const button = e.target.closest('.cart-item-remove');
            const trackId = button.getAttribute('data-track-id');
            if (trackId) {
                updateCart('remove', trackId, null);
            }
        }
    });

    loadCartState();
}

--- main/webapp/js/cart-main.js ---

// Cart Main Entry Point
document.addEventListener('DOMContentLoaded', function () {
    initializeCartFromServerState();
    initializeCartButtons();
    initializeCartModal();
});

// Expose reInitCart globally for other scripts (e.g., music.js)
window.reInitCart = reInitCart;

--- main/webapp/js/cart-utils.js ---

// Cart Utilities: API, UI Updates, Errors
async function initializeCartFromServerState() {
    await loadCartState();
}

async function loadCartState() {
    try {
        const response = await fetch(`${window.contextPath}/CartServlet?action=getState`, {
            method: 'GET',
            headers: {
                'X-Requested-With': 'XMLHttpRequest',
                'Accept': 'application/json'
            }
        });

        if (!response.ok) {
            throw new Error(`Failed to load cart state: ${response.status}`);
        }

        const data = await response.json();
        updateCartUI(data);
    } catch (error) {
        handleCartError(error, 'Failed to load cart');
    }
}

async function updateCart(action, trackId, button) {
    if (!trackId) {
        handleCartError(new Error('Missing track ID'), 'Invalid track');
        return;
    }

    try {
        const response = await fetch(`${window.contextPath}/CartServlet?action=${action}&trackId=${trackId}`, {
            method: 'GET',
            headers: {
                'X-Requested-With': 'XMLHttpRequest',
                'Accept': 'application/json'
            }
        });

        if (!response.ok) {
            const error = await response.json();
            throw new Error(error.error || `Failed to update cart: ${response.status}`);
        }

        const data = await response.json();

        if (button) {
            updateCartButtonState(button, action === 'add');
        }

        updateCartUI(data);

    } catch (error) {
        handleCartError(error, 'Failed to update cart');
    }
}

function updateCartUI(data) {
    // Update badges
    const cartBadges = document.querySelectorAll('.cart-badge');
    cartBadges.forEach(badge => {
        badge.textContent = data.itemCount || 0;
        badge.style.display = data.itemCount > 0 ? 'flex' : 'none';
        if (data.itemCount > 0) {
            badge.classList.add('updated');
            setTimeout(() => badge.classList.remove('updated'), 600);
        }
    });

    // Update buttons
    if (data.cartItems) {
        const cartSet = new Set(data.cartItems.map(item => item.trackId));
        document.querySelectorAll('.cart-btn, .cart-btn-sm').forEach(btn => {
            const trackId = parseInt(btn.getAttribute('data-track-id'));
            const isAdded = cartSet.has(trackId);
            btn.classList.toggle('added', isAdded);
            const icon = btn.querySelector('i');
            if (icon) {
                icon.classList.toggle('fa-cart-plus', !isAdded);
                icon.classList.toggle('fa-check', isAdded);
            }
        });
    }

    // Update modal
    if (data.cartItems) {
        updateCartModal(data);
    }
}

function updateCartModal(data) {
    const modalBody = document.querySelector('#shoppingCartModal .modal-body');
    const cartTotal = document.querySelector('.cart-total');
    const modalHeaderBadge = document.querySelector('#shoppingCartModal .modal-title .cart-badge');

    if (!modalBody || !cartTotal || !modalHeaderBadge) return;

    cartTotal.textContent = `Rs. ${(data.cartTotal || 0).toFixed(2)}`;
    modalHeaderBadge.textContent = data.itemCount || 0;
    modalHeaderBadge.style.display = data.itemCount > 0 ? 'flex' : 'none';

    modalBody.innerHTML = data.itemCount === 0
        ? `
            <div class="cart-empty">
                <i class="fas fa-shopping-cart"></i>
                <p>Your cart is empty</p>
            </div>
        `
        : data.cartItems.map(item => `
            <div class="cart-item">
                <img src="${item.coverArtData ? `${window.contextPath}/cover-art?trackId=${item.trackId}` : 'https://images.unsplash.com/photo-1571330735066-03aaa9429d89?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=800&q=80'}"
                     alt="Cover for ${escapeHtml(item.title)}" class="cart-item-img">
                <div class="cart-item-details">
                    <div class="cart-item-title">${escapeHtml(item.title)}</div>
                    <div class="cart-item-artist">by ${escapeHtml(item.artistName)}</div>
                    <div class="cart-item-price">Rs. ${item.price.toFixed(2)}</div>
                </div>
                <button class="cart-item-remove" data-track-id="${item.trackId}">
                    <i class="fas fa-trash"></i>
                </button>
            </div>
        `).join('');
}

function escapeHtml(text) {
    const map = {
        '&': '&amp;',
        '<': '&lt;',
        '>': '&gt;',
        '"': '&quot;',
        "'": '&#039;'
    };
    return text.replace(/[&<>"']/g, function (m) {
        return map[m];
    });
}

function handleCartError(error, userMessage = 'Cart operation failed') {
    console.error('Cart Error:', error);
    showUserNotification(`${userMessage}: ${error.message}. <button onclick="window.reInitCart()">Retry</button>`, 'error');
}

function showUserNotification(message, type = 'error') {
    const notification = document.createElement('div');
    notification.className = `user-notification ${type}`;
    notification.textContent = message;
    notification.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        padding: 12px 16px;
        background: ${type === 'error' ? '#f8d7da' : '#d1ecf1'};
        color: ${type === 'error' ? '#721c24' : '#0c5460'};
        border: 1px solid ${type === 'error' ? '#f5c6cb' : '#bee5eb'};
        border-radius: 4px;
        z-index: 10000;
        max-width: 300px;
    `;

    document.body.appendChild(notification);

    setTimeout(() => {
        if (notification.parentNode) {
            notification.parentNode.removeChild(notification);
        }
    }, 5000);
}

function reInitCart() {
    initializeCartButtons();
    loadCartState();
}

function updateCartButtonState(button, isAdded) {
    if (isAdded) {
        button.classList.add('added');
        const icon = button.querySelector('i');
        if (icon) {
            icon.classList.replace('fa-cart-plus', 'fa-check');
        }
    } else {
        button.classList.remove('added');
        const icon = button.querySelector('i');
        if (icon) {
            if (icon.classList.contains('fa-check')) {
                icon.classList.replace('fa-check', 'fa-cart-plus');
            }
        }
    }
}


--- main/webapp/js/music-handlers.js ---

// REPLACE the entire contents of this file with the following:

// Global audio player variables
let globalAudioPlayer = null;
let currentPlayingButton = null;

// Finds the audio player and initializes play button listeners
function initializePlayButtons() {
    globalAudioPlayer = document.getElementById('global-audio-player');
    if (!globalAudioPlayer) {
        console.error('Global audio player not found!');
        return;
    }

    // Reset listener to avoid duplicates
    document.removeEventListener('click', handlePlayButtonClick);
    document.addEventListener('click', handlePlayButtonClick);

    globalAudioPlayer.addEventListener('ended', () => {
        if (currentPlayingButton) {
            const icon = currentPlayingButton.querySelector('i');
            icon.classList.remove('fa-pause');
            icon.classList.add('fa-play');
            currentPlayingButton = null;
        }
    });
}

// Handles clicks on any play button
function handlePlayButtonClick(e) {
    const playButton = e.target.closest('.play-btn-sm');
    if (!playButton) {
        return;
    }
    e.preventDefault();

    const trackId = playButton.dataset.trackId;
    const icon = playButton.querySelector('i');

    // If clicking the currently playing track, pause it
    if (currentPlayingButton === playButton && !globalAudioPlayer.paused) {
        globalAudioPlayer.pause();
        icon.classList.remove('fa-pause');
        icon.classList.add('fa-play');
    } else {
        // If another track was playing, reset its button icon
        if (currentPlayingButton) {
            const prevIcon = currentPlayingButton.querySelector('i');
            prevIcon.classList.remove('fa-pause');
            prevIcon.classList.add('fa-play');
        }

        // Set the new track source and play it
        globalAudioPlayer.src = `${window.contextPath}/stream?trackId=${trackId}`;
        globalAudioPlayer.play();
        icon.classList.remove('fa-play');
        icon.classList.add('fa-pause');
        currentPlayingButton = playButton; // Set the current button
    }
}

// This function can be kept if you have view controls
function initializeViewControls() {
    document.querySelectorAll('.view-btn').forEach(btn => {
        btn.addEventListener('click', function () {
            const view = this.getAttribute('data-view');
            document.querySelectorAll('.view-btn').forEach(b => b.classList.remove('active'));
            this.classList.add('active');

            const grid = document.getElementById('track-row');
            if (grid) {
                if (view === 'list') {
                    grid.parentElement.classList.add('list-view');
                } else {
                    grid.parentElement.classList.remove('list-view');
                }
            }
        });
    });
}

--- main/webapp/js/music-main.js ---

// Music Main Entry Point
document.addEventListener('DOMContentLoaded', function () {
    initializeViewControls();
    initializePagination();
    initializePlayButtons();

    // Initial cart init
    if (typeof window.reInitCart === 'function') {
        window.reInitCart();
    }
});

--- main/webapp/js/music-pagination.js ---

// Music Pagination and Track Content
function initializePagination() {
    document.addEventListener('click', function (e) {
        if (e.target.closest('.music-pagination .pagination-btn[data-page]')) {
            e.preventDefault();
            handlePaginationClick(e.target.closest('.pagination-btn[data-page]'));
        }
    });
}

function handlePaginationClick(link) {
    const page = parseInt(link.getAttribute('data-page'));
    console.log('Pagination clicked for page:', page);

    const currentPageElem = document.querySelector('.pagination-btn.active');
    const currentPage = parseInt(currentPageElem?.getAttribute('data-page') || '1');
    const noOfPages = window.noOfPages || 1;

    console.log('Current page:', currentPage, 'Total pages:', noOfPages);

    if (page < 1 || page > noOfPages || link.classList.contains('disabled')) {
        console.log('Invalid page, skipping');
        return;
    }

    loadTracksPage(page);
}

function loadTracksPage(page) {
    const trackRow = document.getElementById('track-row');
    if (trackRow) {
        trackRow.innerHTML = '<div class="col-12 text-center"><i class="fas fa-spinner fa-spin"></i> Loading tracks...</div>';
    }

    fetch(`${window.contextPath}/trackPaginate?page=${page}&ajax=true`, {
        method: 'GET',
        headers: {
            'X-Requested-With': 'XMLHttpRequest',
            'Accept': 'text/html'
        }
    })
        .then(response => {
            if (!response.ok) throw new Error(`Network response was not ok: ${response.status}`);
            return response.text();
        })
        .then(html => {
            updateTrackContent(html);
            scrollToTracks();
            if (typeof window.reInitCart === 'function') {
                window.reInitCart();
            }
        })
        .catch(handleTracksLoadError);
}

function updateTrackContent(html) {
    const parser = new DOMParser();
    const doc = parser.parseFromString(html, 'text/html');
    const newRow = doc.getElementById('track-row');
    const newNav = doc.querySelector('.music-pagination');

    if (newRow) {
        const oldRow = document.getElementById('track-row');
        if (oldRow) oldRow.innerHTML = newRow.innerHTML;
    }

    if (newNav) {
        const oldNav = document.querySelector('.music-pagination');
        if (oldNav) oldNav.innerHTML = newNav.innerHTML;
    } else {
        const oldNav = document.querySelector('.music-pagination');
        if (oldNav) oldNav.remove();
    }
}

function scrollToTracks() {
    const trackSection = document.querySelector('.main-content');
    if (trackSection) {
        const navbar = document.querySelector('.navbar');
        const navbarHeight = navbar ? navbar.offsetHeight : 0;
        const elementTop = trackSection.getBoundingClientRect().top + window.scrollY;
        const offsetTop = elementTop - navbarHeight - 20;

        window.scrollTo({
            top: offsetTop,
            behavior: 'smooth'
        });
    }
}

function handleTracksLoadError(error) {
    const trackRow = document.getElementById('track-row');
    if (trackRow) {
        trackRow.innerHTML = `
            <div class="col-12 text-center text-danger">
                <i class="fas fa-exclamation-triangle"></i>
                <p>Error loading tracks. Please try again.</p>
                <button class="btn btn-primary mt-2" onclick="location.reload()">Retry</button>
            </div>
        `;
    }
}

--- main/webapp/js/order-details.js ---

// /webapp/js/order-details.js
document.addEventListener('DOMContentLoaded', () => {
    const applyPromoBtn = document.getElementById('applyPromoBtn');
    if (applyPromoBtn) {
        applyPromoBtn.addEventListener('click', handlePromoValidation);
    }
});

/**
 * Handles the AJAX call to validate the promo code.
 */
async function handlePromoValidation() {
    const promoInput = document.getElementById('promoCodeField');
    const summaryCard = document.querySelector('.order-summary-card');
    if (!promoInput || !summaryCard) return;

    const code = promoInput.value.trim();
    const subtotal = summaryCard.dataset.subtotal;

    if (!code) {
        updatePromoFeedback('Please enter a promo code.', 'error');
        return;
    }

    // Show loading state
    const applyBtn = document.getElementById('applyPromoBtn');
    applyBtn.disabled = true;
    applyBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Applying...';

    try {
        const url = `${window.contextPath}/validate-promo?code=${encodeURIComponent(code)}&total=${subtotal}`;
        const response = await fetch(url);
        const data = await response.json();

        if (data.success) {
            updateOrderSummary(data);
            updatePromoFeedback(`Success! ${data.discount}% discount applied.`, 'success');
            document.getElementById('promoCodeInput').value = data.promoCode; // Set hidden input for form submission
        } else {
            resetOrderSummary();
            updatePromoFeedback(data.message || 'Invalid promo code.', 'error');
            document.getElementById('promoCodeInput').value = ''; // Clear hidden input
        }
    } catch (error) {
        console.error('Promo validation error:', error);
        resetOrderSummary();
        updatePromoFeedback('Could not validate promo code. Please try again.', 'error');
    } finally {
        // Restore button state
        applyBtn.disabled = false;
        applyBtn.innerHTML = 'Apply';
    }
}

/**
 * Updates the UI with the calculated discount and final total.
 * @param {object} promoData - The successful response from the validation servlet.
 */
function updateOrderSummary(promoData) {
    document.getElementById('summaryDiscount').textContent = `- Rs. ${promoData.discountAmount.toFixed(2)}`;
    document.getElementById('summaryDiscountRow').style.display = 'flex';
    document.getElementById('summaryTotal').textContent = `Rs. ${promoData.finalAmount.toFixed(2)}`;
}

/**
 * Resets the summary to its original state if promo is invalid.
 */
function resetOrderSummary() {
    const summaryCard = document.querySelector('.order-summary-card');
    const subtotal = parseFloat(summaryCard.dataset.subtotal).toFixed(2);

    document.getElementById('summaryDiscountRow').style.display = 'none';
    document.getElementById('summaryTotal').textContent = `Rs. ${subtotal}`;
}

/**
 * Displays success or error messages to the user.
 * @param {string} message - The message to display.
 * @param {'success'|'error'} type - The type of message.
 */
function updatePromoFeedback(message, type) {
    const feedbackEl = document.getElementById('promoFeedback');
    feedbackEl.textContent = message;
    feedbackEl.className = `promo-feedback ${type}`;
    feedbackEl.style.display = 'block';
}